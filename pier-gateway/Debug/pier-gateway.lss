
pier-gateway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00003a64  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000018f0  00804000  00804000  00003a38  2**0
                  ALLOC
  3 .eeprom       0000002c  00810000  00810000  00003a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005b  00000000  00000000  00003a64  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 0000000e  00000000  00000000  00003abf  2**0
                  CONTENTS, READONLY
  6 .stack.descriptors 00000038  00000000  00000000  00003acd  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000002e8  00000000  00000000  00003b08  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000ae46  00000000  00000000  00003df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000037c3  00000000  00000000  0000ec36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000021f7  00000000  00000000  000123f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000d84  00000000  00000000  000145f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000015fe  00000000  00000000  00015374  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001d16  00000000  00000000  00016972  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002a0  00000000  00000000  00018688  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .text         00000004  0000396a  0000396a  00003a1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00018928  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .data.txEnt   00000008  008058f0  0000396e  00003a22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .data.rxEnt   00000008  008058f8  00003976  00003a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .text.RetransmitToEthernet 00000216  00000694  00000694  00000748  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.CollectorTxDispatch 0000006e  00003148  00003148  000031fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.CollectorRxDispatch 00000214  000008aa  000008aa  0000095e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.CollectorTxCommSwitch 000000da  00001b4a  00001b4a  00001bfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.CollectorRxCommSwitch 000000da  00001c24  00001c24  00001cd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.Read    0000015c  0000114a  0000114a  000011fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.CollectorOnReceive 0000015e  00000fec  00000fec  000010a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.CollectorOnTransmit 000000ee  000015d6  000015d6  0000168a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_19 00000026  00003818  00003818  000038cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_21 00000050  00003584  00003584  00003638  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_31 0000006e  000031b6  000031b6  0000326a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_33 00000078  00002e22  00002e22  00002ed6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_52 00000070  00002ff8  00002ff8  000030ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__vector_54 0000007a  00002cb4  00002cb4  00002d68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_55 00000070  00003068  00003068  0000311c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__vector_57 0000007a  00002d2e  00002d2e  00002de2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__vector_61 00000070  000030d8  000030d8  0000318c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_63 0000007a  00002da8  00002da8  00002e5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.main    0000007c  00002bbc  00002bbc  00002c70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.vars_init 00000018  000038a0  000038a0  00003954  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.eepromvars_init 00000092  000026ee  000026ee  000027a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.usart_init 000001c2  00000c90  00000c90  00000d44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.clock_init 00000024  0000383e  0000383e  000038f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.rtc_init 000000ca  00002050  00002050  00002104  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.pwm_init 00000078  00002e9a  00002e9a  00002f4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.spi_init 00000224  00000470  00000470  00000524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__vector_4 000000d8  00001cfe  00001cfe  00001db2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.nic_var_init 0000002c  000037c4  000037c4  00003878  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.nic_sock_init 000000b6  0000259e  0000259e  00002652  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .rodata       00000006  00805900  0000397e  00003a32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 49 .text.nic_init 000001d2  00000abe  00000abe  00000b72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.Open    0000005e  000033b8  000033b8  0000346c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.Close   0000005e  00003416  00003416  000034ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.Connect 0000019a  00000e52  00000e52  00000f06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.Send    00000034  0000372e  0000372e  000037e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.SendEx  0000009a  00002654  00002654  00002708  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.Receive 0000006a  00003224  00003224  000032d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.isNICIdle 00000030  00003794  00003794  00003848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.NICTxDispatch 000000c2  0000211a  0000211a  000021ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.NICRxDispatch 0000007c  00002c38  00002c38  00002cec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.FindIdleTxPacket 00000084  000029ac  000029ac  00002a60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.FindIdleRxPacket 00000084  00002a30  00002a30  00002ae4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.RenderReadChipVersionPacket 00000084  00002ab4  00002ab4  00002b68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.InitializePacket 00000064  000032f4  000032f4  000033a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.RenderUpdateIpAddrPacket 000000c2  000021dc  000021dc  00002290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.RenderReadIpAddrPacket 0000008a  0000280e  0000280e  000028c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.RenderUpdateMACPacket 000000e6  000018a0  000018a0  00001954  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.RenderReadMACPacket 0000008e  00002780  00002780  00002834  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.RenderUpdateGatewayPacket 000000c2  0000229e  0000229e  00002352  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.RenderReadGatewayPacket 0000008a  00002898  00002898  0000294c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.RenderUpdateSubnetMaskPacket 000000c2  00002360  00002360  00002414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.RenderReadSubnetMaskPacket 0000008a  00002922  00002922  000029d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.RenderUpdateSocketModePacket 000000d2  00001f7e  00001f7e  00002032  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.RenderSocketCmdPacket 000000d4  00001dd6  00001dd6  00001e8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.RenderUpdateSocketSPortPacket 000000e2  00001986  00001986  00001a3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.RenderUpdateSocketDPortPacket 000000e2  00001a68  00001a68  00001b1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.RenderUpdateSocketDIPPacket 000000fc  000014da  000014da  0000158e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.RenderReadRxPtrPacket 000000be  00002422  00002422  000024d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.RenderReadTxPtrPacket 000000be  000024e0  000024e0  00002594  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.RenderUpdRxPtrPacket 000000ee  000016c4  000016c4  00001778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.RenderUpdTxPtrPacket 000000ee  000017b2  000017b2  00001866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.InsertTxPacket 00000060  00003358  00003358  0000340c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.InsertRxPacket 0000001c  00003884  00003884  00003938  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.NICRxDigestPacket 0000012c  000012a6  000012a6  0000135a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.UpdateSockStat 00000066  0000328e  0000328e  00003342  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.ReadSockPtr 00000108  000013d2  000013d2  00001486  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.NICSchedule 00000074  00002f12  00002f12  00002fc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.CheckNICStatus 00000016  000038b8  000038b8  0000396c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.CheckSocketStatus 00000072  00002f86  00002f86  0000303a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_18 0000030c  00000164  00000164  00000218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__vector_58 0000005a  000034d2  000034d2  00003586  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.CheckChecksum 00000084  00002b38  00002b38  00002bec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.GetChecksum 00000058  0000352c  0000352c  000035e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.GetWordFromBytes 00000028  000037f0  000037f0  000038a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.GetWordFrom14Bits 0000004c  000035d4  000035d4  00003688  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.GetBytesFromWord 00000048  00003620  00003620  000036d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.GetBytesFrom14Bits 0000003a  000036f4  000036f4  000037a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.GetBSBBySocketNumber 00000016  000038ce  000038ce  00003982  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.avrlibc.fplib 0000000a  00003948  00003948  000039fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.avrlibc.fplib 0000005e  00003474  00003474  00003528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.avrlibc.fplib 00000048  00003668  00003668  0000371c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.avrlibc.fplib 00000044  000036b0  000036b0  00003764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.avrlibc.fplib 0000000e  000038f6  000038f6  000039aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.avrlibc.fplib 0000000a  00003952  00003952  00003a06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.avrlibc.fplib 00000008  0000395c  0000395c  00003a10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.avrlibc.fplib 000000d4  00001eaa  00001eaa  00001f5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.avrlibc.fplib 0000000c  0000393c  0000393c  000039f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.avrlibc.fplib 00000006  00003964  00003964  00003a18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.avrlibc.fplib 0000000e  00003904  00003904  000039b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.avrlibc.fplib 0000000e  00003912  00003912  000039c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.avrlibc.fplib 00000022  00003862  00003862  00003916  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.avrlibc 00000032  00003762  00003762  00003816  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.avrlibc 0000000e  00003920  00003920  000039d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.avrlibc 00000012  000038e4  000038e4  00003998  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.libgcc  0000000e  0000392e  0000392e  000039e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__ctors_end>
   4:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
   8:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
   c:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  10:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__vector_4>
  14:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  18:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  1c:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  20:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  24:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  28:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  2c:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  30:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  34:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  38:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  3c:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  40:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  44:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <_etext>
  4c:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <__vector_19>
  50:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  54:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__vector_21>
  58:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  5c:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  60:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  64:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  68:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  6c:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  70:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  74:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  78:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  7c:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__vector_31>
  80:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  84:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <__vector_33>
  88:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  8c:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  90:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  94:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  98:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  9c:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  a0:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  a4:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  a8:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  ac:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  b0:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  b4:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  b8:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  bc:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  c0:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  c4:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  c8:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  cc:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  d0:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__vector_52>
  d4:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  d8:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__vector_54>
  dc:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__vector_55>
  e0:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  e4:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__vector_57>
  e8:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__vector_58>
  ec:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  f0:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  f4:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__vector_61>
  f8:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__bad_interrupt>
  fc:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__vector_63>

00000100 <.dinit>:
 100:	40 00       	.word	0x0040	; ????
 102:	58 f0       	brcs	.+22     	; 0x11a <__do_copy_data+0x2>
 104:	80 58       	subi	r24, 0x80	; 128
 106:	f0 59       	subi	r31, 0x90	; 144
 108:	06 00       	.word	0x0006	; ????
 10a:	39 6e       	ori	r19, 0xE9	; 233

0000010c <__ctors_end>:
 10c:	11 24       	eor	r1, r1
 10e:	1f be       	out	0x3f, r1	; 63
 110:	cf ef       	ldi	r28, 0xFF	; 255
 112:	cd bf       	out	0x3d, r28	; 61
 114:	df e7       	ldi	r29, 0x7F	; 127
 116:	de bf       	out	0x3e, r29	; 62

00000118 <__do_copy_data>:
 118:	e0 e0       	ldi	r30, 0x00	; 0
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	19 c0       	rjmp	.+50     	; 0x152 <__do_clear_bss+0x8>
 120:	b7 91       	elpm	r27, Z+
 122:	a7 91       	elpm	r26, Z+
 124:	37 91       	elpm	r19, Z+
 126:	27 91       	elpm	r18, Z+
 128:	07 91       	elpm	r16, Z+
 12a:	07 fd       	sbrc	r16, 7
 12c:	0e c0       	rjmp	.+28     	; 0x14a <__do_clear_bss>
 12e:	97 91       	elpm	r25, Z+
 130:	87 91       	elpm	r24, Z+
 132:	ef 01       	movw	r28, r30
 134:	f9 2f       	mov	r31, r25
 136:	e8 2f       	mov	r30, r24
 138:	0b bf       	out	0x3b, r16	; 59
 13a:	07 90       	elpm	r0, Z+
 13c:	0d 92       	st	X+, r0
 13e:	a2 17       	cp	r26, r18
 140:	b3 07       	cpc	r27, r19
 142:	d9 f7       	brne	.-10     	; 0x13a <__do_copy_data+0x22>
 144:	fe 01       	movw	r30, r28
 146:	1b be       	out	0x3b, r1	; 59
 148:	04 c0       	rjmp	.+8      	; 0x152 <__do_clear_bss+0x8>

0000014a <__do_clear_bss>:
 14a:	1d 92       	st	X+, r1
 14c:	a2 17       	cp	r26, r18
 14e:	b3 07       	cpc	r27, r19
 150:	e1 f7       	brne	.-8      	; 0x14a <__do_clear_bss>
 152:	ec 30       	cpi	r30, 0x0C	; 12
 154:	f4 07       	cpc	r31, r20
 156:	21 f7       	brne	.-56     	; 0x120 <__do_copy_data+0x8>
 158:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <main>
 15c:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>

Disassembly of section .text:

0000396a <__bad_interrupt>:
    396a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.RetransmitToEthernet:

00000694 <RetransmitToEthernet>:
	&(USART3.RXDATAL),
	&(USART4.RXDATAL),
	&(USART5.RXDATAL)
};

void RetransmitToEthernet(uint8_t sock_num, const uint8_t const* data, uint8_t size) {
 694:	cf 93       	push	r28
 696:	df 93       	push	r29
 698:	cd b7       	in	r28, 0x3d	; 61
 69a:	de b7       	in	r29, 0x3e	; 62
 69c:	cf 51       	subi	r28, 0x1F	; 31
 69e:	d1 40       	sbci	r29, 0x01	; 1
 6a0:	cd bf       	out	0x3d, r28	; 61
 6a2:	de bf       	out	0x3e, r29	; 62
 6a4:	fe 01       	movw	r30, r28
 6a6:	ee 56       	subi	r30, 0x6E	; 110
 6a8:	ff 4f       	sbci	r31, 0xFF	; 255
 6aa:	80 83       	st	Z, r24
 6ac:	ce 01       	movw	r24, r28
 6ae:	8d 56       	subi	r24, 0x6D	; 109
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	fc 01       	movw	r30, r24
 6b4:	40 83       	st	Z, r20
 6b6:	51 83       	std	Z+1, r21	; 0x01
 6b8:	62 83       	std	Z+2, r22	; 0x02
 6ba:	ce 01       	movw	r24, r28
 6bc:	8a 56       	subi	r24, 0x6A	; 106
 6be:	9f 4f       	sbci	r25, 0xFF	; 255
 6c0:	fc 01       	movw	r30, r24
 6c2:	20 83       	st	Z, r18
	NIC_PACKET_t packet;
	NICSockData_t* sock_data = &(NICData.sock_data[sock_num]);
 6c4:	ce 01       	movw	r24, r28
 6c6:	8e 56       	subi	r24, 0x6E	; 110
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	fc 01       	movw	r30, r24
 6cc:	80 81       	ld	r24, Z
 6ce:	88 2f       	mov	r24, r24
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	9c 01       	movw	r18, r24
 6d8:	22 0f       	add	r18, r18
 6da:	33 1f       	adc	r19, r19
 6dc:	22 0f       	add	r18, r18
 6de:	33 1f       	adc	r19, r19
 6e0:	82 0f       	add	r24, r18
 6e2:	93 1f       	adc	r25, r19
 6e4:	08 96       	adiw	r24, 0x08	; 8
 6e6:	88 59       	subi	r24, 0x98	; 152
 6e8:	99 4b       	sbci	r25, 0xB9	; 185
 6ea:	89 83       	std	Y+1, r24	; 0x01
 6ec:	9a 83       	std	Y+2, r25	; 0x02
	// if (sock_data->isTxPtrRdy == false) return;
	uint8_t txwr[2];
	txwr[0] = sock_data->txwr[0];
 6ee:	89 81       	ldd	r24, Y+1	; 0x01
 6f0:	9a 81       	ldd	r25, Y+2	; 0x02
 6f2:	fc 01       	movw	r30, r24
 6f4:	20 85       	ldd	r18, Z+8	; 0x08
 6f6:	ce 01       	movw	r24, r28
 6f8:	82 57       	subi	r24, 0x72	; 114
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 83       	st	Z, r18
	txwr[1] = sock_data->txwr[1];
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	9a 81       	ldd	r25, Y+2	; 0x02
 704:	fc 01       	movw	r30, r24
 706:	21 85       	ldd	r18, Z+9	; 0x09
 708:	ce 01       	movw	r24, r28
 70a:	82 57       	subi	r24, 0x72	; 114
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	fc 01       	movw	r30, r24
 710:	21 83       	std	Z+1, r18	; 0x01
	packet.payload.addr.bytes[0] = sock_data->txwr[0];
 712:	89 81       	ldd	r24, Y+1	; 0x01
 714:	9a 81       	ldd	r25, Y+2	; 0x02
 716:	fc 01       	movw	r30, r24
 718:	80 85       	ldd	r24, Z+8	; 0x08
 71a:	8b 87       	std	Y+11, r24	; 0x0b
	packet.payload.addr.bytes[1] = sock_data->txwr[1];
 71c:	89 81       	ldd	r24, Y+1	; 0x01
 71e:	9a 81       	ldd	r25, Y+2	; 0x02
 720:	fc 01       	movw	r30, r24
 722:	81 85       	ldd	r24, Z+9	; 0x09
 724:	8c 87       	std	Y+12, r24	; 0x0c
	packet.payload.ctrl.bits.BSB = NIC_BS_SOCKET1_TXBUFFER;
 726:	8d 85       	ldd	r24, Y+13	; 0x0d
 728:	87 70       	andi	r24, 0x07	; 7
 72a:	80 63       	ori	r24, 0x30	; 48
 72c:	8d 87       	std	Y+13, r24	; 0x0d
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
 72e:	8d 85       	ldd	r24, Y+13	; 0x0d
 730:	8c 7f       	andi	r24, 0xFC	; 252
 732:	8d 87       	std	Y+13, r24	; 0x0d
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_WRITE_bm;
 734:	8d 85       	ldd	r24, Y+13	; 0x0d
 736:	84 60       	ori	r24, 0x04	; 4
 738:	8d 87       	std	Y+13, r24	; 0x0d
	memcpy(packet.payload.data, data, size);
 73a:	ce 01       	movw	r24, r28
 73c:	8a 56       	subi	r24, 0x6A	; 106
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	fc 01       	movw	r30, r24
 742:	80 81       	ld	r24, Z
 744:	48 2f       	mov	r20, r24
 746:	50 e0       	ldi	r21, 0x00	; 0
 748:	ce 01       	movw	r24, r28
 74a:	8d 56       	subi	r24, 0x6D	; 109
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	fc 01       	movw	r30, r24
 750:	80 81       	ld	r24, Z
 752:	91 81       	ldd	r25, Z+1	; 0x01
 754:	a2 81       	ldd	r26, Z+2	; 0x02
 756:	9e 01       	movw	r18, r28
 758:	2b 5f       	subi	r18, 0xFB	; 251
 75a:	3f 4f       	sbci	r19, 0xFF	; 255
 75c:	f9 01       	movw	r30, r18
 75e:	39 96       	adiw	r30, 0x09	; 9
 760:	9a 01       	movw	r18, r20
 762:	ac 01       	movw	r20, r24
 764:	6a 2f       	mov	r22, r26
 766:	cf 01       	movw	r24, r30
 768:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
	packet.meta.dp_length = size;
 76c:	ce 01       	movw	r24, r28
 76e:	8a 56       	subi	r24, 0x6A	; 106
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	fc 01       	movw	r30, r24
 774:	80 81       	ld	r24, Z
 776:	88 2f       	mov	r24, r24
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	89 87       	std	Y+9, r24	; 0x09
 77c:	9a 87       	std	Y+10, r25	; 0x0a
	packet.meta.packet_length = size + 3;
 77e:	ce 01       	movw	r24, r28
 780:	8a 56       	subi	r24, 0x6A	; 106
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	fc 01       	movw	r30, r24
 786:	80 81       	ld	r24, Z
 788:	88 2f       	mov	r24, r24
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	03 96       	adiw	r24, 0x03	; 3
 78e:	8f 83       	std	Y+7, r24	; 0x07
 790:	98 87       	std	Y+8, r25	; 0x08
	packet.meta.type = NIC_PACKET_TYPE_MODIFY_TXBUFF;
 792:	84 e5       	ldi	r24, 0x54	; 84
 794:	8e 83       	std	Y+6, r24	; 0x06
	InsertTxPacket(&packet);
 796:	ce 01       	movw	r24, r28
 798:	05 96       	adiw	r24, 0x05	; 5
 79a:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
	
	uint16_t txwr_word = GetWordFromBytes(txwr[0], txwr[1]);
 79e:	ce 01       	movw	r24, r28
 7a0:	82 57       	subi	r24, 0x72	; 114
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	fc 01       	movw	r30, r24
 7a6:	21 81       	ldd	r18, Z+1	; 0x01
 7a8:	ce 01       	movw	r24, r28
 7aa:	82 57       	subi	r24, 0x72	; 114
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	fc 01       	movw	r30, r24
 7b0:	80 81       	ld	r24, Z
 7b2:	62 2f       	mov	r22, r18
 7b4:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <GetWordFromBytes>
 7b8:	8b 83       	std	Y+3, r24	; 0x03
 7ba:	9c 83       	std	Y+4, r25	; 0x04
	txwr_word += size;
 7bc:	ce 01       	movw	r24, r28
 7be:	8a 56       	subi	r24, 0x6A	; 106
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	fc 01       	movw	r30, r24
 7c4:	80 81       	ld	r24, Z
 7c6:	88 2f       	mov	r24, r24
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	2b 81       	ldd	r18, Y+3	; 0x03
 7cc:	3c 81       	ldd	r19, Y+4	; 0x04
 7ce:	82 0f       	add	r24, r18
 7d0:	93 1f       	adc	r25, r19
 7d2:	8b 83       	std	Y+3, r24	; 0x03
 7d4:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t txwr_upd[2];
	txwr_upd[0] = GetBytesFromWord(txwr_word, 0);
 7d6:	8b 81       	ldd	r24, Y+3	; 0x03
 7d8:	9c 81       	ldd	r25, Y+4	; 0x04
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	0e 94 10 1b 	call	0x3620	; 0x3620 <GetBytesFromWord>
 7e0:	28 2f       	mov	r18, r24
 7e2:	ce 01       	movw	r24, r28
 7e4:	80 57       	subi	r24, 0x70	; 112
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	fc 01       	movw	r30, r24
 7ea:	20 83       	st	Z, r18
	txwr_upd[1] = GetBytesFromWord(txwr_word, 1);
 7ec:	8b 81       	ldd	r24, Y+3	; 0x03
 7ee:	9c 81       	ldd	r25, Y+4	; 0x04
 7f0:	61 e0       	ldi	r22, 0x01	; 1
 7f2:	0e 94 10 1b 	call	0x3620	; 0x3620 <GetBytesFromWord>
 7f6:	28 2f       	mov	r18, r24
 7f8:	ce 01       	movw	r24, r28
 7fa:	80 57       	subi	r24, 0x70	; 112
 7fc:	9f 4f       	sbci	r25, 0xFF	; 255
 7fe:	fc 01       	movw	r30, r24
 800:	21 83       	std	Z+1, r18	; 0x01
	packet = RenderUpdTxPtrPacket(sock_num, txwr_upd);
 802:	9e 01       	movw	r18, r28
 804:	29 56       	subi	r18, 0x69	; 105
 806:	3f 4f       	sbci	r19, 0xFF	; 255
 808:	ae 01       	movw	r20, r28
 80a:	40 57       	subi	r20, 0x70	; 112
 80c:	5f 4f       	sbci	r21, 0xFF	; 255
 80e:	ce 01       	movw	r24, r28
 810:	8e 56       	subi	r24, 0x6E	; 110
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	fc 01       	movw	r30, r24
 816:	60 81       	ld	r22, Z
 818:	c9 01       	movw	r24, r18
 81a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <RenderUpdTxPtrPacket>
 81e:	ce 01       	movw	r24, r28
 820:	89 56       	subi	r24, 0x69	; 105
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	29 e8       	ldi	r18, 0x89	; 137
 826:	fc 01       	movw	r30, r24
 828:	de 01       	movw	r26, r28
 82a:	15 96       	adiw	r26, 0x05	; 5
 82c:	01 90       	ld	r0, Z+
 82e:	0d 92       	st	X+, r0
 830:	2a 95       	dec	r18
 832:	e1 f7       	brne	.-8      	; 0x82c <RetransmitToEthernet+0x198>
	if (InsertTxPacket(&packet) != NULL) {
 834:	ce 01       	movw	r24, r28
 836:	05 96       	adiw	r24, 0x05	; 5
 838:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
 83c:	89 2b       	or	r24, r25
 83e:	91 f0       	breq	.+36     	; 0x864 <RetransmitToEthernet+0x1d0>
		sock_data->txwr[0] = txwr_upd[0];
 840:	ce 01       	movw	r24, r28
 842:	80 57       	subi	r24, 0x70	; 112
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	fc 01       	movw	r30, r24
 848:	20 81       	ld	r18, Z
 84a:	89 81       	ldd	r24, Y+1	; 0x01
 84c:	9a 81       	ldd	r25, Y+2	; 0x02
 84e:	fc 01       	movw	r30, r24
 850:	20 87       	std	Z+8, r18	; 0x08
		sock_data->txwr[1] = txwr_upd[1];
 852:	ce 01       	movw	r24, r28
 854:	80 57       	subi	r24, 0x70	; 112
 856:	9f 4f       	sbci	r25, 0xFF	; 255
 858:	fc 01       	movw	r30, r24
 85a:	21 81       	ldd	r18, Z+1	; 0x01
 85c:	89 81       	ldd	r24, Y+1	; 0x01
 85e:	9a 81       	ldd	r25, Y+2	; 0x02
 860:	fc 01       	movw	r30, r24
 862:	21 87       	std	Z+9, r18	; 0x09
	}
	
	packet = RenderSocketCmdPacket(sock_num, NIC_SOCKET_CMD_SEND);
 864:	9e 01       	movw	r18, r28
 866:	29 56       	subi	r18, 0x69	; 105
 868:	3f 4f       	sbci	r19, 0xFF	; 255
 86a:	ce 01       	movw	r24, r28
 86c:	8e 56       	subi	r24, 0x6E	; 110
 86e:	9f 4f       	sbci	r25, 0xFF	; 255
 870:	40 e2       	ldi	r20, 0x20	; 32
 872:	fc 01       	movw	r30, r24
 874:	60 81       	ld	r22, Z
 876:	c9 01       	movw	r24, r18
 878:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <RenderSocketCmdPacket>
 87c:	ce 01       	movw	r24, r28
 87e:	89 56       	subi	r24, 0x69	; 105
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	29 e8       	ldi	r18, 0x89	; 137
 884:	fc 01       	movw	r30, r24
 886:	de 01       	movw	r26, r28
 888:	15 96       	adiw	r26, 0x05	; 5
 88a:	01 90       	ld	r0, Z+
 88c:	0d 92       	st	X+, r0
 88e:	2a 95       	dec	r18
 890:	e1 f7       	brne	.-8      	; 0x88a <RetransmitToEthernet+0x1f6>
	InsertTxPacket(&packet);
 892:	ce 01       	movw	r24, r28
 894:	05 96       	adiw	r24, 0x05	; 5
 896:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
}
 89a:	00 00       	nop
 89c:	c1 5e       	subi	r28, 0xE1	; 225
 89e:	de 4f       	sbci	r29, 0xFE	; 254
 8a0:	cd bf       	out	0x3d, r28	; 61
 8a2:	de bf       	out	0x3e, r29	; 62
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	08 95       	ret

Disassembly of section .text.CollectorTxDispatch:

00003148 <CollectorTxDispatch>:

void CollectorTxDispatch() {
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
    314c:	1f 92       	push	r1
    314e:	cd b7       	in	r28, 0x3d	; 61
    3150:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 0; i < COLLECTOR_COUNT; i++)
    3152:	19 82       	std	Y+1, r1	; 0x01
    3154:	28 c0       	rjmp	.+80     	; 0x31a6 <CollectorTxDispatch+0x5e>
	{
		if (CollectorData[i].isCollectReq == true) {
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	48 2f       	mov	r20, r24
    315a:	50 e0       	ldi	r21, 0x00	; 0
    315c:	2e e8       	ldi	r18, 0x8E	; 142
    315e:	31 e0       	ldi	r19, 0x01	; 1
    3160:	42 9f       	mul	r20, r18
    3162:	c0 01       	movw	r24, r0
    3164:	43 9f       	mul	r20, r19
    3166:	90 0d       	add	r25, r0
    3168:	52 9f       	mul	r21, r18
    316a:	90 0d       	add	r25, r0
    316c:	11 24       	eor	r1, r1
    316e:	8d 5f       	subi	r24, 0xFD	; 253
    3170:	9f 4b       	sbci	r25, 0xBF	; 191
    3172:	fc 01       	movw	r30, r24
    3174:	80 81       	ld	r24, Z
    3176:	88 23       	and	r24, r24
    3178:	99 f0       	breq	.+38     	; 0x31a0 <CollectorTxDispatch+0x58>
			Read(i);
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	0e 94 a5 08 	call	0x114a	; 0x114a <Read>
			CollectorData[i].isCollectReq = false;
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	48 2f       	mov	r20, r24
    3184:	50 e0       	ldi	r21, 0x00	; 0
    3186:	2e e8       	ldi	r18, 0x8E	; 142
    3188:	31 e0       	ldi	r19, 0x01	; 1
    318a:	42 9f       	mul	r20, r18
    318c:	c0 01       	movw	r24, r0
    318e:	43 9f       	mul	r20, r19
    3190:	90 0d       	add	r25, r0
    3192:	52 9f       	mul	r21, r18
    3194:	90 0d       	add	r25, r0
    3196:	11 24       	eor	r1, r1
    3198:	8d 5f       	subi	r24, 0xFD	; 253
    319a:	9f 4b       	sbci	r25, 0xBF	; 191
    319c:	fc 01       	movw	r30, r24
    319e:	10 82       	st	Z, r1
	packet = RenderSocketCmdPacket(sock_num, NIC_SOCKET_CMD_SEND);
	InsertTxPacket(&packet);
}

void CollectorTxDispatch() {
	for (uint8_t i = 0; i < COLLECTOR_COUNT; i++)
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	8f 5f       	subi	r24, 0xFF	; 255
    31a4:	89 83       	std	Y+1, r24	; 0x01
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	84 30       	cpi	r24, 0x04	; 4
    31aa:	a8 f2       	brcs	.-86     	; 0x3156 <CollectorTxDispatch+0xe>
		if (CollectorData[i].isCollectReq == true) {
			Read(i);
			CollectorData[i].isCollectReq = false;
		}
	}
}
    31ac:	00 00       	nop
    31ae:	0f 90       	pop	r0
    31b0:	df 91       	pop	r29
    31b2:	cf 91       	pop	r28
    31b4:	08 95       	ret

Disassembly of section .text.CollectorRxDispatch:

000008aa <CollectorRxDispatch>:

void CollectorRxDispatch() {
 8aa:	ef 92       	push	r14
 8ac:	ff 92       	push	r15
 8ae:	0f 93       	push	r16
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	1f 92       	push	r1
 8b6:	cd b7       	in	r28, 0x3d	; 61
 8b8:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 0; i < COLLECTOR_COUNT; i++)
 8ba:	19 82       	std	Y+1, r1	; 0x01
 8bc:	f4 c0       	rjmp	.+488    	; 0xaa6 <CollectorRxDispatch+0x1fc>
	{
		if (CollectorData[i].isRxC == true) {
 8be:	89 81       	ldd	r24, Y+1	; 0x01
 8c0:	48 2f       	mov	r20, r24
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	2e e8       	ldi	r18, 0x8E	; 142
 8c6:	31 e0       	ldi	r19, 0x01	; 1
 8c8:	42 9f       	mul	r20, r18
 8ca:	c0 01       	movw	r24, r0
 8cc:	43 9f       	mul	r20, r19
 8ce:	90 0d       	add	r25, r0
 8d0:	52 9f       	mul	r21, r18
 8d2:	90 0d       	add	r25, r0
 8d4:	11 24       	eor	r1, r1
 8d6:	8f 5f       	subi	r24, 0xFF	; 255
 8d8:	9f 4b       	sbci	r25, 0xBF	; 191
 8da:	fc 01       	movw	r30, r24
 8dc:	80 81       	ld	r24, Z
 8de:	88 23       	and	r24, r24
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <CollectorRxDispatch+0x3a>
 8e2:	de c0       	rjmp	.+444    	; 0xaa0 <CollectorRxDispatch+0x1f6>
			CollectorData[i].fwdLen = CollectorData[i].rxLen;
 8e4:	89 81       	ldd	r24, Y+1	; 0x01
 8e6:	68 2f       	mov	r22, r24
 8e8:	70 e0       	ldi	r23, 0x00	; 0
 8ea:	89 81       	ldd	r24, Y+1	; 0x01
 8ec:	48 2f       	mov	r20, r24
 8ee:	50 e0       	ldi	r21, 0x00	; 0
 8f0:	2e e8       	ldi	r18, 0x8E	; 142
 8f2:	31 e0       	ldi	r19, 0x01	; 1
 8f4:	42 9f       	mul	r20, r18
 8f6:	c0 01       	movw	r24, r0
 8f8:	43 9f       	mul	r20, r19
 8fa:	90 0d       	add	r25, r0
 8fc:	52 9f       	mul	r21, r18
 8fe:	90 0d       	add	r25, r0
 900:	11 24       	eor	r1, r1
 902:	8a 5f       	subi	r24, 0xFA	; 250
 904:	9e 4b       	sbci	r25, 0xBE	; 190
 906:	fc 01       	movw	r30, r24
 908:	20 81       	ld	r18, Z
 90a:	31 81       	ldd	r19, Z+1	; 0x01
 90c:	4e e8       	ldi	r20, 0x8E	; 142
 90e:	51 e0       	ldi	r21, 0x01	; 1
 910:	64 9f       	mul	r22, r20
 912:	c0 01       	movw	r24, r0
 914:	65 9f       	mul	r22, r21
 916:	90 0d       	add	r25, r0
 918:	74 9f       	mul	r23, r20
 91a:	90 0d       	add	r25, r0
 91c:	11 24       	eor	r1, r1
 91e:	88 5f       	subi	r24, 0xF8	; 248
 920:	9e 4b       	sbci	r25, 0xBE	; 190
 922:	fc 01       	movw	r30, r24
 924:	20 83       	st	Z, r18
 926:	31 83       	std	Z+1, r19	; 0x01
			memcpy(
 928:	89 81       	ldd	r24, Y+1	; 0x01
 92a:	48 2f       	mov	r20, r24
 92c:	50 e0       	ldi	r21, 0x00	; 0
 92e:	2e e8       	ldi	r18, 0x8E	; 142
 930:	31 e0       	ldi	r19, 0x01	; 1
 932:	42 9f       	mul	r20, r18
 934:	c0 01       	movw	r24, r0
 936:	43 9f       	mul	r20, r19
 938:	90 0d       	add	r25, r0
 93a:	52 9f       	mul	r21, r18
 93c:	90 0d       	add	r25, r0
 93e:	11 24       	eor	r1, r1
 940:	88 5f       	subi	r24, 0xF8	; 248
 942:	9e 4b       	sbci	r25, 0xBE	; 190
 944:	fc 01       	movw	r30, r24
 946:	60 81       	ld	r22, Z
 948:	71 81       	ldd	r23, Z+1	; 0x01
				CollectorData[i].fwdBuff, 
				CollectorData[i].rxBuff, 
 94a:	89 81       	ldd	r24, Y+1	; 0x01
 94c:	48 2f       	mov	r20, r24
 94e:	50 e0       	ldi	r21, 0x00	; 0
 950:	2e e8       	ldi	r18, 0x8E	; 142
 952:	31 e0       	ldi	r19, 0x01	; 1
 954:	42 9f       	mul	r20, r18
 956:	c0 01       	movw	r24, r0
 958:	43 9f       	mul	r20, r19
 95a:	90 0d       	add	r25, r0
 95c:	52 9f       	mul	r21, r18
 95e:	90 0d       	add	r25, r0
 960:	11 24       	eor	r1, r1
 962:	04 96       	adiw	r24, 0x04	; 4
 964:	80 50       	subi	r24, 0x00	; 0
 966:	90 4c       	sbci	r25, 0xC0	; 192
void CollectorRxDispatch() {
	for (uint8_t i = 0; i < COLLECTOR_COUNT; i++)
	{
		if (CollectorData[i].isRxC == true) {
			CollectorData[i].fwdLen = CollectorData[i].rxLen;
			memcpy(
 968:	cc 01       	movw	r24, r24
 96a:	a0 e8       	ldi	r26, 0x80	; 128
 96c:	aa 2f       	mov	r26, r26
 96e:	7c 01       	movw	r14, r24
 970:	0a 2f       	mov	r16, r26
				CollectorData[i].fwdBuff, 
 972:	89 81       	ldd	r24, Y+1	; 0x01
 974:	48 2f       	mov	r20, r24
 976:	50 e0       	ldi	r21, 0x00	; 0
 978:	2e e8       	ldi	r18, 0x8E	; 142
 97a:	31 e0       	ldi	r19, 0x01	; 1
 97c:	42 9f       	mul	r20, r18
 97e:	c0 01       	movw	r24, r0
 980:	43 9f       	mul	r20, r19
 982:	90 0d       	add	r25, r0
 984:	52 9f       	mul	r21, r18
 986:	90 0d       	add	r25, r0
 988:	11 24       	eor	r1, r1
 98a:	8c 57       	subi	r24, 0x7C	; 124
 98c:	9f 4f       	sbci	r25, 0xFF	; 255
 98e:	80 50       	subi	r24, 0x00	; 0
 990:	90 4c       	sbci	r25, 0xC0	; 192
void CollectorRxDispatch() {
	for (uint8_t i = 0; i < COLLECTOR_COUNT; i++)
	{
		if (CollectorData[i].isRxC == true) {
			CollectorData[i].fwdLen = CollectorData[i].rxLen;
			memcpy(
 992:	9b 01       	movw	r18, r22
 994:	60 2f       	mov	r22, r16
 996:	a7 01       	movw	r20, r14
 998:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
				CollectorData[i].fwdBuff, 
				CollectorData[i].rxBuff, 
				CollectorData[i].fwdLen);
			CollectorData[i].rxLen = 0;
 99c:	89 81       	ldd	r24, Y+1	; 0x01
 99e:	48 2f       	mov	r20, r24
 9a0:	50 e0       	ldi	r21, 0x00	; 0
 9a2:	2e e8       	ldi	r18, 0x8E	; 142
 9a4:	31 e0       	ldi	r19, 0x01	; 1
 9a6:	42 9f       	mul	r20, r18
 9a8:	c0 01       	movw	r24, r0
 9aa:	43 9f       	mul	r20, r19
 9ac:	90 0d       	add	r25, r0
 9ae:	52 9f       	mul	r21, r18
 9b0:	90 0d       	add	r25, r0
 9b2:	11 24       	eor	r1, r1
 9b4:	8a 5f       	subi	r24, 0xFA	; 250
 9b6:	9e 4b       	sbci	r25, 0xBE	; 190
 9b8:	fc 01       	movw	r30, r24
 9ba:	10 82       	st	Z, r1
 9bc:	11 82       	std	Z+1, r1	; 0x01
			CollectorData[i].rxPtr = 0;
 9be:	89 81       	ldd	r24, Y+1	; 0x01
 9c0:	48 2f       	mov	r20, r24
 9c2:	50 e0       	ldi	r21, 0x00	; 0
 9c4:	2e e8       	ldi	r18, 0x8E	; 142
 9c6:	31 e0       	ldi	r19, 0x01	; 1
 9c8:	42 9f       	mul	r20, r18
 9ca:	c0 01       	movw	r24, r0
 9cc:	43 9f       	mul	r20, r19
 9ce:	90 0d       	add	r25, r0
 9d0:	52 9f       	mul	r21, r18
 9d2:	90 0d       	add	r25, r0
 9d4:	11 24       	eor	r1, r1
 9d6:	8c 5f       	subi	r24, 0xFC	; 252
 9d8:	9e 4b       	sbci	r25, 0xBE	; 190
 9da:	fc 01       	movw	r30, r24
 9dc:	10 82       	st	Z, r1
 9de:	11 82       	std	Z+1, r1	; 0x01
			CollectorData[i].isRxC = false;
 9e0:	89 81       	ldd	r24, Y+1	; 0x01
 9e2:	48 2f       	mov	r20, r24
 9e4:	50 e0       	ldi	r21, 0x00	; 0
 9e6:	2e e8       	ldi	r18, 0x8E	; 142
 9e8:	31 e0       	ldi	r19, 0x01	; 1
 9ea:	42 9f       	mul	r20, r18
 9ec:	c0 01       	movw	r24, r0
 9ee:	43 9f       	mul	r20, r19
 9f0:	90 0d       	add	r25, r0
 9f2:	52 9f       	mul	r21, r18
 9f4:	90 0d       	add	r25, r0
 9f6:	11 24       	eor	r1, r1
 9f8:	8f 5f       	subi	r24, 0xFF	; 255
 9fa:	9f 4b       	sbci	r25, 0xBF	; 191
 9fc:	fc 01       	movw	r30, r24
 9fe:	10 82       	st	Z, r1
			if (CheckChecksum(CollectorData[i].fwdBuff, CollectorData[i].fwdLen)) {
 a00:	89 81       	ldd	r24, Y+1	; 0x01
 a02:	48 2f       	mov	r20, r24
 a04:	50 e0       	ldi	r21, 0x00	; 0
 a06:	2e e8       	ldi	r18, 0x8E	; 142
 a08:	31 e0       	ldi	r19, 0x01	; 1
 a0a:	42 9f       	mul	r20, r18
 a0c:	c0 01       	movw	r24, r0
 a0e:	43 9f       	mul	r20, r19
 a10:	90 0d       	add	r25, r0
 a12:	52 9f       	mul	r21, r18
 a14:	90 0d       	add	r25, r0
 a16:	11 24       	eor	r1, r1
 a18:	88 5f       	subi	r24, 0xF8	; 248
 a1a:	9e 4b       	sbci	r25, 0xBE	; 190
 a1c:	fc 01       	movw	r30, r24
 a1e:	60 81       	ld	r22, Z
 a20:	71 81       	ldd	r23, Z+1	; 0x01
 a22:	89 81       	ldd	r24, Y+1	; 0x01
 a24:	48 2f       	mov	r20, r24
 a26:	50 e0       	ldi	r21, 0x00	; 0
 a28:	2e e8       	ldi	r18, 0x8E	; 142
 a2a:	31 e0       	ldi	r19, 0x01	; 1
 a2c:	42 9f       	mul	r20, r18
 a2e:	c0 01       	movw	r24, r0
 a30:	43 9f       	mul	r20, r19
 a32:	90 0d       	add	r25, r0
 a34:	52 9f       	mul	r21, r18
 a36:	90 0d       	add	r25, r0
 a38:	11 24       	eor	r1, r1
 a3a:	8c 57       	subi	r24, 0x7C	; 124
 a3c:	9f 4f       	sbci	r25, 0xFF	; 255
 a3e:	80 50       	subi	r24, 0x00	; 0
 a40:	90 4c       	sbci	r25, 0xC0	; 192
 a42:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <CheckChecksum>
 a46:	88 23       	and	r24, r24
 a48:	59 f1       	breq	.+86     	; 0xaa0 <CollectorRxDispatch+0x1f6>
				RetransmitToEthernet(
					i, 
					CollectorData[i].fwdBuff, 
					CollectorData[i].fwdLen);
 a4a:	89 81       	ldd	r24, Y+1	; 0x01
 a4c:	48 2f       	mov	r20, r24
 a4e:	50 e0       	ldi	r21, 0x00	; 0
 a50:	2e e8       	ldi	r18, 0x8E	; 142
 a52:	31 e0       	ldi	r19, 0x01	; 1
 a54:	42 9f       	mul	r20, r18
 a56:	c0 01       	movw	r24, r0
 a58:	43 9f       	mul	r20, r19
 a5a:	90 0d       	add	r25, r0
 a5c:	52 9f       	mul	r21, r18
 a5e:	90 0d       	add	r25, r0
 a60:	11 24       	eor	r1, r1
 a62:	88 5f       	subi	r24, 0xF8	; 248
 a64:	9e 4b       	sbci	r25, 0xBE	; 190
 a66:	fc 01       	movw	r30, r24
 a68:	80 81       	ld	r24, Z
 a6a:	91 81       	ldd	r25, Z+1	; 0x01
				CollectorData[i].fwdLen);
			CollectorData[i].rxLen = 0;
			CollectorData[i].rxPtr = 0;
			CollectorData[i].isRxC = false;
			if (CheckChecksum(CollectorData[i].fwdBuff, CollectorData[i].fwdLen)) {
				RetransmitToEthernet(
 a6c:	68 2f       	mov	r22, r24
					i, 
					CollectorData[i].fwdBuff, 
 a6e:	89 81       	ldd	r24, Y+1	; 0x01
 a70:	48 2f       	mov	r20, r24
 a72:	50 e0       	ldi	r21, 0x00	; 0
 a74:	2e e8       	ldi	r18, 0x8E	; 142
 a76:	31 e0       	ldi	r19, 0x01	; 1
 a78:	42 9f       	mul	r20, r18
 a7a:	c0 01       	movw	r24, r0
 a7c:	43 9f       	mul	r20, r19
 a7e:	90 0d       	add	r25, r0
 a80:	52 9f       	mul	r21, r18
 a82:	90 0d       	add	r25, r0
 a84:	11 24       	eor	r1, r1
 a86:	8c 57       	subi	r24, 0x7C	; 124
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	80 50       	subi	r24, 0x00	; 0
 a8c:	90 4c       	sbci	r25, 0xC0	; 192
				CollectorData[i].fwdLen);
			CollectorData[i].rxLen = 0;
			CollectorData[i].rxPtr = 0;
			CollectorData[i].isRxC = false;
			if (CheckChecksum(CollectorData[i].fwdBuff, CollectorData[i].fwdLen)) {
				RetransmitToEthernet(
 a8e:	cc 01       	movw	r24, r24
 a90:	a0 e8       	ldi	r26, 0x80	; 128
 a92:	aa 2f       	mov	r26, r26
 a94:	26 2f       	mov	r18, r22
 a96:	ac 01       	movw	r20, r24
 a98:	6a 2f       	mov	r22, r26
 a9a:	89 81       	ldd	r24, Y+1	; 0x01
 a9c:	0e 94 4a 03 	call	0x694	; 0x694 <RetransmitToEthernet>
		}
	}
}

void CollectorRxDispatch() {
	for (uint8_t i = 0; i < COLLECTOR_COUNT; i++)
 aa0:	89 81       	ldd	r24, Y+1	; 0x01
 aa2:	8f 5f       	subi	r24, 0xFF	; 255
 aa4:	89 83       	std	Y+1, r24	; 0x01
 aa6:	89 81       	ldd	r24, Y+1	; 0x01
 aa8:	84 30       	cpi	r24, 0x04	; 4
 aaa:	08 f4       	brcc	.+2      	; 0xaae <CollectorRxDispatch+0x204>
 aac:	08 cf       	rjmp	.-496    	; 0x8be <CollectorRxDispatch+0x14>
					CollectorData[i].fwdBuff, 
					CollectorData[i].fwdLen);
			}
		}
	}
}
 aae:	00 00       	nop
 ab0:	0f 90       	pop	r0
 ab2:	df 91       	pop	r29
 ab4:	cf 91       	pop	r28
 ab6:	0f 91       	pop	r16
 ab8:	ff 90       	pop	r15
 aba:	ef 90       	pop	r14
 abc:	08 95       	ret

Disassembly of section .text.CollectorTxCommSwitch:

00001b4a <CollectorTxCommSwitch>:

void CollectorTxCommSwitch(uint8_t collector_num, bool isTurnOn) {
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <CollectorTxCommSwitch+0x6>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	6a 83       	std	Y+2, r22	; 0x02
	if (isTurnOn == true) goto on;
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	88 23       	and	r24, r24
    1b5c:	31 f4       	brne	.+12     	; 0x1b6a <CollectorTxCommSwitch+0x20>
	if (isTurnOn == false) goto off;
    1b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	89 27       	eor	r24, r25
    1b64:	88 23       	and	r24, r24
    1b66:	69 f5       	brne	.+90     	; 0x1bc2 <CollectorTxCommSwitch+0x78>
    1b68:	01 c0       	rjmp	.+2      	; 0x1b6c <CollectorTxCommSwitch+0x22>
		}
	}
}

void CollectorTxCommSwitch(uint8_t collector_num, bool isTurnOn) {
	if (isTurnOn == true) goto on;
    1b6a:	00 00       	nop
	if (isTurnOn == false) goto off;

on:	
	switch (collector_num) {
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	91 05       	cpc	r25, r1
    1b76:	91 f0       	breq	.+36     	; 0x1b9c <CollectorTxCommSwitch+0x52>
    1b78:	82 30       	cpi	r24, 0x02	; 2
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	1c f4       	brge	.+6      	; 0x1b84 <CollectorTxCommSwitch+0x3a>
    1b7e:	89 2b       	or	r24, r25
    1b80:	39 f0       	breq	.+14     	; 0x1b90 <CollectorTxCommSwitch+0x46>
	break;
	case 3: // RS485D
		USART5_TX_ENABLE();
	break;	
	}
	return;
    1b82:	4b c0       	rjmp	.+150    	; 0x1c1a <CollectorTxCommSwitch+0xd0>
void CollectorTxCommSwitch(uint8_t collector_num, bool isTurnOn) {
	if (isTurnOn == true) goto on;
	if (isTurnOn == false) goto off;

on:	
	switch (collector_num) {
    1b84:	82 30       	cpi	r24, 0x02	; 2
    1b86:	91 05       	cpc	r25, r1
    1b88:	79 f0       	breq	.+30     	; 0x1ba8 <CollectorTxCommSwitch+0x5e>
    1b8a:	03 97       	sbiw	r24, 0x03	; 3
    1b8c:	99 f0       	breq	.+38     	; 0x1bb4 <CollectorTxCommSwitch+0x6a>
	break;
	case 3: // RS485D
		USART5_TX_ENABLE();
	break;	
	}
	return;
    1b8e:	45 c0       	rjmp	.+138    	; 0x1c1a <CollectorTxCommSwitch+0xd0>
	if (isTurnOn == false) goto off;

on:	
	switch (collector_num) {
	case 0: // RS485A
		USART1_TX_ENABLE();
    1b90:	80 e4       	ldi	r24, 0x40	; 64
    1b92:	94 e0       	ldi	r25, 0x04	; 4
    1b94:	24 e0       	ldi	r18, 0x04	; 4
    1b96:	fc 01       	movw	r30, r24
    1b98:	25 83       	std	Z+5, r18	; 0x05
	break;
    1b9a:	12 c0       	rjmp	.+36     	; 0x1bc0 <CollectorTxCommSwitch+0x76>
	case 1: // RS485B
		USART3_TX_ENABLE();
    1b9c:	80 e2       	ldi	r24, 0x20	; 32
    1b9e:	94 e0       	ldi	r25, 0x04	; 4
    1ba0:	24 e0       	ldi	r18, 0x04	; 4
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	25 83       	std	Z+5, r18	; 0x05
	break;
    1ba6:	0c c0       	rjmp	.+24     	; 0x1bc0 <CollectorTxCommSwitch+0x76>
	case 2: // RS485C
		USART4_TX_ENABLE();
    1ba8:	80 e8       	ldi	r24, 0x80	; 128
    1baa:	94 e0       	ldi	r25, 0x04	; 4
    1bac:	24 e0       	ldi	r18, 0x04	; 4
    1bae:	fc 01       	movw	r30, r24
    1bb0:	25 83       	std	Z+5, r18	; 0x05
	break;
    1bb2:	06 c0       	rjmp	.+12     	; 0x1bc0 <CollectorTxCommSwitch+0x76>
	case 3: // RS485D
		USART5_TX_ENABLE();
    1bb4:	80 ec       	ldi	r24, 0xC0	; 192
    1bb6:	94 e0       	ldi	r25, 0x04	; 4
    1bb8:	24 e0       	ldi	r18, 0x04	; 4
    1bba:	fc 01       	movw	r30, r24
    1bbc:	25 83       	std	Z+5, r18	; 0x05
	break;	
    1bbe:	00 00       	nop
	}
	return;
    1bc0:	2c c0       	rjmp	.+88     	; 0x1c1a <CollectorTxCommSwitch+0xd0>
	}
}

void CollectorTxCommSwitch(uint8_t collector_num, bool isTurnOn) {
	if (isTurnOn == true) goto on;
	if (isTurnOn == false) goto off;
    1bc2:	00 00       	nop
	break;	
	}
	return;

off: 
	switch (collector_num) {
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	81 30       	cpi	r24, 0x01	; 1
    1bcc:	91 05       	cpc	r25, r1
    1bce:	91 f0       	breq	.+36     	; 0x1bf4 <CollectorTxCommSwitch+0xaa>
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	1c f4       	brge	.+6      	; 0x1bdc <CollectorTxCommSwitch+0x92>
    1bd6:	89 2b       	or	r24, r25
    1bd8:	39 f0       	breq	.+14     	; 0x1be8 <CollectorTxCommSwitch+0x9e>
	break;
	case 3: // RS485D
		USART5_TX_DISABLE();
	break;
	}
	return;
    1bda:	1f c0       	rjmp	.+62     	; 0x1c1a <CollectorTxCommSwitch+0xd0>
	break;	
	}
	return;

off: 
	switch (collector_num) {
    1bdc:	82 30       	cpi	r24, 0x02	; 2
    1bde:	91 05       	cpc	r25, r1
    1be0:	79 f0       	breq	.+30     	; 0x1c00 <CollectorTxCommSwitch+0xb6>
    1be2:	03 97       	sbiw	r24, 0x03	; 3
    1be4:	99 f0       	breq	.+38     	; 0x1c0c <CollectorTxCommSwitch+0xc2>
	break;
	case 3: // RS485D
		USART5_TX_DISABLE();
	break;
	}
	return;
    1be6:	19 c0       	rjmp	.+50     	; 0x1c1a <CollectorTxCommSwitch+0xd0>
	return;

off: 
	switch (collector_num) {
	case 0: // RS485A
		USART1_TX_DISABLE();
    1be8:	80 e4       	ldi	r24, 0x40	; 64
    1bea:	94 e0       	ldi	r25, 0x04	; 4
    1bec:	24 e0       	ldi	r18, 0x04	; 4
    1bee:	fc 01       	movw	r30, r24
    1bf0:	26 83       	std	Z+6, r18	; 0x06
	break;
    1bf2:	12 c0       	rjmp	.+36     	; 0x1c18 <CollectorTxCommSwitch+0xce>
	case 1: // RS485B
		USART3_TX_DISABLE();
    1bf4:	80 e2       	ldi	r24, 0x20	; 32
    1bf6:	94 e0       	ldi	r25, 0x04	; 4
    1bf8:	24 e0       	ldi	r18, 0x04	; 4
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	26 83       	std	Z+6, r18	; 0x06
	break;
    1bfe:	0c c0       	rjmp	.+24     	; 0x1c18 <CollectorTxCommSwitch+0xce>
	case 2: // RS485C
		USART4_TX_DISABLE();
    1c00:	80 e8       	ldi	r24, 0x80	; 128
    1c02:	94 e0       	ldi	r25, 0x04	; 4
    1c04:	24 e0       	ldi	r18, 0x04	; 4
    1c06:	fc 01       	movw	r30, r24
    1c08:	26 83       	std	Z+6, r18	; 0x06
	break;
    1c0a:	06 c0       	rjmp	.+12     	; 0x1c18 <CollectorTxCommSwitch+0xce>
	case 3: // RS485D
		USART5_TX_DISABLE();
    1c0c:	80 ec       	ldi	r24, 0xC0	; 192
    1c0e:	94 e0       	ldi	r25, 0x04	; 4
    1c10:	24 e0       	ldi	r18, 0x04	; 4
    1c12:	fc 01       	movw	r30, r24
    1c14:	26 83       	std	Z+6, r18	; 0x06
	break;
    1c16:	00 00       	nop
	}
	return;
    1c18:	00 00       	nop
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	08 95       	ret

Disassembly of section .text.CollectorRxCommSwitch:

00001c24 <CollectorRxCommSwitch>:

void CollectorRxCommSwitch(uint8_t collector_num, bool isTurnOn) {
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <CollectorRxCommSwitch+0x6>
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	6a 83       	std	Y+2, r22	; 0x02
	if (isTurnOn == true) goto on;
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	88 23       	and	r24, r24
    1c36:	31 f4       	brne	.+12     	; 0x1c44 <CollectorRxCommSwitch+0x20>
	if (isTurnOn == false) goto off;
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	89 27       	eor	r24, r25
    1c3e:	88 23       	and	r24, r24
    1c40:	69 f5       	brne	.+90     	; 0x1c9c <CollectorRxCommSwitch+0x78>
    1c42:	01 c0       	rjmp	.+2      	; 0x1c46 <CollectorRxCommSwitch+0x22>
	}
	return;
}

void CollectorRxCommSwitch(uint8_t collector_num, bool isTurnOn) {
	if (isTurnOn == true) goto on;
    1c44:	00 00       	nop
	if (isTurnOn == false) goto off;

on:
	switch (collector_num) {
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	88 2f       	mov	r24, r24
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	91 05       	cpc	r25, r1
    1c50:	91 f0       	breq	.+36     	; 0x1c76 <CollectorRxCommSwitch+0x52>
    1c52:	82 30       	cpi	r24, 0x02	; 2
    1c54:	91 05       	cpc	r25, r1
    1c56:	1c f4       	brge	.+6      	; 0x1c5e <CollectorRxCommSwitch+0x3a>
    1c58:	89 2b       	or	r24, r25
    1c5a:	39 f0       	breq	.+14     	; 0x1c6a <CollectorRxCommSwitch+0x46>
	break;
	case 3: // RS485D
		USART5_RX_ENABLE();
	break;
	}
	return;
    1c5c:	4b c0       	rjmp	.+150    	; 0x1cf4 <CollectorRxCommSwitch+0xd0>
void CollectorRxCommSwitch(uint8_t collector_num, bool isTurnOn) {
	if (isTurnOn == true) goto on;
	if (isTurnOn == false) goto off;

on:
	switch (collector_num) {
    1c5e:	82 30       	cpi	r24, 0x02	; 2
    1c60:	91 05       	cpc	r25, r1
    1c62:	79 f0       	breq	.+30     	; 0x1c82 <CollectorRxCommSwitch+0x5e>
    1c64:	03 97       	sbiw	r24, 0x03	; 3
    1c66:	99 f0       	breq	.+38     	; 0x1c8e <CollectorRxCommSwitch+0x6a>
	break;
	case 3: // RS485D
		USART5_RX_ENABLE();
	break;
	}
	return;
    1c68:	45 c0       	rjmp	.+138    	; 0x1cf4 <CollectorRxCommSwitch+0xd0>
	if (isTurnOn == false) goto off;

on:
	switch (collector_num) {
	case 0: // RS485A
		USART1_RX_ENABLE();
    1c6a:	80 e4       	ldi	r24, 0x40	; 64
    1c6c:	94 e0       	ldi	r25, 0x04	; 4
    1c6e:	28 e0       	ldi	r18, 0x08	; 8
    1c70:	fc 01       	movw	r30, r24
    1c72:	26 83       	std	Z+6, r18	; 0x06
	break;
    1c74:	12 c0       	rjmp	.+36     	; 0x1c9a <CollectorRxCommSwitch+0x76>
	case 1: // RS485B
		USART3_RX_ENABLE();
    1c76:	80 e2       	ldi	r24, 0x20	; 32
    1c78:	94 e0       	ldi	r25, 0x04	; 4
    1c7a:	28 e0       	ldi	r18, 0x08	; 8
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	26 83       	std	Z+6, r18	; 0x06
	break;
    1c80:	0c c0       	rjmp	.+24     	; 0x1c9a <CollectorRxCommSwitch+0x76>
	case 2: // RS485C
		USART4_RX_ENABLE();
    1c82:	80 e8       	ldi	r24, 0x80	; 128
    1c84:	94 e0       	ldi	r25, 0x04	; 4
    1c86:	28 e0       	ldi	r18, 0x08	; 8
    1c88:	fc 01       	movw	r30, r24
    1c8a:	26 83       	std	Z+6, r18	; 0x06
	break;
    1c8c:	06 c0       	rjmp	.+12     	; 0x1c9a <CollectorRxCommSwitch+0x76>
	case 3: // RS485D
		USART5_RX_ENABLE();
    1c8e:	80 ec       	ldi	r24, 0xC0	; 192
    1c90:	94 e0       	ldi	r25, 0x04	; 4
    1c92:	28 e0       	ldi	r18, 0x08	; 8
    1c94:	fc 01       	movw	r30, r24
    1c96:	26 83       	std	Z+6, r18	; 0x06
	break;
    1c98:	00 00       	nop
	}
	return;
    1c9a:	2c c0       	rjmp	.+88     	; 0x1cf4 <CollectorRxCommSwitch+0xd0>
	return;
}

void CollectorRxCommSwitch(uint8_t collector_num, bool isTurnOn) {
	if (isTurnOn == true) goto on;
	if (isTurnOn == false) goto off;
    1c9c:	00 00       	nop
	break;
	}
	return;

off:
	switch (collector_num) {
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	91 f0       	breq	.+36     	; 0x1cce <CollectorRxCommSwitch+0xaa>
    1caa:	82 30       	cpi	r24, 0x02	; 2
    1cac:	91 05       	cpc	r25, r1
    1cae:	1c f4       	brge	.+6      	; 0x1cb6 <CollectorRxCommSwitch+0x92>
    1cb0:	89 2b       	or	r24, r25
    1cb2:	39 f0       	breq	.+14     	; 0x1cc2 <CollectorRxCommSwitch+0x9e>
	break;
	case 3: // RS485D
		USART5_RX_DISABLE();
	break;
	}
	return;
    1cb4:	1f c0       	rjmp	.+62     	; 0x1cf4 <CollectorRxCommSwitch+0xd0>
	break;
	}
	return;

off:
	switch (collector_num) {
    1cb6:	82 30       	cpi	r24, 0x02	; 2
    1cb8:	91 05       	cpc	r25, r1
    1cba:	79 f0       	breq	.+30     	; 0x1cda <CollectorRxCommSwitch+0xb6>
    1cbc:	03 97       	sbiw	r24, 0x03	; 3
    1cbe:	99 f0       	breq	.+38     	; 0x1ce6 <CollectorRxCommSwitch+0xc2>
	break;
	case 3: // RS485D
		USART5_RX_DISABLE();
	break;
	}
	return;
    1cc0:	19 c0       	rjmp	.+50     	; 0x1cf4 <CollectorRxCommSwitch+0xd0>
	return;

off:
	switch (collector_num) {
	case 0: // RS485A
		USART1_RX_DISABLE();
    1cc2:	80 e4       	ldi	r24, 0x40	; 64
    1cc4:	94 e0       	ldi	r25, 0x04	; 4
    1cc6:	28 e0       	ldi	r18, 0x08	; 8
    1cc8:	fc 01       	movw	r30, r24
    1cca:	25 83       	std	Z+5, r18	; 0x05
	break;
    1ccc:	12 c0       	rjmp	.+36     	; 0x1cf2 <CollectorRxCommSwitch+0xce>
	case 1: // RS485B
		USART3_RX_DISABLE();
    1cce:	80 e2       	ldi	r24, 0x20	; 32
    1cd0:	94 e0       	ldi	r25, 0x04	; 4
    1cd2:	28 e0       	ldi	r18, 0x08	; 8
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	25 83       	std	Z+5, r18	; 0x05
	break;
    1cd8:	0c c0       	rjmp	.+24     	; 0x1cf2 <CollectorRxCommSwitch+0xce>
	case 2: // RS485C
		USART4_RX_DISABLE();
    1cda:	80 e8       	ldi	r24, 0x80	; 128
    1cdc:	94 e0       	ldi	r25, 0x04	; 4
    1cde:	28 e0       	ldi	r18, 0x08	; 8
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	25 83       	std	Z+5, r18	; 0x05
	break;
    1ce4:	06 c0       	rjmp	.+12     	; 0x1cf2 <CollectorRxCommSwitch+0xce>
	case 3: // RS485D
		USART5_RX_DISABLE();
    1ce6:	80 ec       	ldi	r24, 0xC0	; 192
    1ce8:	94 e0       	ldi	r25, 0x04	; 4
    1cea:	28 e0       	ldi	r18, 0x08	; 8
    1cec:	fc 01       	movw	r30, r24
    1cee:	25 83       	std	Z+5, r18	; 0x05
	break;
    1cf0:	00 00       	nop
	}
	return;
    1cf2:	00 00       	nop
}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	08 95       	ret

Disassembly of section .text.Read:

0000114a <Read>:

void Read(uint8_t collector_num) {
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	00 d0       	rcall	.+0      	; 0x1154 <Read+0xa>
    1154:	1f 92       	push	r1
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	8b 83       	std	Y+3, r24	; 0x03
	// if (CollectorData[collector_num].mutex == true) return;
	uint8_t* txBuffer = CollectorData[collector_num].txBuff;
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	48 2f       	mov	r20, r24
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	2e e8       	ldi	r18, 0x8E	; 142
    1164:	31 e0       	ldi	r19, 0x01	; 1
    1166:	42 9f       	mul	r20, r18
    1168:	c0 01       	movw	r24, r0
    116a:	43 9f       	mul	r20, r19
    116c:	90 0d       	add	r25, r0
    116e:	52 9f       	mul	r21, r18
    1170:	90 0d       	add	r25, r0
    1172:	11 24       	eor	r1, r1
    1174:	86 5f       	subi	r24, 0xF6	; 246
    1176:	9e 4f       	sbci	r25, 0xFE	; 254
    1178:	80 50       	subi	r24, 0x00	; 0
    117a:	90 4c       	sbci	r25, 0xC0	; 192
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	9a 83       	std	Y+2, r25	; 0x02
	txBuffer[0] = 0x80 | collector_num;
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	28 2f       	mov	r18, r24
    1184:	20 68       	ori	r18, 0x80	; 128
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	fc 01       	movw	r30, r24
    118c:	20 83       	st	Z, r18
	txBuffer[1] = 0;
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	fc 01       	movw	r30, r24
    1196:	10 82       	st	Z, r1
	txBuffer[2] = 6;
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	02 96       	adiw	r24, 0x02	; 2
    119e:	26 e0       	ldi	r18, 0x06	; 6
    11a0:	fc 01       	movw	r30, r24
    11a2:	20 83       	st	Z, r18
	txBuffer[3] = RuntimeConfig.did;
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	03 96       	adiw	r24, 0x03	; 3
    11aa:	20 91 4d 46 	lds	r18, 0x464D	; 0x80464d <RuntimeConfig+0x11>
    11ae:	fc 01       	movw	r30, r24
    11b0:	20 83       	st	Z, r18
	txBuffer[4] = 'R';
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	9a 81       	ldd	r25, Y+2	; 0x02
    11b6:	04 96       	adiw	r24, 0x04	; 4
    11b8:	22 e5       	ldi	r18, 0x52	; 82
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
	txBuffer[5] = GetChecksum(txBuffer, 5);
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	8c 01       	movw	r16, r24
    11c4:	0b 5f       	subi	r16, 0xFB	; 251
    11c6:	1f 4f       	sbci	r17, 0xFF	; 255
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	65 e0       	ldi	r22, 0x05	; 5
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	0e 94 96 1a 	call	0x352c	; 0x352c <GetChecksum>
    11d4:	f8 01       	movw	r30, r16
    11d6:	80 83       	st	Z, r24
	CollectorData[collector_num].txLen = 6;
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	48 2f       	mov	r20, r24
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	2e e8       	ldi	r18, 0x8E	; 142
    11e0:	31 e0       	ldi	r19, 0x01	; 1
    11e2:	42 9f       	mul	r20, r18
    11e4:	c0 01       	movw	r24, r0
    11e6:	43 9f       	mul	r20, r19
    11e8:	90 0d       	add	r25, r0
    11ea:	52 9f       	mul	r21, r18
    11ec:	90 0d       	add	r25, r0
    11ee:	11 24       	eor	r1, r1
    11f0:	84 57       	subi	r24, 0x74	; 116
    11f2:	9e 4b       	sbci	r25, 0xBE	; 190
    11f4:	26 e0       	ldi	r18, 0x06	; 6
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	fc 01       	movw	r30, r24
    11fa:	20 83       	st	Z, r18
    11fc:	31 83       	std	Z+1, r19	; 0x01
	CollectorData[collector_num].txPtr = 0;
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	48 2f       	mov	r20, r24
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	2e e8       	ldi	r18, 0x8E	; 142
    1206:	31 e0       	ldi	r19, 0x01	; 1
    1208:	42 9f       	mul	r20, r18
    120a:	c0 01       	movw	r24, r0
    120c:	43 9f       	mul	r20, r19
    120e:	90 0d       	add	r25, r0
    1210:	52 9f       	mul	r21, r18
    1212:	90 0d       	add	r25, r0
    1214:	11 24       	eor	r1, r1
    1216:	86 57       	subi	r24, 0x76	; 118
    1218:	9e 4b       	sbci	r25, 0xBE	; 190
    121a:	fc 01       	movw	r30, r24
    121c:	10 82       	st	Z, r1
    121e:	11 82       	std	Z+1, r1	; 0x01
	
	CollectorRxCommSwitch(collector_num, false);
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <CollectorRxCommSwitch>
	CollectorTxCommSwitch(collector_num, true);
    1228:	61 e0       	ldi	r22, 0x01	; 1
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <CollectorTxCommSwitch>
	*(txEnt[collector_num]) = txBuffer[0];
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	80 51       	subi	r24, 0x10	; 16
    123c:	97 4a       	sbci	r25, 0xA7	; 167
    123e:	fc 01       	movw	r30, r24
    1240:	80 81       	ld	r24, Z
    1242:	91 81       	ldd	r25, Z+1	; 0x01
    1244:	29 81       	ldd	r18, Y+1	; 0x01
    1246:	3a 81       	ldd	r19, Y+2	; 0x02
    1248:	f9 01       	movw	r30, r18
    124a:	20 81       	ld	r18, Z
    124c:	fc 01       	movw	r30, r24
    124e:	20 83       	st	Z, r18
	CollectorData[collector_num].txPtr++;
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	4e e8       	ldi	r20, 0x8E	; 142
    1258:	51 e0       	ldi	r21, 0x01	; 1
    125a:	84 9f       	mul	r24, r20
    125c:	90 01       	movw	r18, r0
    125e:	85 9f       	mul	r24, r21
    1260:	30 0d       	add	r19, r0
    1262:	94 9f       	mul	r25, r20
    1264:	30 0d       	add	r19, r0
    1266:	11 24       	eor	r1, r1
    1268:	26 57       	subi	r18, 0x76	; 118
    126a:	3e 4b       	sbci	r19, 0xBE	; 190
    126c:	f9 01       	movw	r30, r18
    126e:	20 81       	ld	r18, Z
    1270:	31 81       	ldd	r19, Z+1	; 0x01
    1272:	2f 5f       	subi	r18, 0xFF	; 255
    1274:	3f 4f       	sbci	r19, 0xFF	; 255
    1276:	6e e8       	ldi	r22, 0x8E	; 142
    1278:	71 e0       	ldi	r23, 0x01	; 1
    127a:	86 9f       	mul	r24, r22
    127c:	a0 01       	movw	r20, r0
    127e:	87 9f       	mul	r24, r23
    1280:	50 0d       	add	r21, r0
    1282:	96 9f       	mul	r25, r22
    1284:	50 0d       	add	r21, r0
    1286:	11 24       	eor	r1, r1
    1288:	ca 01       	movw	r24, r20
    128a:	86 57       	subi	r24, 0x76	; 118
    128c:	9e 4b       	sbci	r25, 0xBE	; 190
    128e:	fc 01       	movw	r30, r24
    1290:	20 83       	st	Z, r18
    1292:	31 83       	std	Z+1, r19	; 0x01
}
    1294:	00 00       	nop
    1296:	23 96       	adiw	r28, 0x03	; 3
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	08 95       	ret

Disassembly of section .text.CollectorOnReceive:

00000fec <CollectorOnReceive>:

void CollectorOnReceive(uint8_t COLLECTOR_CURSOR) {
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <CollectorOnReceive+0x6>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <CollectorOnReceive+0x8>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	8c 83       	std	Y+4, r24	; 0x04
	CollectorData_t* CurCltData = &(CollectorData[COLLECTOR_CURSOR]);
     ffa:	8c 81       	ldd	r24, Y+4	; 0x04
     ffc:	48 2f       	mov	r20, r24
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	2e e8       	ldi	r18, 0x8E	; 142
    1002:	31 e0       	ldi	r19, 0x01	; 1
    1004:	42 9f       	mul	r20, r18
    1006:	c0 01       	movw	r24, r0
    1008:	43 9f       	mul	r20, r19
    100a:	90 0d       	add	r25, r0
    100c:	52 9f       	mul	r21, r18
    100e:	90 0d       	add	r25, r0
    1010:	11 24       	eor	r1, r1
    1012:	80 50       	subi	r24, 0x00	; 0
    1014:	90 4c       	sbci	r25, 0xC0	; 192
    1016:	8a 83       	std	Y+2, r24	; 0x02
    1018:	9b 83       	std	Y+3, r25	; 0x03
	
	uint8_t rxByte = 0;
    101a:	19 82       	std	Y+1, r1	; 0x01
	rxByte = *(rxEnt[COLLECTOR_CURSOR]);
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	88 50       	subi	r24, 0x08	; 8
    1028:	97 4a       	sbci	r25, 0xA7	; 167
    102a:	fc 01       	movw	r30, r24
    102c:	80 81       	ld	r24, Z
    102e:	91 81       	ldd	r25, Z+1	; 0x01
    1030:	fc 01       	movw	r30, r24
    1032:	80 81       	ld	r24, Z
    1034:	89 83       	std	Y+1, r24	; 0x01
	
	if (CurCltData->isRxC == true) reti(); // if prev pack not buffed
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	9b 81       	ldd	r25, Y+3	; 0x03
    103a:	fc 01       	movw	r30, r24
    103c:	81 81       	ldd	r24, Z+1	; 0x01
    103e:	88 23       	and	r24, r24
    1040:	09 f0       	breq	.+2      	; 0x1044 <CollectorOnReceive+0x58>
    1042:	18 95       	reti
	
	CurCltData->mutex = true;
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	9b 81       	ldd	r25, Y+3	; 0x03
    1048:	21 e0       	ldi	r18, 0x01	; 1
    104a:	fc 01       	movw	r30, r24
    104c:	22 83       	std	Z+2, r18	; 0x02
	if ((rxByte & 0x80) != 0) { // synchronization head
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	88 23       	and	r24, r24
    1052:	54 f4       	brge	.+20     	; 0x1068 <CollectorOnReceive+0x7c>
		rxByte &= 0x7F; // eliminate synchronization head
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	8f 77       	andi	r24, 0x7F	; 127
    1058:	89 83       	std	Y+1, r24	; 0x01
		CurCltData->rxPtr = 0;
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	8c 5f       	subi	r24, 0xFC	; 252
    1060:	9e 4f       	sbci	r25, 0xFE	; 254
    1062:	fc 01       	movw	r30, r24
    1064:	10 82       	st	Z, r1
    1066:	11 82       	std	Z+1, r1	; 0x01
	}	
	CurCltData->rxBuff[CurCltData->rxPtr] = rxByte;
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	9b 81       	ldd	r25, Y+3	; 0x03
    106c:	8c 5f       	subi	r24, 0xFC	; 252
    106e:	9e 4f       	sbci	r25, 0xFE	; 254
    1070:	fc 01       	movw	r30, r24
    1072:	80 81       	ld	r24, Z
    1074:	91 81       	ldd	r25, Z+1	; 0x01
    1076:	2a 81       	ldd	r18, Y+2	; 0x02
    1078:	3b 81       	ldd	r19, Y+3	; 0x03
    107a:	82 0f       	add	r24, r18
    107c:	93 1f       	adc	r25, r19
    107e:	04 96       	adiw	r24, 0x04	; 4
    1080:	29 81       	ldd	r18, Y+1	; 0x01
    1082:	fc 01       	movw	r30, r24
    1084:	20 83       	st	Z, r18
	CurCltData->rxPtr++;
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	9b 81       	ldd	r25, Y+3	; 0x03
    108a:	8c 5f       	subi	r24, 0xFC	; 252
    108c:	9e 4f       	sbci	r25, 0xFE	; 254
    108e:	fc 01       	movw	r30, r24
    1090:	80 81       	ld	r24, Z
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	9c 01       	movw	r18, r24
    1096:	2f 5f       	subi	r18, 0xFF	; 255
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	9b 81       	ldd	r25, Y+3	; 0x03
    109e:	8c 5f       	subi	r24, 0xFC	; 252
    10a0:	9e 4f       	sbci	r25, 0xFE	; 254
    10a2:	fc 01       	movw	r30, r24
    10a4:	20 83       	st	Z, r18
    10a6:	31 83       	std	Z+1, r19	; 0x01
	if (CurCltData->rxPtr == 2) {
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	9b 81       	ldd	r25, Y+3	; 0x03
    10ac:	8c 5f       	subi	r24, 0xFC	; 252
    10ae:	9e 4f       	sbci	r25, 0xFE	; 254
    10b0:	fc 01       	movw	r30, r24
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	02 97       	sbiw	r24, 0x02	; 2
    10b8:	59 f4       	brne	.+22     	; 0x10d0 <CollectorOnReceive+0xe4>
		CurCltData->rxLen = rxByte; // length
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	9b 81       	ldd	r25, Y+3	; 0x03
    10c4:	8a 5f       	subi	r24, 0xFA	; 250
    10c6:	9e 4f       	sbci	r25, 0xFE	; 254
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
    10cc:	31 83       	std	Z+1, r19	; 0x01
	}
	else if (CurCltData->rxLen == CurCltData->rxPtr) {
		CurCltData->isRxC = true;
		CurCltData->mutex = false;
	}
}
    10ce:	36 c0       	rjmp	.+108    	; 0x113c <CollectorOnReceive+0x150>
	CurCltData->rxBuff[CurCltData->rxPtr] = rxByte;
	CurCltData->rxPtr++;
	if (CurCltData->rxPtr == 2) {
		CurCltData->rxLen = rxByte; // length
	}
	else if (CurCltData->rxPtr == 3) {
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	8c 5f       	subi	r24, 0xFC	; 252
    10d6:	9e 4f       	sbci	r25, 0xFE	; 254
    10d8:	fc 01       	movw	r30, r24
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	03 97       	sbiw	r24, 0x03	; 3
    10e0:	99 f4       	brne	.+38     	; 0x1108 <CollectorOnReceive+0x11c>
		CurCltData->rxLen = GetWordFrom14Bits(CurCltData->rxLen, rxByte);
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
    10e6:	8a 5f       	subi	r24, 0xFA	; 250
    10e8:	9e 4f       	sbci	r25, 0xFE	; 254
    10ea:	fc 01       	movw	r30, r24
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	69 81       	ldd	r22, Y+1	; 0x01
    10f2:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <GetWordFrom14Bits>
    10f6:	9c 01       	movw	r18, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	9b 81       	ldd	r25, Y+3	; 0x03
    10fc:	8a 5f       	subi	r24, 0xFA	; 250
    10fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1100:	fc 01       	movw	r30, r24
    1102:	20 83       	st	Z, r18
    1104:	31 83       	std	Z+1, r19	; 0x01
	}
	else if (CurCltData->rxLen == CurCltData->rxPtr) {
		CurCltData->isRxC = true;
		CurCltData->mutex = false;
	}
}
    1106:	1a c0       	rjmp	.+52     	; 0x113c <CollectorOnReceive+0x150>
		CurCltData->rxLen = rxByte; // length
	}
	else if (CurCltData->rxPtr == 3) {
		CurCltData->rxLen = GetWordFrom14Bits(CurCltData->rxLen, rxByte);
	}
	else if (CurCltData->rxLen == CurCltData->rxPtr) {
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	9b 81       	ldd	r25, Y+3	; 0x03
    110c:	8a 5f       	subi	r24, 0xFA	; 250
    110e:	9e 4f       	sbci	r25, 0xFE	; 254
    1110:	fc 01       	movw	r30, r24
    1112:	20 81       	ld	r18, Z
    1114:	31 81       	ldd	r19, Z+1	; 0x01
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	9b 81       	ldd	r25, Y+3	; 0x03
    111a:	8c 5f       	subi	r24, 0xFC	; 252
    111c:	9e 4f       	sbci	r25, 0xFE	; 254
    111e:	fc 01       	movw	r30, r24
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	28 17       	cp	r18, r24
    1126:	39 07       	cpc	r19, r25
    1128:	49 f4       	brne	.+18     	; 0x113c <CollectorOnReceive+0x150>
		CurCltData->isRxC = true;
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	9b 81       	ldd	r25, Y+3	; 0x03
    112e:	21 e0       	ldi	r18, 0x01	; 1
    1130:	fc 01       	movw	r30, r24
    1132:	21 83       	std	Z+1, r18	; 0x01
		CurCltData->mutex = false;
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	9b 81       	ldd	r25, Y+3	; 0x03
    1138:	fc 01       	movw	r30, r24
    113a:	12 82       	std	Z+2, r1	; 0x02
	}
}
    113c:	00 00       	nop
    113e:	24 96       	adiw	r28, 0x04	; 4
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

Disassembly of section .text.CollectorOnTransmit:

000015d6 <CollectorOnTransmit>:

void CollectorOnTransmit(uint8_t COLLECTOR_CURSOR) {
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	00 d0       	rcall	.+0      	; 0x15dc <CollectorOnTransmit+0x6>
    15dc:	1f 92       	push	r1
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	8b 83       	std	Y+3, r24	; 0x03
	CollectorData_t* CurCltData = &(CollectorData[COLLECTOR_CURSOR]);
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	48 2f       	mov	r20, r24
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	2e e8       	ldi	r18, 0x8E	; 142
    15ec:	31 e0       	ldi	r19, 0x01	; 1
    15ee:	42 9f       	mul	r20, r18
    15f0:	c0 01       	movw	r24, r0
    15f2:	43 9f       	mul	r20, r19
    15f4:	90 0d       	add	r25, r0
    15f6:	52 9f       	mul	r21, r18
    15f8:	90 0d       	add	r25, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	80 50       	subi	r24, 0x00	; 0
    15fe:	90 4c       	sbci	r25, 0xC0	; 192
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	9a 83       	std	Y+2, r25	; 0x02
	if (CurCltData->txPtr >= CurCltData->txLen) {
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	9a 81       	ldd	r25, Y+2	; 0x02
    1608:	86 57       	subi	r24, 0x76	; 118
    160a:	9e 4f       	sbci	r25, 0xFE	; 254
    160c:	fc 01       	movw	r30, r24
    160e:	20 81       	ld	r18, Z
    1610:	31 81       	ldd	r19, Z+1	; 0x01
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	84 57       	subi	r24, 0x74	; 116
    1618:	9e 4f       	sbci	r25, 0xFE	; 254
    161a:	fc 01       	movw	r30, r24
    161c:	80 81       	ld	r24, Z
    161e:	91 81       	ldd	r25, Z+1	; 0x01
    1620:	28 17       	cp	r18, r24
    1622:	39 07       	cpc	r19, r25
    1624:	e0 f0       	brcs	.+56     	; 0x165e <CollectorOnTransmit+0x88>
		CurCltData->isTxC = true;
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	9a 81       	ldd	r25, Y+2	; 0x02
    162a:	21 e0       	ldi	r18, 0x01	; 1
    162c:	fc 01       	movw	r30, r24
    162e:	20 83       	st	Z, r18
		CollectorTxCommSwitch(COLLECTOR_CURSOR, false);
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <CollectorTxCommSwitch>
		CollectorRxCommSwitch(COLLECTOR_CURSOR, true);
    1638:	61 e0       	ldi	r22, 0x01	; 1
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <CollectorRxCommSwitch>
		CurCltData->txPtr = 0;
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	86 57       	subi	r24, 0x76	; 118
    1646:	9e 4f       	sbci	r25, 0xFE	; 254
    1648:	fc 01       	movw	r30, r24
    164a:	10 82       	st	Z, r1
    164c:	11 82       	std	Z+1, r1	; 0x01
		CurCltData->txLen = 0;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	84 57       	subi	r24, 0x74	; 116
    1654:	9e 4f       	sbci	r25, 0xFE	; 254
    1656:	fc 01       	movw	r30, r24
    1658:	10 82       	st	Z, r1
    165a:	11 82       	std	Z+1, r1	; 0x01
	}
	else {
		*(txEnt[COLLECTOR_CURSOR]) = CurCltData->txBuff[CurCltData->txPtr];
		CurCltData->txPtr++;
	}
}
    165c:	2c c0       	rjmp	.+88     	; 0x16b6 <CollectorOnTransmit+0xe0>
		CollectorRxCommSwitch(COLLECTOR_CURSOR, true);
		CurCltData->txPtr = 0;
		CurCltData->txLen = 0;
	}
	else {
		*(txEnt[COLLECTOR_CURSOR]) = CurCltData->txBuff[CurCltData->txPtr];
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	80 51       	subi	r24, 0x10	; 16
    166a:	97 4a       	sbci	r25, 0xA7	; 167
    166c:	fc 01       	movw	r30, r24
    166e:	80 81       	ld	r24, Z
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	29 81       	ldd	r18, Y+1	; 0x01
    1674:	3a 81       	ldd	r19, Y+2	; 0x02
    1676:	26 57       	subi	r18, 0x76	; 118
    1678:	3e 4f       	sbci	r19, 0xFE	; 254
    167a:	f9 01       	movw	r30, r18
    167c:	20 81       	ld	r18, Z
    167e:	31 81       	ldd	r19, Z+1	; 0x01
    1680:	49 81       	ldd	r20, Y+1	; 0x01
    1682:	5a 81       	ldd	r21, Y+2	; 0x02
    1684:	24 0f       	add	r18, r20
    1686:	35 1f       	adc	r19, r21
    1688:	26 5f       	subi	r18, 0xF6	; 246
    168a:	3e 4f       	sbci	r19, 0xFE	; 254
    168c:	f9 01       	movw	r30, r18
    168e:	20 81       	ld	r18, Z
    1690:	fc 01       	movw	r30, r24
    1692:	20 83       	st	Z, r18
		CurCltData->txPtr++;
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	86 57       	subi	r24, 0x76	; 118
    169a:	9e 4f       	sbci	r25, 0xFE	; 254
    169c:	fc 01       	movw	r30, r24
    169e:	80 81       	ld	r24, Z
    16a0:	91 81       	ldd	r25, Z+1	; 0x01
    16a2:	9c 01       	movw	r18, r24
    16a4:	2f 5f       	subi	r18, 0xFF	; 255
    16a6:	3f 4f       	sbci	r19, 0xFF	; 255
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	9a 81       	ldd	r25, Y+2	; 0x02
    16ac:	86 57       	subi	r24, 0x76	; 118
    16ae:	9e 4f       	sbci	r25, 0xFE	; 254
    16b0:	fc 01       	movw	r30, r24
    16b2:	20 83       	st	Z, r18
    16b4:	31 83       	std	Z+1, r19	; 0x01
	}
}
    16b6:	00 00       	nop
    16b8:	23 96       	adiw	r28, 0x03	; 3
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	08 95       	ret

Disassembly of section .text.__vector_19:

00003818 <__vector_19>:

ISR(USART0_RXC_vect) {
    3818:	1f 92       	push	r1
    381a:	0f 92       	push	r0
    381c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    3820:	0f 92       	push	r0
    3822:	11 24       	eor	r1, r1
    3824:	cf 93       	push	r28
    3826:	df 93       	push	r29
    3828:	cd b7       	in	r28, 0x3d	; 61
    382a:	de b7       	in	r29, 0x3e	; 62
}
    382c:	00 00       	nop
    382e:	df 91       	pop	r29
    3830:	cf 91       	pop	r28
    3832:	0f 90       	pop	r0
    3834:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    3838:	0f 90       	pop	r0
    383a:	1f 90       	pop	r1
    383c:	18 95       	reti

Disassembly of section .text.__vector_21:

00003584 <__vector_21>:

ISR(USART0_TXC_vect) {
    3584:	1f 92       	push	r1
    3586:	0f 92       	push	r0
    3588:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    358c:	0f 92       	push	r0
    358e:	11 24       	eor	r1, r1
    3590:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    3594:	0f 92       	push	r0
    3596:	2f 93       	push	r18
    3598:	8f 93       	push	r24
    359a:	9f 93       	push	r25
    359c:	ef 93       	push	r30
    359e:	ff 93       	push	r31
    35a0:	cf 93       	push	r28
    35a2:	df 93       	push	r29
    35a4:	cd b7       	in	r28, 0x3d	; 61
    35a6:	de b7       	in	r29, 0x3e	; 62
	USART0.STATUS = USART_TXCIF_bm; 
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	98 e0       	ldi	r25, 0x08	; 8
    35ac:	20 e4       	ldi	r18, 0x40	; 64
    35ae:	fc 01       	movw	r30, r24
    35b0:	24 83       	std	Z+4, r18	; 0x04
}
    35b2:	00 00       	nop
    35b4:	df 91       	pop	r29
    35b6:	cf 91       	pop	r28
    35b8:	ff 91       	pop	r31
    35ba:	ef 91       	pop	r30
    35bc:	9f 91       	pop	r25
    35be:	8f 91       	pop	r24
    35c0:	2f 91       	pop	r18
    35c2:	0f 90       	pop	r0
    35c4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    35c8:	0f 90       	pop	r0
    35ca:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    35ce:	0f 90       	pop	r0
    35d0:	1f 90       	pop	r1
    35d2:	18 95       	reti

Disassembly of section .text.__vector_31:

000031b6 <__vector_31>:

ISR(USART1_RXC_vect) {
    31b6:	1f 92       	push	r1
    31b8:	0f 92       	push	r0
    31ba:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    31be:	0f 92       	push	r0
    31c0:	11 24       	eor	r1, r1
    31c2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    31c6:	0f 92       	push	r0
    31c8:	2f 93       	push	r18
    31ca:	3f 93       	push	r19
    31cc:	4f 93       	push	r20
    31ce:	5f 93       	push	r21
    31d0:	6f 93       	push	r22
    31d2:	7f 93       	push	r23
    31d4:	8f 93       	push	r24
    31d6:	9f 93       	push	r25
    31d8:	af 93       	push	r26
    31da:	bf 93       	push	r27
    31dc:	ef 93       	push	r30
    31de:	ff 93       	push	r31
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
    31e4:	1f 92       	push	r1
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
	const uint8_t COLLECTOR_CURSOR = 0;
    31ea:	19 82       	std	Y+1, r1	; 0x01
	CollectorOnReceive(COLLECTOR_CURSOR);
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	0e 94 f6 07 	call	0xfec	; 0xfec <CollectorOnReceive>
}
    31f2:	00 00       	nop
    31f4:	0f 90       	pop	r0
    31f6:	df 91       	pop	r29
    31f8:	cf 91       	pop	r28
    31fa:	ff 91       	pop	r31
    31fc:	ef 91       	pop	r30
    31fe:	bf 91       	pop	r27
    3200:	af 91       	pop	r26
    3202:	9f 91       	pop	r25
    3204:	8f 91       	pop	r24
    3206:	7f 91       	pop	r23
    3208:	6f 91       	pop	r22
    320a:	5f 91       	pop	r21
    320c:	4f 91       	pop	r20
    320e:	3f 91       	pop	r19
    3210:	2f 91       	pop	r18
    3212:	0f 90       	pop	r0
    3214:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    3218:	0f 90       	pop	r0
    321a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    321e:	0f 90       	pop	r0
    3220:	1f 90       	pop	r1
    3222:	18 95       	reti

Disassembly of section .text.__vector_33:

00002e22 <__vector_33>:

ISR(USART1_TXC_vect) {
    2e22:	1f 92       	push	r1
    2e24:	0f 92       	push	r0
    2e26:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2e2a:	0f 92       	push	r0
    2e2c:	11 24       	eor	r1, r1
    2e2e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2e32:	0f 92       	push	r0
    2e34:	2f 93       	push	r18
    2e36:	3f 93       	push	r19
    2e38:	4f 93       	push	r20
    2e3a:	5f 93       	push	r21
    2e3c:	6f 93       	push	r22
    2e3e:	7f 93       	push	r23
    2e40:	8f 93       	push	r24
    2e42:	9f 93       	push	r25
    2e44:	af 93       	push	r26
    2e46:	bf 93       	push	r27
    2e48:	ef 93       	push	r30
    2e4a:	ff 93       	push	r31
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29
    2e50:	1f 92       	push	r1
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
	const uint8_t COLLECTOR_CURSOR = 0;
    2e56:	19 82       	std	Y+1, r1	; 0x01
	CollectorOnTransmit(COLLECTOR_CURSOR);
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <CollectorOnTransmit>
	USART1.STATUS = USART_TXCIF_bm; // clear txc flag
    2e5e:	80 e2       	ldi	r24, 0x20	; 32
    2e60:	98 e0       	ldi	r25, 0x08	; 8
    2e62:	20 e4       	ldi	r18, 0x40	; 64
    2e64:	fc 01       	movw	r30, r24
    2e66:	24 83       	std	Z+4, r18	; 0x04
}
    2e68:	00 00       	nop
    2e6a:	0f 90       	pop	r0
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	ff 91       	pop	r31
    2e72:	ef 91       	pop	r30
    2e74:	bf 91       	pop	r27
    2e76:	af 91       	pop	r26
    2e78:	9f 91       	pop	r25
    2e7a:	8f 91       	pop	r24
    2e7c:	7f 91       	pop	r23
    2e7e:	6f 91       	pop	r22
    2e80:	5f 91       	pop	r21
    2e82:	4f 91       	pop	r20
    2e84:	3f 91       	pop	r19
    2e86:	2f 91       	pop	r18
    2e88:	0f 90       	pop	r0
    2e8a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2e8e:	0f 90       	pop	r0
    2e90:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2e94:	0f 90       	pop	r0
    2e96:	1f 90       	pop	r1
    2e98:	18 95       	reti

Disassembly of section .text.__vector_52:

00002ff8 <__vector_52>:

ISR(USART3_RXC_vect) {
    2ff8:	1f 92       	push	r1
    2ffa:	0f 92       	push	r0
    2ffc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    3000:	0f 92       	push	r0
    3002:	11 24       	eor	r1, r1
    3004:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    3008:	0f 92       	push	r0
    300a:	2f 93       	push	r18
    300c:	3f 93       	push	r19
    300e:	4f 93       	push	r20
    3010:	5f 93       	push	r21
    3012:	6f 93       	push	r22
    3014:	7f 93       	push	r23
    3016:	8f 93       	push	r24
    3018:	9f 93       	push	r25
    301a:	af 93       	push	r26
    301c:	bf 93       	push	r27
    301e:	ef 93       	push	r30
    3020:	ff 93       	push	r31
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	1f 92       	push	r1
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
	const uint8_t COLLECTOR_CURSOR = 1;
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	89 83       	std	Y+1, r24	; 0x01
	CollectorOnReceive(COLLECTOR_CURSOR);
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	0e 94 f6 07 	call	0xfec	; 0xfec <CollectorOnReceive>
}
    3036:	00 00       	nop
    3038:	0f 90       	pop	r0
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	ff 91       	pop	r31
    3040:	ef 91       	pop	r30
    3042:	bf 91       	pop	r27
    3044:	af 91       	pop	r26
    3046:	9f 91       	pop	r25
    3048:	8f 91       	pop	r24
    304a:	7f 91       	pop	r23
    304c:	6f 91       	pop	r22
    304e:	5f 91       	pop	r21
    3050:	4f 91       	pop	r20
    3052:	3f 91       	pop	r19
    3054:	2f 91       	pop	r18
    3056:	0f 90       	pop	r0
    3058:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    305c:	0f 90       	pop	r0
    305e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    3062:	0f 90       	pop	r0
    3064:	1f 90       	pop	r1
    3066:	18 95       	reti

Disassembly of section .text.__vector_54:

00002cb4 <__vector_54>:

ISR(USART3_TXC_vect) {
    2cb4:	1f 92       	push	r1
    2cb6:	0f 92       	push	r0
    2cb8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2cbc:	0f 92       	push	r0
    2cbe:	11 24       	eor	r1, r1
    2cc0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2cc4:	0f 92       	push	r0
    2cc6:	2f 93       	push	r18
    2cc8:	3f 93       	push	r19
    2cca:	4f 93       	push	r20
    2ccc:	5f 93       	push	r21
    2cce:	6f 93       	push	r22
    2cd0:	7f 93       	push	r23
    2cd2:	8f 93       	push	r24
    2cd4:	9f 93       	push	r25
    2cd6:	af 93       	push	r26
    2cd8:	bf 93       	push	r27
    2cda:	ef 93       	push	r30
    2cdc:	ff 93       	push	r31
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	1f 92       	push	r1
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
	const uint8_t COLLECTOR_CURSOR = 1;
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	89 83       	std	Y+1, r24	; 0x01
	CollectorOnTransmit(COLLECTOR_CURSOR);
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <CollectorOnTransmit>
	USART3.STATUS = USART_TXCIF_bm; // clear txc flag
    2cf2:	80 e6       	ldi	r24, 0x60	; 96
    2cf4:	98 e0       	ldi	r25, 0x08	; 8
    2cf6:	20 e4       	ldi	r18, 0x40	; 64
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	24 83       	std	Z+4, r18	; 0x04
}
    2cfc:	00 00       	nop
    2cfe:	0f 90       	pop	r0
    2d00:	df 91       	pop	r29
    2d02:	cf 91       	pop	r28
    2d04:	ff 91       	pop	r31
    2d06:	ef 91       	pop	r30
    2d08:	bf 91       	pop	r27
    2d0a:	af 91       	pop	r26
    2d0c:	9f 91       	pop	r25
    2d0e:	8f 91       	pop	r24
    2d10:	7f 91       	pop	r23
    2d12:	6f 91       	pop	r22
    2d14:	5f 91       	pop	r21
    2d16:	4f 91       	pop	r20
    2d18:	3f 91       	pop	r19
    2d1a:	2f 91       	pop	r18
    2d1c:	0f 90       	pop	r0
    2d1e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2d22:	0f 90       	pop	r0
    2d24:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2d28:	0f 90       	pop	r0
    2d2a:	1f 90       	pop	r1
    2d2c:	18 95       	reti

Disassembly of section .text.__vector_55:

00003068 <__vector_55>:

ISR(USART4_RXC_vect) {
    3068:	1f 92       	push	r1
    306a:	0f 92       	push	r0
    306c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    3070:	0f 92       	push	r0
    3072:	11 24       	eor	r1, r1
    3074:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    3078:	0f 92       	push	r0
    307a:	2f 93       	push	r18
    307c:	3f 93       	push	r19
    307e:	4f 93       	push	r20
    3080:	5f 93       	push	r21
    3082:	6f 93       	push	r22
    3084:	7f 93       	push	r23
    3086:	8f 93       	push	r24
    3088:	9f 93       	push	r25
    308a:	af 93       	push	r26
    308c:	bf 93       	push	r27
    308e:	ef 93       	push	r30
    3090:	ff 93       	push	r31
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	1f 92       	push	r1
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
	const uint8_t COLLECTOR_CURSOR = 2;
    309c:	82 e0       	ldi	r24, 0x02	; 2
    309e:	89 83       	std	Y+1, r24	; 0x01
	CollectorOnReceive(COLLECTOR_CURSOR);
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	0e 94 f6 07 	call	0xfec	; 0xfec <CollectorOnReceive>
}
    30a6:	00 00       	nop
    30a8:	0f 90       	pop	r0
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	ff 91       	pop	r31
    30b0:	ef 91       	pop	r30
    30b2:	bf 91       	pop	r27
    30b4:	af 91       	pop	r26
    30b6:	9f 91       	pop	r25
    30b8:	8f 91       	pop	r24
    30ba:	7f 91       	pop	r23
    30bc:	6f 91       	pop	r22
    30be:	5f 91       	pop	r21
    30c0:	4f 91       	pop	r20
    30c2:	3f 91       	pop	r19
    30c4:	2f 91       	pop	r18
    30c6:	0f 90       	pop	r0
    30c8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    30cc:	0f 90       	pop	r0
    30ce:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    30d2:	0f 90       	pop	r0
    30d4:	1f 90       	pop	r1
    30d6:	18 95       	reti

Disassembly of section .text.__vector_57:

00002d2e <__vector_57>:

ISR(USART4_TXC_vect) {
    2d2e:	1f 92       	push	r1
    2d30:	0f 92       	push	r0
    2d32:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2d36:	0f 92       	push	r0
    2d38:	11 24       	eor	r1, r1
    2d3a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2d3e:	0f 92       	push	r0
    2d40:	2f 93       	push	r18
    2d42:	3f 93       	push	r19
    2d44:	4f 93       	push	r20
    2d46:	5f 93       	push	r21
    2d48:	6f 93       	push	r22
    2d4a:	7f 93       	push	r23
    2d4c:	8f 93       	push	r24
    2d4e:	9f 93       	push	r25
    2d50:	af 93       	push	r26
    2d52:	bf 93       	push	r27
    2d54:	ef 93       	push	r30
    2d56:	ff 93       	push	r31
    2d58:	cf 93       	push	r28
    2d5a:	df 93       	push	r29
    2d5c:	1f 92       	push	r1
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
	const uint8_t COLLECTOR_CURSOR = 2;
    2d62:	82 e0       	ldi	r24, 0x02	; 2
    2d64:	89 83       	std	Y+1, r24	; 0x01
	CollectorOnTransmit(COLLECTOR_CURSOR);
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <CollectorOnTransmit>
	USART4.STATUS = USART_TXCIF_bm; // clear txc flag
    2d6c:	80 e8       	ldi	r24, 0x80	; 128
    2d6e:	98 e0       	ldi	r25, 0x08	; 8
    2d70:	20 e4       	ldi	r18, 0x40	; 64
    2d72:	fc 01       	movw	r30, r24
    2d74:	24 83       	std	Z+4, r18	; 0x04
}
    2d76:	00 00       	nop
    2d78:	0f 90       	pop	r0
    2d7a:	df 91       	pop	r29
    2d7c:	cf 91       	pop	r28
    2d7e:	ff 91       	pop	r31
    2d80:	ef 91       	pop	r30
    2d82:	bf 91       	pop	r27
    2d84:	af 91       	pop	r26
    2d86:	9f 91       	pop	r25
    2d88:	8f 91       	pop	r24
    2d8a:	7f 91       	pop	r23
    2d8c:	6f 91       	pop	r22
    2d8e:	5f 91       	pop	r21
    2d90:	4f 91       	pop	r20
    2d92:	3f 91       	pop	r19
    2d94:	2f 91       	pop	r18
    2d96:	0f 90       	pop	r0
    2d98:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2d9c:	0f 90       	pop	r0
    2d9e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2da2:	0f 90       	pop	r0
    2da4:	1f 90       	pop	r1
    2da6:	18 95       	reti

Disassembly of section .text.__vector_61:

000030d8 <__vector_61>:

ISR(USART5_RXC_vect) {
    30d8:	1f 92       	push	r1
    30da:	0f 92       	push	r0
    30dc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    30e0:	0f 92       	push	r0
    30e2:	11 24       	eor	r1, r1
    30e4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    30e8:	0f 92       	push	r0
    30ea:	2f 93       	push	r18
    30ec:	3f 93       	push	r19
    30ee:	4f 93       	push	r20
    30f0:	5f 93       	push	r21
    30f2:	6f 93       	push	r22
    30f4:	7f 93       	push	r23
    30f6:	8f 93       	push	r24
    30f8:	9f 93       	push	r25
    30fa:	af 93       	push	r26
    30fc:	bf 93       	push	r27
    30fe:	ef 93       	push	r30
    3100:	ff 93       	push	r31
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	1f 92       	push	r1
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
	const uint8_t COLLECTOR_CURSOR = 3;
    310c:	83 e0       	ldi	r24, 0x03	; 3
    310e:	89 83       	std	Y+1, r24	; 0x01
	CollectorOnReceive(COLLECTOR_CURSOR);
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	0e 94 f6 07 	call	0xfec	; 0xfec <CollectorOnReceive>
}
    3116:	00 00       	nop
    3118:	0f 90       	pop	r0
    311a:	df 91       	pop	r29
    311c:	cf 91       	pop	r28
    311e:	ff 91       	pop	r31
    3120:	ef 91       	pop	r30
    3122:	bf 91       	pop	r27
    3124:	af 91       	pop	r26
    3126:	9f 91       	pop	r25
    3128:	8f 91       	pop	r24
    312a:	7f 91       	pop	r23
    312c:	6f 91       	pop	r22
    312e:	5f 91       	pop	r21
    3130:	4f 91       	pop	r20
    3132:	3f 91       	pop	r19
    3134:	2f 91       	pop	r18
    3136:	0f 90       	pop	r0
    3138:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    313c:	0f 90       	pop	r0
    313e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    3142:	0f 90       	pop	r0
    3144:	1f 90       	pop	r1
    3146:	18 95       	reti

Disassembly of section .text.__vector_63:

00002da8 <__vector_63>:

ISR(USART5_TXC_vect) {
    2da8:	1f 92       	push	r1
    2daa:	0f 92       	push	r0
    2dac:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2db0:	0f 92       	push	r0
    2db2:	11 24       	eor	r1, r1
    2db4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2db8:	0f 92       	push	r0
    2dba:	2f 93       	push	r18
    2dbc:	3f 93       	push	r19
    2dbe:	4f 93       	push	r20
    2dc0:	5f 93       	push	r21
    2dc2:	6f 93       	push	r22
    2dc4:	7f 93       	push	r23
    2dc6:	8f 93       	push	r24
    2dc8:	9f 93       	push	r25
    2dca:	af 93       	push	r26
    2dcc:	bf 93       	push	r27
    2dce:	ef 93       	push	r30
    2dd0:	ff 93       	push	r31
    2dd2:	cf 93       	push	r28
    2dd4:	df 93       	push	r29
    2dd6:	1f 92       	push	r1
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
	const uint8_t COLLECTOR_CURSOR = 3;
    2ddc:	83 e0       	ldi	r24, 0x03	; 3
    2dde:	89 83       	std	Y+1, r24	; 0x01
	CollectorOnTransmit(COLLECTOR_CURSOR);
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <CollectorOnTransmit>
	USART5.STATUS = USART_TXCIF_bm; // clear txc flag
    2de6:	80 ea       	ldi	r24, 0xA0	; 160
    2de8:	98 e0       	ldi	r25, 0x08	; 8
    2dea:	20 e4       	ldi	r18, 0x40	; 64
    2dec:	fc 01       	movw	r30, r24
    2dee:	24 83       	std	Z+4, r18	; 0x04
    2df0:	00 00       	nop
    2df2:	0f 90       	pop	r0
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	ff 91       	pop	r31
    2dfa:	ef 91       	pop	r30
    2dfc:	bf 91       	pop	r27
    2dfe:	af 91       	pop	r26
    2e00:	9f 91       	pop	r25
    2e02:	8f 91       	pop	r24
    2e04:	7f 91       	pop	r23
    2e06:	6f 91       	pop	r22
    2e08:	5f 91       	pop	r21
    2e0a:	4f 91       	pop	r20
    2e0c:	3f 91       	pop	r19
    2e0e:	2f 91       	pop	r18
    2e10:	0f 90       	pop	r0
    2e12:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    2e16:	0f 90       	pop	r0
    2e18:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    2e1c:	0f 90       	pop	r0
    2e1e:	1f 90       	pop	r1
    2e20:	18 95       	reti

Disassembly of section .text.main:

00002bbc <main>:
};
volatile RuntimeConfig_t RuntimeConfig;
volatile extern CollectorData_t CollectorData[COLLECTOR_COUNT];

int main(void)
{
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
	di();
    2bc4:	f8 94       	cli
	vars_init();
    2bc6:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <vars_init>
    clock_init();
    2bca:	0e 94 1f 1c 	call	0x383e	; 0x383e <clock_init>
	spi_init();
    2bce:	0e 94 38 02 	call	0x470	; 0x470 <spi_init>
	rtc_init();
    2bd2:	0e 94 28 10 	call	0x2050	; 0x2050 <rtc_init>
	pwm_init();
    2bd6:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <pwm_init>
	nic_init();
    2bda:	0e 94 5f 05 	call	0xabe	; 0xabe <nic_init>
	usart_init();
    2bde:	0e 94 48 06 	call	0xc90	; 0xc90 <usart_init>
	ei();
    2be2:	78 94       	sei
	while(1)
    {
        //TODO:: Please write your application code 
		if (RuntimeFlags.isNICInit) {
    2be4:	80 91 38 46 	lds	r24, 0x4638	; 0x804638 <RuntimeFlags>
    2be8:	88 23       	and	r24, r24
    2bea:	21 f0       	breq	.+8      	; 0x2bf4 <main+0x38>
			NICTxDispatch();
    2bec:	0e 94 8d 10 	call	0x211a	; 0x211a <NICTxDispatch>
			NICRxDispatch();
    2bf0:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <NICRxDispatch>
		}
		if (RuntimeFlags.isChkNICStatusReq) {
    2bf4:	80 91 39 46 	lds	r24, 0x4639	; 0x804639 <RuntimeFlags+0x1>
    2bf8:	88 23       	and	r24, r24
    2bfa:	31 f0       	breq	.+12     	; 0x2c08 <main+0x4c>
			NICSchedule();
    2bfc:	0e 94 89 17 	call	0x2f12	; 0x2f12 <NICSchedule>
			CheckNICStatus();
    2c00:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <CheckNICStatus>
			RuntimeFlags.isChkNICStatusReq = false;
    2c04:	10 92 39 46 	sts	0x4639, r1	; 0x804639 <RuntimeFlags+0x1>
		}
		if (NICData.sock_status[1] == NIC_SOCKET_STATUS_ESTABLISHED) {
    2c08:	80 91 69 46 	lds	r24, 0x4669	; 0x804669 <NICData+0x1>
    2c0c:	84 30       	cpi	r24, 0x04	; 4
    2c0e:	79 f4       	brne	.+30     	; 0x2c2e <main+0x72>
			if (NICData.sock_data[1].isRxPtrRdy == false || 
    2c10:	90 91 7a 46 	lds	r25, 0x467A	; 0x80467a <NICData+0x12>
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	89 27       	eor	r24, r25
    2c18:	88 23       	and	r24, r24
    2c1a:	31 f4       	brne	.+12     	; 0x2c28 <main+0x6c>
				NICData.sock_data[1].isTxPtrRdy == false) {
    2c1c:	90 91 7b 46 	lds	r25, 0x467B	; 0x80467b <NICData+0x13>
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	89 27       	eor	r24, r25
			NICSchedule();
			CheckNICStatus();
			RuntimeFlags.isChkNICStatusReq = false;
		}
		if (NICData.sock_status[1] == NIC_SOCKET_STATUS_ESTABLISHED) {
			if (NICData.sock_data[1].isRxPtrRdy == false || 
    2c24:	88 23       	and	r24, r24
    2c26:	19 f0       	breq	.+6      	; 0x2c2e <main+0x72>
				NICData.sock_data[1].isTxPtrRdy == false) {
				ReadSockPtr(1);
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <ReadSockPtr>
			}	
		}
		
		CollectorTxDispatch();
    2c2e:	0e 94 a4 18 	call	0x3148	; 0x3148 <CollectorTxDispatch>
		CollectorRxDispatch();
    2c32:	0e 94 55 04 	call	0x8aa	; 0x8aa <CollectorRxDispatch>
    }
    2c36:	d6 cf       	rjmp	.-84     	; 0x2be4 <main+0x28>

Disassembly of section .text.vars_init:

000038a0 <vars_init>:
}

void vars_init(void) {
    38a0:	cf 93       	push	r28
    38a2:	df 93       	push	r29
    38a4:	cd b7       	in	r28, 0x3d	; 61
    38a6:	de b7       	in	r29, 0x3e	; 62
	NICData.serialCounter = 0;
    38a8:	10 92 c0 46 	sts	0x46C0, r1	; 0x8046c0 <NICData+0x58>
	eepromvars_init();
    38ac:	0e 94 77 13 	call	0x26ee	; 0x26ee <eepromvars_init>
}
    38b0:	00 00       	nop
    38b2:	df 91       	pop	r29
    38b4:	cf 91       	pop	r28
    38b6:	08 95       	ret

Disassembly of section .text.eepromvars_init:

000026ee <eepromvars_init>:

void eepromvars_init(void) {
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <eepromvars_init+0xa>
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
	eeprom_busy_wait();
    26fc:	82 e0       	ldi	r24, 0x02	; 2
    26fe:	90 e1       	ldi	r25, 0x10	; 16
    2700:	fc 01       	movw	r30, r24
    2702:	80 81       	ld	r24, Z
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	82 70       	andi	r24, 0x02	; 2
    270a:	99 27       	eor	r25, r25
    270c:	89 2b       	or	r24, r25
    270e:	b1 f7       	brne	.-20     	; 0x26fc <eepromvars_init+0xe>
	for (uint16_t i = 0; i < sizeof(RuntimeConfig_t); i++)
    2710:	19 82       	std	Y+1, r1	; 0x01
    2712:	1a 82       	std	Y+2, r1	; 0x02
    2714:	1f c0       	rjmp	.+62     	; 0x2754 <eepromvars_init+0x66>
	{
		*((uint8_t *)&RuntimeConfig + i) = eeprom_read_byte((uint8_t *)(i)); // read byte-wise
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	9a 81       	ldd	r25, Y+2	; 0x02
    271a:	8c 01       	movw	r16, r24
    271c:	04 5c       	subi	r16, 0xC4	; 196
    271e:	19 4b       	sbci	r17, 0xB9	; 185
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	cc 01       	movw	r24, r24
    2726:	a0 e8       	ldi	r26, 0x80	; 128
    2728:	aa 2f       	mov	r26, r26
    272a:	bc 01       	movw	r22, r24
    272c:	8a 2f       	mov	r24, r26
    272e:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <eeprom_read_byte>
    2732:	f8 01       	movw	r30, r16
    2734:	80 83       	st	Z, r24
		eeprom_busy_wait();
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	90 e1       	ldi	r25, 0x10	; 16
    273a:	fc 01       	movw	r30, r24
    273c:	80 81       	ld	r24, Z
    273e:	88 2f       	mov	r24, r24
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	82 70       	andi	r24, 0x02	; 2
    2744:	99 27       	eor	r25, r25
    2746:	89 2b       	or	r24, r25
    2748:	b1 f7       	brne	.-20     	; 0x2736 <eepromvars_init+0x48>
	eepromvars_init();
}

void eepromvars_init(void) {
	eeprom_busy_wait();
	for (uint16_t i = 0; i < sizeof(RuntimeConfig_t); i++)
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	01 96       	adiw	r24, 0x01	; 1
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	9a 83       	std	Y+2, r25	; 0x02
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	9a 81       	ldd	r25, Y+2	; 0x02
    2758:	8c 97       	sbiw	r24, 0x2c	; 44
    275a:	e8 f2       	brcs	.-70     	; 0x2716 <eepromvars_init+0x28>
	{
		*((uint8_t *)&RuntimeConfig + i) = eeprom_read_byte((uint8_t *)(i)); // read byte-wise
		eeprom_busy_wait();
	}
	eeprom_busy_wait();
    275c:	82 e0       	ldi	r24, 0x02	; 2
    275e:	90 e1       	ldi	r25, 0x10	; 16
    2760:	fc 01       	movw	r30, r24
    2762:	80 81       	ld	r24, Z
    2764:	88 2f       	mov	r24, r24
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	82 70       	andi	r24, 0x02	; 2
    276a:	99 27       	eor	r25, r25
    276c:	89 2b       	or	r24, r25
    276e:	b1 f7       	brne	.-20     	; 0x275c <eepromvars_init+0x6e>
}
    2770:	00 00       	nop
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	08 95       	ret

Disassembly of section .text.usart_init:

00000c90 <usart_init>:

void usart_init(void) {
 c90:	cf 93       	push	r28
 c92:	df 93       	push	r29
 c94:	cd b7       	in	r28, 0x3d	; 61
 c96:	de b7       	in	r29, 0x3e	; 62
	// USART0
	
	// USART1
	USART1_TX_DISABLE();
 c98:	80 e4       	ldi	r24, 0x40	; 64
 c9a:	94 e0       	ldi	r25, 0x04	; 4
 c9c:	24 e0       	ldi	r18, 0x04	; 4
 c9e:	fc 01       	movw	r30, r24
 ca0:	26 83       	std	Z+6, r18	; 0x06
	USART1_RX_ENABLE();
 ca2:	80 e4       	ldi	r24, 0x40	; 64
 ca4:	94 e0       	ldi	r25, 0x04	; 4
 ca6:	28 e0       	ldi	r18, 0x08	; 8
 ca8:	fc 01       	movw	r30, r24
 caa:	26 83       	std	Z+6, r18	; 0x06
	PORTC.DIRSET = PIN0_bm | PIN2_bm | PIN3_bm; // txd, txen, rxen
 cac:	80 e4       	ldi	r24, 0x40	; 64
 cae:	94 e0       	ldi	r25, 0x04	; 4
 cb0:	2d e0       	ldi	r18, 0x0D	; 13
 cb2:	fc 01       	movw	r30, r24
 cb4:	21 83       	std	Z+1, r18	; 0x01
	PORTC.DIRCLR = PIN1_bm; // rxd
 cb6:	80 e4       	ldi	r24, 0x40	; 64
 cb8:	94 e0       	ldi	r25, 0x04	; 4
 cba:	22 e0       	ldi	r18, 0x02	; 2
 cbc:	fc 01       	movw	r30, r24
 cbe:	22 83       	std	Z+2, r18	; 0x02
	USART1.BAUD = (uint16_t)(USART_BAUD_RATE(19200UL));
 cc0:	80 e2       	ldi	r24, 0x20	; 32
 cc2:	98 e0       	ldi	r25, 0x08	; 8
 cc4:	21 e4       	ldi	r18, 0x41	; 65
 cc6:	33 e0       	ldi	r19, 0x03	; 3
 cc8:	fc 01       	movw	r30, r24
 cca:	20 87       	std	Z+8, r18	; 0x08
 ccc:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc // asynchronous mode
 cce:	80 e2       	ldi	r24, 0x20	; 32
 cd0:	98 e0       	ldi	r25, 0x08	; 8
 cd2:	23 e0       	ldi	r18, 0x03	; 3
 cd4:	fc 01       	movw	r30, r24
 cd6:	27 83       	std	Z+7, r18	; 0x07
				 | USART_CHSIZE_8BIT_gc // 8-bit
				 | USART_PMODE_DISABLED_gc // parity disabled
				 | USART_SBMODE_1BIT_gc; // one stop bit
	USART1.CTRLB |= USART_RXEN_bm; // rxen
 cd8:	80 e2       	ldi	r24, 0x20	; 32
 cda:	98 e0       	ldi	r25, 0x08	; 8
 cdc:	20 e2       	ldi	r18, 0x20	; 32
 cde:	38 e0       	ldi	r19, 0x08	; 8
 ce0:	f9 01       	movw	r30, r18
 ce2:	26 81       	ldd	r18, Z+6	; 0x06
 ce4:	20 68       	ori	r18, 0x80	; 128
 ce6:	fc 01       	movw	r30, r24
 ce8:	26 83       	std	Z+6, r18	; 0x06
	USART1.CTRLB |= USART_TXEN_bm; // txen
 cea:	80 e2       	ldi	r24, 0x20	; 32
 cec:	98 e0       	ldi	r25, 0x08	; 8
 cee:	20 e2       	ldi	r18, 0x20	; 32
 cf0:	38 e0       	ldi	r19, 0x08	; 8
 cf2:	f9 01       	movw	r30, r18
 cf4:	26 81       	ldd	r18, Z+6	; 0x06
 cf6:	20 64       	ori	r18, 0x40	; 64
 cf8:	fc 01       	movw	r30, r24
 cfa:	26 83       	std	Z+6, r18	; 0x06
	USART1.CTRLA = USART_RXCIE_bm
 cfc:	80 e2       	ldi	r24, 0x20	; 32
 cfe:	98 e0       	ldi	r25, 0x08	; 8
 d00:	20 ec       	ldi	r18, 0xC0	; 192
 d02:	fc 01       	movw	r30, r24
 d04:	25 83       	std	Z+5, r18	; 0x05
				 | USART_TXCIE_bm; // enable interrupts
	USART1.DBGCTRL |= USART_DBGRUN_bm; // continue on debug break
 d06:	80 e2       	ldi	r24, 0x20	; 32
 d08:	98 e0       	ldi	r25, 0x08	; 8
 d0a:	20 e2       	ldi	r18, 0x20	; 32
 d0c:	38 e0       	ldi	r19, 0x08	; 8
 d0e:	f9 01       	movw	r30, r18
 d10:	23 85       	ldd	r18, Z+11	; 0x0b
 d12:	21 60       	ori	r18, 0x01	; 1
 d14:	fc 01       	movw	r30, r24
 d16:	23 87       	std	Z+11, r18	; 0x0b
	
	// USART3
	USART3_TX_DISABLE();
 d18:	80 e2       	ldi	r24, 0x20	; 32
 d1a:	94 e0       	ldi	r25, 0x04	; 4
 d1c:	24 e0       	ldi	r18, 0x04	; 4
 d1e:	fc 01       	movw	r30, r24
 d20:	26 83       	std	Z+6, r18	; 0x06
	USART3_RX_ENABLE();
 d22:	80 e2       	ldi	r24, 0x20	; 32
 d24:	94 e0       	ldi	r25, 0x04	; 4
 d26:	28 e0       	ldi	r18, 0x08	; 8
 d28:	fc 01       	movw	r30, r24
 d2a:	26 83       	std	Z+6, r18	; 0x06
	PORTB.DIRSET = PIN0_bm | PIN2_bm | PIN3_bm; // txd, txen, rxen
 d2c:	80 e2       	ldi	r24, 0x20	; 32
 d2e:	94 e0       	ldi	r25, 0x04	; 4
 d30:	2d e0       	ldi	r18, 0x0D	; 13
 d32:	fc 01       	movw	r30, r24
 d34:	21 83       	std	Z+1, r18	; 0x01
	PORTB.DIRCLR = PIN1_bm; // rxd
 d36:	80 e2       	ldi	r24, 0x20	; 32
 d38:	94 e0       	ldi	r25, 0x04	; 4
 d3a:	22 e0       	ldi	r18, 0x02	; 2
 d3c:	fc 01       	movw	r30, r24
 d3e:	22 83       	std	Z+2, r18	; 0x02
	USART3.BAUD = (uint16_t)(USART_BAUD_RATE(19200UL));
 d40:	80 e6       	ldi	r24, 0x60	; 96
 d42:	98 e0       	ldi	r25, 0x08	; 8
 d44:	21 e4       	ldi	r18, 0x41	; 65
 d46:	33 e0       	ldi	r19, 0x03	; 3
 d48:	fc 01       	movw	r30, r24
 d4a:	20 87       	std	Z+8, r18	; 0x08
 d4c:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLC = USART_CMODE_ASYNCHRONOUS_gc // asynchronous mode
 d4e:	80 e6       	ldi	r24, 0x60	; 96
 d50:	98 e0       	ldi	r25, 0x08	; 8
 d52:	23 e0       	ldi	r18, 0x03	; 3
 d54:	fc 01       	movw	r30, r24
 d56:	27 83       	std	Z+7, r18	; 0x07
				 | USART_CHSIZE_8BIT_gc // 8-bit
				 | USART_PMODE_DISABLED_gc // parity disabled
				 | USART_SBMODE_1BIT_gc; // one stop bit
	USART3.CTRLB = USART_TXEN_bm // txen
 d58:	80 e6       	ldi	r24, 0x60	; 96
 d5a:	98 e0       	ldi	r25, 0x08	; 8
 d5c:	20 ec       	ldi	r18, 0xC0	; 192
 d5e:	fc 01       	movw	r30, r24
 d60:	26 83       	std	Z+6, r18	; 0x06
				 | USART_RXEN_bm; // rxen
	USART3.CTRLA = USART_RXCIE_bm
 d62:	80 e6       	ldi	r24, 0x60	; 96
 d64:	98 e0       	ldi	r25, 0x08	; 8
 d66:	20 ec       	ldi	r18, 0xC0	; 192
 d68:	fc 01       	movw	r30, r24
 d6a:	25 83       	std	Z+5, r18	; 0x05
				 | USART_TXCIE_bm; // enable interrupts
	USART3.DBGCTRL |= USART_DBGRUN_bm; // continue on debug break
 d6c:	80 e6       	ldi	r24, 0x60	; 96
 d6e:	98 e0       	ldi	r25, 0x08	; 8
 d70:	20 e6       	ldi	r18, 0x60	; 96
 d72:	38 e0       	ldi	r19, 0x08	; 8
 d74:	f9 01       	movw	r30, r18
 d76:	23 85       	ldd	r18, Z+11	; 0x0b
 d78:	21 60       	ori	r18, 0x01	; 1
 d7a:	fc 01       	movw	r30, r24
 d7c:	23 87       	std	Z+11, r18	; 0x0b
	
	// USART4
	USART4_TX_DISABLE();
 d7e:	80 e8       	ldi	r24, 0x80	; 128
 d80:	94 e0       	ldi	r25, 0x04	; 4
 d82:	24 e0       	ldi	r18, 0x04	; 4
 d84:	fc 01       	movw	r30, r24
 d86:	26 83       	std	Z+6, r18	; 0x06
	USART4_RX_ENABLE();
 d88:	80 e8       	ldi	r24, 0x80	; 128
 d8a:	94 e0       	ldi	r25, 0x04	; 4
 d8c:	28 e0       	ldi	r18, 0x08	; 8
 d8e:	fc 01       	movw	r30, r24
 d90:	26 83       	std	Z+6, r18	; 0x06
	PORTE.DIRSET = PIN0_bm | PIN2_bm | PIN3_bm; // txd, txen, rxen
 d92:	80 e8       	ldi	r24, 0x80	; 128
 d94:	94 e0       	ldi	r25, 0x04	; 4
 d96:	2d e0       	ldi	r18, 0x0D	; 13
 d98:	fc 01       	movw	r30, r24
 d9a:	21 83       	std	Z+1, r18	; 0x01
	PORTE.DIRCLR = PIN1_bm; // rxd
 d9c:	80 e8       	ldi	r24, 0x80	; 128
 d9e:	94 e0       	ldi	r25, 0x04	; 4
 da0:	22 e0       	ldi	r18, 0x02	; 2
 da2:	fc 01       	movw	r30, r24
 da4:	22 83       	std	Z+2, r18	; 0x02
	USART4.BAUD = (uint16_t)(USART_BAUD_RATE(19200UL));
 da6:	80 e8       	ldi	r24, 0x80	; 128
 da8:	98 e0       	ldi	r25, 0x08	; 8
 daa:	21 e4       	ldi	r18, 0x41	; 65
 dac:	33 e0       	ldi	r19, 0x03	; 3
 dae:	fc 01       	movw	r30, r24
 db0:	20 87       	std	Z+8, r18	; 0x08
 db2:	31 87       	std	Z+9, r19	; 0x09
	USART4.CTRLC = USART_CMODE_ASYNCHRONOUS_gc // asynchronous mode
 db4:	80 e8       	ldi	r24, 0x80	; 128
 db6:	98 e0       	ldi	r25, 0x08	; 8
 db8:	23 e0       	ldi	r18, 0x03	; 3
 dba:	fc 01       	movw	r30, r24
 dbc:	27 83       	std	Z+7, r18	; 0x07
				 | USART_CHSIZE_8BIT_gc // 8-bit
				 | USART_PMODE_DISABLED_gc // parity disabled
				 | USART_SBMODE_1BIT_gc; // one stop bit
	USART4.CTRLB = USART_TXEN_bm // txen
 dbe:	80 e8       	ldi	r24, 0x80	; 128
 dc0:	98 e0       	ldi	r25, 0x08	; 8
 dc2:	20 ec       	ldi	r18, 0xC0	; 192
 dc4:	fc 01       	movw	r30, r24
 dc6:	26 83       	std	Z+6, r18	; 0x06
				 | USART_RXEN_bm; // rxen
	USART4.CTRLA = USART_RXCIE_bm
 dc8:	80 e8       	ldi	r24, 0x80	; 128
 dca:	98 e0       	ldi	r25, 0x08	; 8
 dcc:	20 ec       	ldi	r18, 0xC0	; 192
 dce:	fc 01       	movw	r30, r24
 dd0:	25 83       	std	Z+5, r18	; 0x05
				 | USART_TXCIE_bm; // enable interrupts
	USART4.DBGCTRL |= USART_DBGRUN_bm; // continue on debug break
 dd2:	80 e8       	ldi	r24, 0x80	; 128
 dd4:	98 e0       	ldi	r25, 0x08	; 8
 dd6:	20 e8       	ldi	r18, 0x80	; 128
 dd8:	38 e0       	ldi	r19, 0x08	; 8
 dda:	f9 01       	movw	r30, r18
 ddc:	23 85       	ldd	r18, Z+11	; 0x0b
 dde:	21 60       	ori	r18, 0x01	; 1
 de0:	fc 01       	movw	r30, r24
 de2:	23 87       	std	Z+11, r18	; 0x0b
	
	// USART5
	USART5_TX_DISABLE();
 de4:	80 ec       	ldi	r24, 0xC0	; 192
 de6:	94 e0       	ldi	r25, 0x04	; 4
 de8:	24 e0       	ldi	r18, 0x04	; 4
 dea:	fc 01       	movw	r30, r24
 dec:	26 83       	std	Z+6, r18	; 0x06
	USART5_RX_ENABLE();
 dee:	80 ec       	ldi	r24, 0xC0	; 192
 df0:	94 e0       	ldi	r25, 0x04	; 4
 df2:	28 e0       	ldi	r18, 0x08	; 8
 df4:	fc 01       	movw	r30, r24
 df6:	26 83       	std	Z+6, r18	; 0x06
	PORTG.DIRSET = PIN0_bm | PIN2_bm | PIN3_bm; // txd, txen, rxen
 df8:	80 ec       	ldi	r24, 0xC0	; 192
 dfa:	94 e0       	ldi	r25, 0x04	; 4
 dfc:	2d e0       	ldi	r18, 0x0D	; 13
 dfe:	fc 01       	movw	r30, r24
 e00:	21 83       	std	Z+1, r18	; 0x01
	PORTG.DIRCLR = PIN1_bm; // rxd
 e02:	80 ec       	ldi	r24, 0xC0	; 192
 e04:	94 e0       	ldi	r25, 0x04	; 4
 e06:	22 e0       	ldi	r18, 0x02	; 2
 e08:	fc 01       	movw	r30, r24
 e0a:	22 83       	std	Z+2, r18	; 0x02
	USART5.BAUD = (uint16_t)(USART_BAUD_RATE(19200UL));
 e0c:	80 ea       	ldi	r24, 0xA0	; 160
 e0e:	98 e0       	ldi	r25, 0x08	; 8
 e10:	21 e4       	ldi	r18, 0x41	; 65
 e12:	33 e0       	ldi	r19, 0x03	; 3
 e14:	fc 01       	movw	r30, r24
 e16:	20 87       	std	Z+8, r18	; 0x08
 e18:	31 87       	std	Z+9, r19	; 0x09
	USART5.CTRLC = USART_CMODE_ASYNCHRONOUS_gc // asynchronous mode
 e1a:	80 ea       	ldi	r24, 0xA0	; 160
 e1c:	98 e0       	ldi	r25, 0x08	; 8
 e1e:	23 e0       	ldi	r18, 0x03	; 3
 e20:	fc 01       	movw	r30, r24
 e22:	27 83       	std	Z+7, r18	; 0x07
				 | USART_CHSIZE_8BIT_gc // 8-bit
				 | USART_PMODE_DISABLED_gc // parity disabled
				 | USART_SBMODE_1BIT_gc; // one stop bit
	USART5.CTRLB = USART_TXEN_bm // txen
 e24:	80 ea       	ldi	r24, 0xA0	; 160
 e26:	98 e0       	ldi	r25, 0x08	; 8
 e28:	20 ec       	ldi	r18, 0xC0	; 192
 e2a:	fc 01       	movw	r30, r24
 e2c:	26 83       	std	Z+6, r18	; 0x06
				 | USART_RXEN_bm; // rxen
	USART5.CTRLA = USART_RXCIE_bm
 e2e:	80 ea       	ldi	r24, 0xA0	; 160
 e30:	98 e0       	ldi	r25, 0x08	; 8
 e32:	20 ec       	ldi	r18, 0xC0	; 192
 e34:	fc 01       	movw	r30, r24
 e36:	25 83       	std	Z+5, r18	; 0x05
				 | USART_TXCIE_bm; // enable interrupts
	USART5.DBGCTRL |= USART_DBGRUN_bm; // continue on debug break
 e38:	80 ea       	ldi	r24, 0xA0	; 160
 e3a:	98 e0       	ldi	r25, 0x08	; 8
 e3c:	20 ea       	ldi	r18, 0xA0	; 160
 e3e:	38 e0       	ldi	r19, 0x08	; 8
 e40:	f9 01       	movw	r30, r18
 e42:	23 85       	ldd	r18, Z+11	; 0x0b
 e44:	21 60       	ori	r18, 0x01	; 1
 e46:	fc 01       	movw	r30, r24
 e48:	23 87       	std	Z+11, r18	; 0x0b
}
 e4a:	00 00       	nop
 e4c:	df 91       	pop	r29
 e4e:	cf 91       	pop	r28
 e50:	08 95       	ret

Disassembly of section .text.clock_init:

0000383e <clock_init>:

void clock_init(void)
{
    383e:	cf 93       	push	r28
    3840:	df 93       	push	r29
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
	CLKCTRL.MCLKCTRLA = CLKCTRL_CLKOUT_bm
    3846:	80 e6       	ldi	r24, 0x60	; 96
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	20 e8       	ldi	r18, 0x80	; 128
    384c:	fc 01       	movw	r30, r24
    384e:	20 83       	st	Z, r18
					  | CLKCTRL_CLKSEL_OSCHF_gc;
	CLKCTRL.OSCHFCTRLA = CLKCTRL_FREQSEL_24M_gc;
    3850:	80 e6       	ldi	r24, 0x60	; 96
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	24 e2       	ldi	r18, 0x24	; 36
    3856:	fc 01       	movw	r30, r24
    3858:	20 87       	std	Z+8, r18	; 0x08
}
    385a:	00 00       	nop
    385c:	df 91       	pop	r29
    385e:	cf 91       	pop	r28
    3860:	08 95       	ret

Disassembly of section .text.rtc_init:

00002050 <rtc_init>:

void rtc_init(void)
{
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
	// PIT
	while (RTC.STATUS || RTC.PITSTATUS);
    2058:	00 00       	nop
    205a:	80 e4       	ldi	r24, 0x40	; 64
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	fc 01       	movw	r30, r24
    2060:	81 81       	ldd	r24, Z+1	; 0x01
    2062:	88 23       	and	r24, r24
    2064:	d1 f7       	brne	.-12     	; 0x205a <rtc_init+0xa>
    2066:	80 e4       	ldi	r24, 0x40	; 64
    2068:	91 e0       	ldi	r25, 0x01	; 1
    206a:	fc 01       	movw	r30, r24
    206c:	81 89       	ldd	r24, Z+17	; 0x11
    206e:	88 23       	and	r24, r24
    2070:	a1 f7       	brne	.-24     	; 0x205a <rtc_init+0xa>
	RTC.CLKSEL = RTC_CLKSEL_OSC1K_gc; // select 1.024k clock
    2072:	80 e4       	ldi	r24, 0x40	; 64
    2074:	91 e0       	ldi	r25, 0x01	; 1
    2076:	21 e0       	ldi	r18, 0x01	; 1
    2078:	fc 01       	movw	r30, r24
    207a:	27 83       	std	Z+7, r18	; 0x07
	while (RTC.STATUS || RTC.PITSTATUS);
    207c:	00 00       	nop
    207e:	80 e4       	ldi	r24, 0x40	; 64
    2080:	91 e0       	ldi	r25, 0x01	; 1
    2082:	fc 01       	movw	r30, r24
    2084:	81 81       	ldd	r24, Z+1	; 0x01
    2086:	88 23       	and	r24, r24
    2088:	d1 f7       	brne	.-12     	; 0x207e <rtc_init+0x2e>
    208a:	80 e4       	ldi	r24, 0x40	; 64
    208c:	91 e0       	ldi	r25, 0x01	; 1
    208e:	fc 01       	movw	r30, r24
    2090:	81 89       	ldd	r24, Z+17	; 0x11
    2092:	88 23       	and	r24, r24
    2094:	a1 f7       	brne	.-24     	; 0x207e <rtc_init+0x2e>
	RTC.PITINTCTRL = RTC_PI_bm; // enable pit interrupt
    2096:	80 e4       	ldi	r24, 0x40	; 64
    2098:	91 e0       	ldi	r25, 0x01	; 1
    209a:	21 e0       	ldi	r18, 0x01	; 1
    209c:	fc 01       	movw	r30, r24
    209e:	22 8b       	std	Z+18, r18	; 0x12
	while (RTC.STATUS || RTC.PITSTATUS);
    20a0:	00 00       	nop
    20a2:	80 e4       	ldi	r24, 0x40	; 64
    20a4:	91 e0       	ldi	r25, 0x01	; 1
    20a6:	fc 01       	movw	r30, r24
    20a8:	81 81       	ldd	r24, Z+1	; 0x01
    20aa:	88 23       	and	r24, r24
    20ac:	d1 f7       	brne	.-12     	; 0x20a2 <rtc_init+0x52>
    20ae:	80 e4       	ldi	r24, 0x40	; 64
    20b0:	91 e0       	ldi	r25, 0x01	; 1
    20b2:	fc 01       	movw	r30, r24
    20b4:	81 89       	ldd	r24, Z+17	; 0x11
    20b6:	88 23       	and	r24, r24
    20b8:	a1 f7       	brne	.-24     	; 0x20a2 <rtc_init+0x52>
	RTC.PITCTRLA |= RTC_PERIOD_CYC128_gc; // 512 cycles
    20ba:	80 e4       	ldi	r24, 0x40	; 64
    20bc:	91 e0       	ldi	r25, 0x01	; 1
    20be:	20 e4       	ldi	r18, 0x40	; 64
    20c0:	31 e0       	ldi	r19, 0x01	; 1
    20c2:	f9 01       	movw	r30, r18
    20c4:	20 89       	ldd	r18, Z+16	; 0x10
    20c6:	20 63       	ori	r18, 0x30	; 48
    20c8:	fc 01       	movw	r30, r24
    20ca:	20 8b       	std	Z+16, r18	; 0x10
	while (RTC.STATUS || RTC.PITSTATUS);
    20cc:	00 00       	nop
    20ce:	80 e4       	ldi	r24, 0x40	; 64
    20d0:	91 e0       	ldi	r25, 0x01	; 1
    20d2:	fc 01       	movw	r30, r24
    20d4:	81 81       	ldd	r24, Z+1	; 0x01
    20d6:	88 23       	and	r24, r24
    20d8:	d1 f7       	brne	.-12     	; 0x20ce <rtc_init+0x7e>
    20da:	80 e4       	ldi	r24, 0x40	; 64
    20dc:	91 e0       	ldi	r25, 0x01	; 1
    20de:	fc 01       	movw	r30, r24
    20e0:	81 89       	ldd	r24, Z+17	; 0x11
    20e2:	88 23       	and	r24, r24
    20e4:	a1 f7       	brne	.-24     	; 0x20ce <rtc_init+0x7e>
	RTC.PITCTRLA |= RTC_PITEN_bm; // pit enable
    20e6:	80 e4       	ldi	r24, 0x40	; 64
    20e8:	91 e0       	ldi	r25, 0x01	; 1
    20ea:	20 e4       	ldi	r18, 0x40	; 64
    20ec:	31 e0       	ldi	r19, 0x01	; 1
    20ee:	f9 01       	movw	r30, r18
    20f0:	20 89       	ldd	r18, Z+16	; 0x10
    20f2:	21 60       	ori	r18, 0x01	; 1
    20f4:	fc 01       	movw	r30, r24
    20f6:	20 8b       	std	Z+16, r18	; 0x10
	while (RTC.STATUS || RTC.PITSTATUS);
    20f8:	00 00       	nop
    20fa:	80 e4       	ldi	r24, 0x40	; 64
    20fc:	91 e0       	ldi	r25, 0x01	; 1
    20fe:	fc 01       	movw	r30, r24
    2100:	81 81       	ldd	r24, Z+1	; 0x01
    2102:	88 23       	and	r24, r24
    2104:	d1 f7       	brne	.-12     	; 0x20fa <rtc_init+0xaa>
    2106:	80 e4       	ldi	r24, 0x40	; 64
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	fc 01       	movw	r30, r24
    210c:	81 89       	ldd	r24, Z+17	; 0x11
    210e:	88 23       	and	r24, r24
    2110:	a1 f7       	brne	.-24     	; 0x20fa <rtc_init+0xaa>
}
    2112:	00 00       	nop
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	08 95       	ret

Disassembly of section .text.pwm_init:

00002e9a <pwm_init>:

void pwm_init(void) {
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
	PORTD.OUTCLR = PIN0_bm | PIN1_bm;
    2ea2:	80 e6       	ldi	r24, 0x60	; 96
    2ea4:	94 e0       	ldi	r25, 0x04	; 4
    2ea6:	23 e0       	ldi	r18, 0x03	; 3
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	26 83       	std	Z+6, r18	; 0x06
	PORTD.DIRSET = PIN0_bm | PIN1_bm;
    2eac:	80 e6       	ldi	r24, 0x60	; 96
    2eae:	94 e0       	ldi	r25, 0x04	; 4
    2eb0:	23 e0       	ldi	r18, 0x03	; 3
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	21 83       	std	Z+1, r18	; 0x01
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
    2eb6:	80 ee       	ldi	r24, 0xE0	; 224
    2eb8:	95 e0       	ldi	r25, 0x05	; 5
    2eba:	23 e0       	ldi	r18, 0x03	; 3
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	26 83       	std	Z+6, r18	; 0x06
	
	// TCA0
	TCA0.SINGLE.CMP0 = 0;
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	9a e0       	ldi	r25, 0x0A	; 10
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	10 a6       	std	Z+40, r1	; 0x28
    2ec8:	11 a6       	std	Z+41, r1	; 0x29
	TCA0.SINGLE.CMP1 = 0;
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	9a e0       	ldi	r25, 0x0A	; 10
    2ece:	fc 01       	movw	r30, r24
    2ed0:	12 a6       	std	Z+42, r1	; 0x2a
    2ed2:	13 a6       	std	Z+43, r1	; 0x2b
	TCA0.SINGLE.CMP2 = 0;
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	9a e0       	ldi	r25, 0x0A	; 10
    2ed8:	fc 01       	movw	r30, r24
    2eda:	14 a6       	std	Z+44, r1	; 0x2c
    2edc:	15 a6       	std	Z+45, r1	; 0x2d
	TCA0.SINGLE.CTRLB = TCA_SINGLE_CMP0EN_bm 
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	9a e0       	ldi	r25, 0x0A	; 10
    2ee2:	23 e7       	ldi	r18, 0x73	; 115
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	21 83       	std	Z+1, r18	; 0x01
					  | TCA_SINGLE_CMP1EN_bm 
					  | TCA_SINGLE_CMP2EN_bm 
					  | TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
	TCA0.SINGLE.PER = 256;
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	9a e0       	ldi	r25, 0x0A	; 10
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	31 e0       	ldi	r19, 0x01	; 1
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	26 a3       	std	Z+38, r18	; 0x26
    2ef4:	37 a3       	std	Z+39, r19	; 0x27
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc 
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	9a e0       	ldi	r25, 0x0A	; 10
    2efa:	21 e0       	ldi	r18, 0x01	; 1
    2efc:	fc 01       	movw	r30, r24
    2efe:	20 83       	st	Z, r18
					  | TCA_SINGLE_ENABLE_bm;
	TCA0.SINGLE.DBGCTRL = TCA_SINGLE_DBGRUN_bm;
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	9a e0       	ldi	r25, 0x0A	; 10
    2f04:	21 e0       	ldi	r18, 0x01	; 1
    2f06:	fc 01       	movw	r30, r24
    2f08:	26 87       	std	Z+14, r18	; 0x0e
}
    2f0a:	00 00       	nop
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	08 95       	ret

Disassembly of section .text.spi_init:

00000470 <spi_init>:

void spi_init(void) {
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
 478:	2e 97       	sbiw	r28, 0x0e	; 14
 47a:	cd bf       	out	0x3d, r28	; 61
 47c:	de bf       	out	0x3e, r29	; 62
	PORTA.OUTCLR = 0xFF;
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	94 e0       	ldi	r25, 0x04	; 4
 482:	2f ef       	ldi	r18, 0xFF	; 255
 484:	fc 01       	movw	r30, r24
 486:	26 83       	std	Z+6, r18	; 0x06
	PORTA.DIRSET = PIN4_bm; // MOSI output
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	94 e0       	ldi	r25, 0x04	; 4
 48c:	20 e1       	ldi	r18, 0x10	; 16
 48e:	fc 01       	movw	r30, r24
 490:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRCLR = PIN5_bm; // MISO input
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	94 e0       	ldi	r25, 0x04	; 4
 496:	20 e2       	ldi	r18, 0x20	; 32
 498:	fc 01       	movw	r30, r24
 49a:	22 83       	std	Z+2, r18	; 0x02
	PORTA.DIRSET = PIN6_bm; // SCK output
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	94 e0       	ldi	r25, 0x04	; 4
 4a0:	20 e4       	ldi	r18, 0x40	; 64
 4a2:	fc 01       	movw	r30, r24
 4a4:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm; // SCSn output
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	94 e0       	ldi	r25, 0x04	; 4
 4aa:	20 e8       	ldi	r18, 0x80	; 128
 4ac:	fc 01       	movw	r30, r24
 4ae:	21 83       	std	Z+1, r18	; 0x01
	
	PORTG.OUTSET = PIN6_bm;
 4b0:	80 ec       	ldi	r24, 0xC0	; 192
 4b2:	94 e0       	ldi	r25, 0x04	; 4
 4b4:	20 e4       	ldi	r18, 0x40	; 64
 4b6:	fc 01       	movw	r30, r24
 4b8:	25 83       	std	Z+5, r18	; 0x05
	PORTG.DIRSET = PIN6_bm; // NIC ERst
 4ba:	80 ec       	ldi	r24, 0xC0	; 192
 4bc:	94 e0       	ldi	r25, 0x04	; 4
 4be:	20 e4       	ldi	r18, 0x40	; 64
 4c0:	fc 01       	movw	r30, r24
 4c2:	21 83       	std	Z+1, r18	; 0x01
	PORTG.OUTCLR = PIN6_bm; 
 4c4:	80 ec       	ldi	r24, 0xC0	; 192
 4c6:	94 e0       	ldi	r25, 0x04	; 4
 4c8:	20 e4       	ldi	r18, 0x40	; 64
 4ca:	fc 01       	movw	r30, r24
 4cc:	26 83       	std	Z+6, r18	; 0x06
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	a0 e2       	ldi	r26, 0x20	; 32
 4d4:	b1 e4       	ldi	r27, 0x41	; 65
 4d6:	89 83       	std	Y+1, r24	; 0x01
 4d8:	9a 83       	std	Y+2, r25	; 0x02
 4da:	ab 83       	std	Y+3, r26	; 0x03
 4dc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	4a e7       	ldi	r20, 0x7A	; 122
 4e4:	54 e4       	ldi	r21, 0x44	; 68
 4e6:	69 81       	ldd	r22, Y+1	; 0x01
 4e8:	7a 81       	ldd	r23, Y+2	; 0x02
 4ea:	8b 81       	ldd	r24, Y+3	; 0x03
 4ec:	9c 81       	ldd	r25, Y+4	; 0x04
 4ee:	0e 94 ae 1c 	call	0x395c	; 0x395c <__mulsf3>
 4f2:	dc 01       	movw	r26, r24
 4f4:	cb 01       	movw	r24, r22
 4f6:	8d 83       	std	Y+5, r24	; 0x05
 4f8:	9e 83       	std	Y+6, r25	; 0x06
 4fa:	af 83       	std	Y+7, r26	; 0x07
 4fc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	40 e8       	ldi	r20, 0x80	; 128
 504:	5f e3       	ldi	r21, 0x3F	; 63
 506:	6d 81       	ldd	r22, Y+5	; 0x05
 508:	7e 81       	ldd	r23, Y+6	; 0x06
 50a:	8f 81       	ldd	r24, Y+7	; 0x07
 50c:	98 85       	ldd	r25, Y+8	; 0x08
 50e:	0e 94 a4 1c 	call	0x3948	; 0x3948 <__cmpsf2>
 512:	88 23       	and	r24, r24
 514:	2c f4       	brge	.+10     	; 0x520 <spi_init+0xb0>
		__ticks = 1;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	89 87       	std	Y+9, r24	; 0x09
 51c:	9a 87       	std	Y+10, r25	; 0x0a
 51e:	3f c0       	rjmp	.+126    	; 0x59e <spi_init+0x12e>
	else if (__tmp > 65535)
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	3f ef       	ldi	r19, 0xFF	; 255
 524:	4f e7       	ldi	r20, 0x7F	; 127
 526:	57 e4       	ldi	r21, 0x47	; 71
 528:	6d 81       	ldd	r22, Y+5	; 0x05
 52a:	7e 81       	ldd	r23, Y+6	; 0x06
 52c:	8f 81       	ldd	r24, Y+7	; 0x07
 52e:	98 85       	ldd	r25, Y+8	; 0x08
 530:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__gesf2>
 534:	18 16       	cp	r1, r24
 536:	4c f5       	brge	.+82     	; 0x58a <spi_init+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 538:	20 e0       	ldi	r18, 0x00	; 0
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	40 e2       	ldi	r20, 0x20	; 32
 53e:	51 e4       	ldi	r21, 0x41	; 65
 540:	69 81       	ldd	r22, Y+1	; 0x01
 542:	7a 81       	ldd	r23, Y+2	; 0x02
 544:	8b 81       	ldd	r24, Y+3	; 0x03
 546:	9c 81       	ldd	r25, Y+4	; 0x04
 548:	0e 94 ae 1c 	call	0x395c	; 0x395c <__mulsf3>
 54c:	dc 01       	movw	r26, r24
 54e:	cb 01       	movw	r24, r22
 550:	bc 01       	movw	r22, r24
 552:	cd 01       	movw	r24, r26
 554:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__fixunssfsi>
 558:	dc 01       	movw	r26, r24
 55a:	cb 01       	movw	r24, r22
 55c:	89 87       	std	Y+9, r24	; 0x09
 55e:	9a 87       	std	Y+10, r25	; 0x0a
 560:	0f c0       	rjmp	.+30     	; 0x580 <spi_init+0x110>
 562:	84 e6       	ldi	r24, 0x64	; 100
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	8b 87       	std	Y+11, r24	; 0x0b
 568:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 56a:	8b 85       	ldd	r24, Y+11	; 0x0b
 56c:	9c 85       	ldd	r25, Y+12	; 0x0c
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <spi_init+0xfe>
 572:	8b 87       	std	Y+11, r24	; 0x0b
 574:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 576:	89 85       	ldd	r24, Y+9	; 0x09
 578:	9a 85       	ldd	r25, Y+10	; 0x0a
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	89 87       	std	Y+9, r24	; 0x09
 57e:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 580:	89 85       	ldd	r24, Y+9	; 0x09
 582:	9a 85       	ldd	r25, Y+10	; 0x0a
 584:	89 2b       	or	r24, r25
 586:	69 f7       	brne	.-38     	; 0x562 <spi_init+0xf2>
 588:	14 c0       	rjmp	.+40     	; 0x5b2 <spi_init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 58a:	6d 81       	ldd	r22, Y+5	; 0x05
 58c:	7e 81       	ldd	r23, Y+6	; 0x06
 58e:	8f 81       	ldd	r24, Y+7	; 0x07
 590:	98 85       	ldd	r25, Y+8	; 0x08
 592:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__fixunssfsi>
 596:	dc 01       	movw	r26, r24
 598:	cb 01       	movw	r24, r22
 59a:	89 87       	std	Y+9, r24	; 0x09
 59c:	9a 87       	std	Y+10, r25	; 0x0a
 59e:	89 85       	ldd	r24, Y+9	; 0x09
 5a0:	9a 85       	ldd	r25, Y+10	; 0x0a
 5a2:	8d 87       	std	Y+13, r24	; 0x0d
 5a4:	9e 87       	std	Y+14, r25	; 0x0e
 5a6:	8d 85       	ldd	r24, Y+13	; 0x0d
 5a8:	9e 85       	ldd	r25, Y+14	; 0x0e
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <spi_init+0x13a>
 5ae:	8d 87       	std	Y+13, r24	; 0x0d
 5b0:	9e 87       	std	Y+14, r25	; 0x0e
	_delay_ms(10);
	PORTG.OUTSET = PIN6_bm;
 5b2:	80 ec       	ldi	r24, 0xC0	; 192
 5b4:	94 e0       	ldi	r25, 0x04	; 4
 5b6:	20 e4       	ldi	r18, 0x40	; 64
 5b8:	fc 01       	movw	r30, r24
 5ba:	25 83       	std	Z+5, r18	; 0x05
	
	PORTMUX.SPIROUTEA |= PORTMUX_SPI1_NONE_gc;
 5bc:	80 ee       	ldi	r24, 0xE0	; 224
 5be:	95 e0       	ldi	r25, 0x05	; 5
 5c0:	20 ee       	ldi	r18, 0xE0	; 224
 5c2:	35 e0       	ldi	r19, 0x05	; 5
 5c4:	f9 01       	movw	r30, r18
 5c6:	24 81       	ldd	r18, Z+4	; 0x04
 5c8:	2c 60       	ori	r18, 0x0C	; 12
 5ca:	fc 01       	movw	r30, r24
 5cc:	24 83       	std	Z+4, r18	; 0x04
	PORTMUX.SPIROUTEA |= PORTMUX_SPI0_DEFAULT_gc;
 5ce:	80 ee       	ldi	r24, 0xE0	; 224
 5d0:	95 e0       	ldi	r25, 0x05	; 5
 5d2:	20 ee       	ldi	r18, 0xE0	; 224
 5d4:	35 e0       	ldi	r19, 0x05	; 5
 5d6:	f9 01       	movw	r30, r18
 5d8:	24 81       	ldd	r18, Z+4	; 0x04
 5da:	fc 01       	movw	r30, r24
 5dc:	24 83       	std	Z+4, r18	; 0x04
	
	SPI0.CTRLA |= SPI_MASTER_bm; // master mode
 5de:	80 e4       	ldi	r24, 0x40	; 64
 5e0:	99 e0       	ldi	r25, 0x09	; 9
 5e2:	20 e4       	ldi	r18, 0x40	; 64
 5e4:	39 e0       	ldi	r19, 0x09	; 9
 5e6:	f9 01       	movw	r30, r18
 5e8:	20 81       	ld	r18, Z
 5ea:	20 62       	ori	r18, 0x20	; 32
 5ec:	fc 01       	movw	r30, r24
 5ee:	20 83       	st	Z, r18
	SPI0.CTRLA &= ~SPI_CLK2X_bm; // clock not doubled
 5f0:	80 e4       	ldi	r24, 0x40	; 64
 5f2:	99 e0       	ldi	r25, 0x09	; 9
 5f4:	20 e4       	ldi	r18, 0x40	; 64
 5f6:	39 e0       	ldi	r19, 0x09	; 9
 5f8:	f9 01       	movw	r30, r18
 5fa:	20 81       	ld	r18, Z
 5fc:	2f 7e       	andi	r18, 0xEF	; 239
 5fe:	fc 01       	movw	r30, r24
 600:	20 83       	st	Z, r18
	SPI0.CTRLA &= ~SPI_DORD_bm; // transmit MSB first
 602:	80 e4       	ldi	r24, 0x40	; 64
 604:	99 e0       	ldi	r25, 0x09	; 9
 606:	20 e4       	ldi	r18, 0x40	; 64
 608:	39 e0       	ldi	r19, 0x09	; 9
 60a:	f9 01       	movw	r30, r18
 60c:	20 81       	ld	r18, Z
 60e:	2f 7b       	andi	r18, 0xBF	; 191
 610:	fc 01       	movw	r30, r24
 612:	20 83       	st	Z, r18
	SPI0.CTRLB &= ~SPI_BUFEN_bm; // buffer mode disable
 614:	80 e4       	ldi	r24, 0x40	; 64
 616:	99 e0       	ldi	r25, 0x09	; 9
 618:	20 e4       	ldi	r18, 0x40	; 64
 61a:	39 e0       	ldi	r19, 0x09	; 9
 61c:	f9 01       	movw	r30, r18
 61e:	21 81       	ldd	r18, Z+1	; 0x01
 620:	2f 77       	andi	r18, 0x7F	; 127
 622:	fc 01       	movw	r30, r24
 624:	21 83       	std	Z+1, r18	; 0x01
	SPI0.CTRLB &= ~SPI_SSD_bm; // enable slave select
 626:	80 e4       	ldi	r24, 0x40	; 64
 628:	99 e0       	ldi	r25, 0x09	; 9
 62a:	20 e4       	ldi	r18, 0x40	; 64
 62c:	39 e0       	ldi	r19, 0x09	; 9
 62e:	f9 01       	movw	r30, r18
 630:	21 81       	ldd	r18, Z+1	; 0x01
 632:	2b 7f       	andi	r18, 0xFB	; 251
 634:	fc 01       	movw	r30, r24
 636:	21 83       	std	Z+1, r18	; 0x01
	SPI0.CTRLA |= SPI_ENABLE_bm; // spi enable
 638:	80 e4       	ldi	r24, 0x40	; 64
 63a:	99 e0       	ldi	r25, 0x09	; 9
 63c:	20 e4       	ldi	r18, 0x40	; 64
 63e:	39 e0       	ldi	r19, 0x09	; 9
 640:	f9 01       	movw	r30, r18
 642:	20 81       	ld	r18, Z
 644:	21 60       	ori	r18, 0x01	; 1
 646:	fc 01       	movw	r30, r24
 648:	20 83       	st	Z, r18

	SPI0_SLAVE_DESELECT();
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	94 e0       	ldi	r25, 0x04	; 4
 64e:	20 e8       	ldi	r18, 0x80	; 128
 650:	fc 01       	movw	r30, r24
 652:	25 83       	std	Z+5, r18	; 0x05
	
	SPI0.CTRLA &= ~SPI_PRESC_DIV4_gc; // CLK_PER/4
 654:	80 e4       	ldi	r24, 0x40	; 64
 656:	99 e0       	ldi	r25, 0x09	; 9
 658:	20 e4       	ldi	r18, 0x40	; 64
 65a:	39 e0       	ldi	r19, 0x09	; 9
 65c:	f9 01       	movw	r30, r18
 65e:	20 81       	ld	r18, Z
 660:	fc 01       	movw	r30, r24
 662:	20 83       	st	Z, r18
	SPI0.CTRLB |= SPI_MODE_0_gc; // mode 0
 664:	80 e4       	ldi	r24, 0x40	; 64
 666:	99 e0       	ldi	r25, 0x09	; 9
 668:	20 e4       	ldi	r18, 0x40	; 64
 66a:	39 e0       	ldi	r19, 0x09	; 9
 66c:	f9 01       	movw	r30, r18
 66e:	21 81       	ldd	r18, Z+1	; 0x01
 670:	fc 01       	movw	r30, r24
 672:	21 83       	std	Z+1, r18	; 0x01
	
	// SPI0.INTCTRL |= SPI_RXCIE_bm;
	// SPI0.INTCTRL |= SPI_TXCIE_bm;
	SPI0.INTCTRL |= SPI_IE_bm;
 674:	80 e4       	ldi	r24, 0x40	; 64
 676:	99 e0       	ldi	r25, 0x09	; 9
 678:	20 e4       	ldi	r18, 0x40	; 64
 67a:	39 e0       	ldi	r19, 0x09	; 9
 67c:	f9 01       	movw	r30, r18
 67e:	22 81       	ldd	r18, Z+2	; 0x02
 680:	21 60       	ori	r18, 0x01	; 1
 682:	fc 01       	movw	r30, r24
 684:	22 83       	std	Z+2, r18	; 0x02
	
}
 686:	00 00       	nop
 688:	2e 96       	adiw	r28, 0x0e	; 14
 68a:	cd bf       	out	0x3d, r28	; 61
 68c:	de bf       	out	0x3e, r29	; 62
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	08 95       	ret

Disassembly of section .text.__vector_4:

00001cfe <__vector_4>:

ISR(RTC_PIT_vect) {
    1cfe:	1f 92       	push	r1
    1d00:	0f 92       	push	r0
    1d02:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    1d06:	0f 92       	push	r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    1d0e:	0f 92       	push	r0
    1d10:	2f 93       	push	r18
    1d12:	3f 93       	push	r19
    1d14:	4f 93       	push	r20
    1d16:	5f 93       	push	r21
    1d18:	8f 93       	push	r24
    1d1a:	9f 93       	push	r25
    1d1c:	ef 93       	push	r30
    1d1e:	ff 93       	push	r31
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	1f 92       	push	r1
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
	while (RTC.STATUS || RTC.PITSTATUS);
    1d2a:	00 00       	nop
    1d2c:	80 e4       	ldi	r24, 0x40	; 64
    1d2e:	91 e0       	ldi	r25, 0x01	; 1
    1d30:	fc 01       	movw	r30, r24
    1d32:	81 81       	ldd	r24, Z+1	; 0x01
    1d34:	88 23       	and	r24, r24
    1d36:	d1 f7       	brne	.-12     	; 0x1d2c <__vector_4+0x2e>
    1d38:	80 e4       	ldi	r24, 0x40	; 64
    1d3a:	91 e0       	ldi	r25, 0x01	; 1
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	81 89       	ldd	r24, Z+17	; 0x11
    1d40:	88 23       	and	r24, r24
    1d42:	a1 f7       	brne	.-24     	; 0x1d2c <__vector_4+0x2e>
	RTC.PITINTFLAGS |= RTC_PI_bm;
    1d44:	80 e4       	ldi	r24, 0x40	; 64
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	20 e4       	ldi	r18, 0x40	; 64
    1d4a:	31 e0       	ldi	r19, 0x01	; 1
    1d4c:	f9 01       	movw	r30, r18
    1d4e:	23 89       	ldd	r18, Z+19	; 0x13
    1d50:	21 60       	ori	r18, 0x01	; 1
    1d52:	fc 01       	movw	r30, r24
    1d54:	23 8b       	std	Z+19, r18	; 0x13
	while (RTC.STATUS || RTC.PITSTATUS);
    1d56:	00 00       	nop
    1d58:	80 e4       	ldi	r24, 0x40	; 64
    1d5a:	91 e0       	ldi	r25, 0x01	; 1
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	81 81       	ldd	r24, Z+1	; 0x01
    1d60:	88 23       	and	r24, r24
    1d62:	d1 f7       	brne	.-12     	; 0x1d58 <__vector_4+0x5a>
    1d64:	80 e4       	ldi	r24, 0x40	; 64
    1d66:	91 e0       	ldi	r25, 0x01	; 1
    1d68:	fc 01       	movw	r30, r24
    1d6a:	81 89       	ldd	r24, Z+17	; 0x11
    1d6c:	88 23       	and	r24, r24
    1d6e:	a1 f7       	brne	.-24     	; 0x1d58 <__vector_4+0x5a>
	
	RuntimeFlags.isChkNICStatusReq = true;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	80 93 39 46 	sts	0x4639, r24	; 0x804639 <RuntimeFlags+0x1>
	// NICData.sock_data[1].isRxPtrRdy = false;
	NICData.sock_data[1].isTxPtrRdy = false;
    1d76:	10 92 7b 46 	sts	0x467B, r1	; 0x80467b <NICData+0x13>
	
	for (uint8_t i = 0; i < COLLECTOR_COUNT; i++)
    1d7a:	19 82       	std	Y+1, r1	; 0x01
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <__vector_4+0xa8>
	{
		CollectorData[i].isCollectReq = true;
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	48 2f       	mov	r20, r24
    1d82:	50 e0       	ldi	r21, 0x00	; 0
    1d84:	2e e8       	ldi	r18, 0x8E	; 142
    1d86:	31 e0       	ldi	r19, 0x01	; 1
    1d88:	42 9f       	mul	r20, r18
    1d8a:	c0 01       	movw	r24, r0
    1d8c:	43 9f       	mul	r20, r19
    1d8e:	90 0d       	add	r25, r0
    1d90:	52 9f       	mul	r21, r18
    1d92:	90 0d       	add	r25, r0
    1d94:	11 24       	eor	r1, r1
    1d96:	8d 5f       	subi	r24, 0xFD	; 253
    1d98:	9f 4b       	sbci	r25, 0xBF	; 191
    1d9a:	21 e0       	ldi	r18, 0x01	; 1
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	20 83       	st	Z, r18
	
	RuntimeFlags.isChkNICStatusReq = true;
	// NICData.sock_data[1].isRxPtrRdy = false;
	NICData.sock_data[1].isTxPtrRdy = false;
	
	for (uint8_t i = 0; i < COLLECTOR_COUNT; i++)
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	8f 5f       	subi	r24, 0xFF	; 255
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	84 30       	cpi	r24, 0x04	; 4
    1daa:	48 f3       	brcs	.-46     	; 0x1d7e <__vector_4+0x80>
	{
		CollectorData[i].isCollectReq = true;
	}
    1dac:	00 00       	nop
    1dae:	0f 90       	pop	r0
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	ff 91       	pop	r31
    1db6:	ef 91       	pop	r30
    1db8:	9f 91       	pop	r25
    1dba:	8f 91       	pop	r24
    1dbc:	5f 91       	pop	r21
    1dbe:	4f 91       	pop	r20
    1dc0:	3f 91       	pop	r19
    1dc2:	2f 91       	pop	r18
    1dc4:	0f 90       	pop	r0
    1dc6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    1dca:	0f 90       	pop	r0
    1dcc:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    1dd0:	0f 90       	pop	r0
    1dd2:	1f 90       	pop	r1
    1dd4:	18 95       	reti

Disassembly of section .text.nic_var_init:

000037c4 <nic_var_init>:

volatile NICData_t NICData;
volatile extern RuntimeFlags_t RuntimeFlags;
volatile extern RuntimeConfig_t RuntimgConfig;

void nic_var_init(void) {
    37c4:	cf 93       	push	r28
    37c6:	df 93       	push	r29
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
	memset((void *)&NICData, 0, sizeof(NICData_t));
    37cc:	48 e8       	ldi	r20, 0x88	; 136
    37ce:	52 e1       	ldi	r21, 0x12	; 18
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	88 e6       	ldi	r24, 0x68	; 104
    37d6:	96 e4       	ldi	r25, 0x46	; 70
    37d8:	0e 94 90 1c 	call	0x3920	; 0x3920 <memset>
	NICData.isRxC = true;
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	80 93 c1 46 	sts	0x46C1, r24	; 0x8046c1 <NICData+0x59>
	NICData.isTxC = true;
    37e2:	81 e0       	ldi	r24, 0x01	; 1
    37e4:	80 93 46 47 	sts	0x4746, r24	; 0x804746 <NICData+0xde>
}
    37e8:	00 00       	nop
    37ea:	df 91       	pop	r29
    37ec:	cf 91       	pop	r28
    37ee:	08 95       	ret

Disassembly of section .text.nic_sock_init:

0000259e <nic_sock_init>:

void nic_sock_init(void) {
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	c4 51       	subi	r28, 0x14	; 20
    25a8:	d1 40       	sbci	r29, 0x01	; 1
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	de bf       	out	0x3e, r29	; 62
	while (!RuntimeFlags.isNICInit) {} ; // Wait for NIC to initialize
    25ae:	00 00       	nop
    25b0:	90 91 38 46 	lds	r25, 0x4638	; 0x804638 <RuntimeFlags>
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	89 27       	eor	r24, r25
    25b8:	88 23       	and	r24, r24
    25ba:	d1 f7       	brne	.-12     	; 0x25b0 <nic_sock_init+0x12>
	
	const uint8_t socket_num = 1;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	89 83       	std	Y+1, r24	; 0x01
	NIC_PACKET_t packet;
	
	NIC_SOCKET_MR_t socket_mode;
	socket_mode.bits.Protocol = 1; // TCP
    25c0:	ce 01       	movw	r24, r28
    25c2:	85 57       	subi	r24, 0x75	; 117
    25c4:	9f 4f       	sbci	r25, 0xFF	; 255
    25c6:	fc 01       	movw	r30, r24
    25c8:	20 81       	ld	r18, Z
    25ca:	20 7f       	andi	r18, 0xF0	; 240
    25cc:	21 60       	ori	r18, 0x01	; 1
    25ce:	fc 01       	movw	r30, r24
    25d0:	20 83       	st	Z, r18
	packet = RenderUpdateSocketModePacket(socket_num, socket_mode);
    25d2:	9e 01       	movw	r18, r28
    25d4:	24 57       	subi	r18, 0x74	; 116
    25d6:	3f 4f       	sbci	r19, 0xFF	; 255
    25d8:	ce 01       	movw	r24, r28
    25da:	85 57       	subi	r24, 0x75	; 117
    25dc:	9f 4f       	sbci	r25, 0xFF	; 255
    25de:	fc 01       	movw	r30, r24
    25e0:	40 81       	ld	r20, Z
    25e2:	69 81       	ldd	r22, Y+1	; 0x01
    25e4:	c9 01       	movw	r24, r18
    25e6:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <RenderUpdateSocketModePacket>
    25ea:	ce 01       	movw	r24, r28
    25ec:	84 57       	subi	r24, 0x74	; 116
    25ee:	9f 4f       	sbci	r25, 0xFF	; 255
    25f0:	29 e8       	ldi	r18, 0x89	; 137
    25f2:	fc 01       	movw	r30, r24
    25f4:	de 01       	movw	r26, r28
    25f6:	12 96       	adiw	r26, 0x02	; 2
    25f8:	01 90       	ld	r0, Z+
    25fa:	0d 92       	st	X+, r0
    25fc:	2a 95       	dec	r18
    25fe:	e1 f7       	brne	.-8      	; 0x25f8 <nic_sock_init+0x5a>
	InsertTxPacket(&packet);
    2600:	ce 01       	movw	r24, r28
    2602:	02 96       	adiw	r24, 0x02	; 2
    2604:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
	
	packet = RenderSocketCmdPacket(socket_num, NIC_SOCKET_CMD_OPEN);
    2608:	ce 01       	movw	r24, r28
    260a:	84 57       	subi	r24, 0x74	; 116
    260c:	9f 4f       	sbci	r25, 0xFF	; 255
    260e:	41 e0       	ldi	r20, 0x01	; 1
    2610:	69 81       	ldd	r22, Y+1	; 0x01
    2612:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <RenderSocketCmdPacket>
    2616:	ce 01       	movw	r24, r28
    2618:	84 57       	subi	r24, 0x74	; 116
    261a:	9f 4f       	sbci	r25, 0xFF	; 255
    261c:	29 e8       	ldi	r18, 0x89	; 137
    261e:	fc 01       	movw	r30, r24
    2620:	de 01       	movw	r26, r28
    2622:	12 96       	adiw	r26, 0x02	; 2
    2624:	01 90       	ld	r0, Z+
    2626:	0d 92       	st	X+, r0
    2628:	2a 95       	dec	r18
    262a:	e1 f7       	brne	.-8      	; 0x2624 <nic_sock_init+0x86>
	InsertTxPacket(&packet);
    262c:	ce 01       	movw	r24, r28
    262e:	02 96       	adiw	r24, 0x02	; 2
    2630:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
	
	NICData.sock_status[socket_num] = NIC_SOCKET_STATUS_OPENPEND;
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	88 2f       	mov	r24, r24
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	88 59       	subi	r24, 0x98	; 152
    263c:	99 4b       	sbci	r25, 0xB9	; 185
    263e:	21 e0       	ldi	r18, 0x01	; 1
    2640:	fc 01       	movw	r30, r24
    2642:	20 83       	st	Z, r18
}
    2644:	00 00       	nop
    2646:	cc 5e       	subi	r28, 0xEC	; 236
    2648:	de 4f       	sbci	r29, 0xFE	; 254
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	08 95       	ret

Disassembly of section .text.nic_init:

00000abe <nic_init>:

void nic_init(void) {
 abe:	cf 93       	push	r28
 ac0:	df 93       	push	r29
 ac2:	cd b7       	in	r28, 0x3d	; 61
 ac4:	de b7       	in	r29, 0x3e	; 62
 ac6:	c6 53       	subi	r28, 0x36	; 54
 ac8:	d1 40       	sbci	r29, 0x01	; 1
 aca:	cd bf       	out	0x3d, r28	; 61
 acc:	de bf       	out	0x3e, r29	; 62
	// NIC Int init
	PORTG.OUTCLR = PIN7_bm;
 ace:	80 ec       	ldi	r24, 0xC0	; 192
 ad0:	94 e0       	ldi	r25, 0x04	; 4
 ad2:	20 e8       	ldi	r18, 0x80	; 128
 ad4:	fc 01       	movw	r30, r24
 ad6:	26 83       	std	Z+6, r18	; 0x06
	PORTG.DIRSET = PIN7_bm;
 ad8:	80 ec       	ldi	r24, 0xC0	; 192
 ada:	94 e0       	ldi	r25, 0x04	; 4
 adc:	20 e8       	ldi	r18, 0x80	; 128
 ade:	fc 01       	movw	r30, r24
 ae0:	21 83       	std	Z+1, r18	; 0x01
	PORTG.PIN7CTRL |= PORT_ISC_FALLING_gc;
 ae2:	80 ec       	ldi	r24, 0xC0	; 192
 ae4:	94 e0       	ldi	r25, 0x04	; 4
 ae6:	20 ec       	ldi	r18, 0xC0	; 192
 ae8:	34 e0       	ldi	r19, 0x04	; 4
 aea:	f9 01       	movw	r30, r18
 aec:	27 89       	ldd	r18, Z+23	; 0x17
 aee:	23 60       	ori	r18, 0x03	; 3
 af0:	fc 01       	movw	r30, r24
 af2:	27 8b       	std	Z+23, r18	; 0x17
	
	nic_var_init();
 af4:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <nic_var_init>
	
	NIC_SIP_t ipAddr;
	NIC_SMAC_t macAddr;
	NIC_GATEWAY_t gatewayAddr;
	NIC_SUBNETMASK_t subnetMask;
	const uint8_t ip[] = { 192, 168, 3, 127 };
 af8:	80 ec       	ldi	r24, 0xC0	; 192
 afa:	8b 8b       	std	Y+19, r24	; 0x13
 afc:	88 ea       	ldi	r24, 0xA8	; 168
 afe:	8c 8b       	std	Y+20, r24	; 0x14
 b00:	83 e0       	ldi	r24, 0x03	; 3
 b02:	8d 8b       	std	Y+21, r24	; 0x15
 b04:	8f e7       	ldi	r24, 0x7F	; 127
 b06:	8e 8b       	std	Y+22, r24	; 0x16
	const uint8_t mac[] = { 0x00, 0x08, 0xDC, 0x01, 0x02, 0x03 };
 b08:	86 e0       	ldi	r24, 0x06	; 6
 b0a:	e0 e0       	ldi	r30, 0x00	; 0
 b0c:	f9 e5       	ldi	r31, 0x59	; 89
 b0e:	de 01       	movw	r26, r28
 b10:	57 96       	adiw	r26, 0x17	; 23
 b12:	01 90       	ld	r0, Z+
 b14:	0d 92       	st	X+, r0
 b16:	8a 95       	dec	r24
 b18:	e1 f7       	brne	.-8      	; 0xb12 <nic_init+0x54>
	const uint8_t gateway[] = { 192, 168, 3, 100 };
 b1a:	80 ec       	ldi	r24, 0xC0	; 192
 b1c:	8d 8f       	std	Y+29, r24	; 0x1d
 b1e:	88 ea       	ldi	r24, 0xA8	; 168
 b20:	8e 8f       	std	Y+30, r24	; 0x1e
 b22:	83 e0       	ldi	r24, 0x03	; 3
 b24:	8f 8f       	std	Y+31, r24	; 0x1f
 b26:	84 e6       	ldi	r24, 0x64	; 100
 b28:	88 a3       	std	Y+32, r24	; 0x20
	const uint8_t submask[] = { 255, 255, 252, 0 };
 b2a:	8f ef       	ldi	r24, 0xFF	; 255
 b2c:	89 a3       	std	Y+33, r24	; 0x21
 b2e:	8f ef       	ldi	r24, 0xFF	; 255
 b30:	8a a3       	std	Y+34, r24	; 0x22
 b32:	8c ef       	ldi	r24, 0xFC	; 252
 b34:	8b a3       	std	Y+35, r24	; 0x23
 b36:	1c a2       	std	Y+36, r1	; 0x24
		
	memcpy(&(macAddr.bytes), &mac, sizeof(NIC_SMAC_t));
 b38:	ce 01       	movw	r24, r28
 b3a:	47 96       	adiw	r24, 0x17	; 23
 b3c:	cc 01       	movw	r24, r24
 b3e:	a0 e8       	ldi	r26, 0x80	; 128
 b40:	aa 2f       	mov	r26, r26
 b42:	ac 01       	movw	r20, r24
 b44:	6a 2f       	mov	r22, r26
 b46:	ce 01       	movw	r24, r28
 b48:	05 96       	adiw	r24, 0x05	; 5
 b4a:	26 e0       	ldi	r18, 0x06	; 6
 b4c:	30 e0       	ldi	r19, 0x00	; 0
 b4e:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
	memcpy(&(ipAddr.bytes), &ip, sizeof(NIC_SIP_t));
 b52:	ce 01       	movw	r24, r28
 b54:	43 96       	adiw	r24, 0x13	; 19
 b56:	cc 01       	movw	r24, r24
 b58:	a0 e8       	ldi	r26, 0x80	; 128
 b5a:	aa 2f       	mov	r26, r26
 b5c:	24 e0       	ldi	r18, 0x04	; 4
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	ac 01       	movw	r20, r24
 b62:	6a 2f       	mov	r22, r26
 b64:	ce 01       	movw	r24, r28
 b66:	01 96       	adiw	r24, 0x01	; 1
 b68:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
	memcpy(&(gatewayAddr.bytes), &gateway, sizeof(NIC_GATEWAY_t));
 b6c:	ce 01       	movw	r24, r28
 b6e:	4d 96       	adiw	r24, 0x1d	; 29
 b70:	cc 01       	movw	r24, r24
 b72:	a0 e8       	ldi	r26, 0x80	; 128
 b74:	aa 2f       	mov	r26, r26
 b76:	ac 01       	movw	r20, r24
 b78:	6a 2f       	mov	r22, r26
 b7a:	ce 01       	movw	r24, r28
 b7c:	0b 96       	adiw	r24, 0x0b	; 11
 b7e:	24 e0       	ldi	r18, 0x04	; 4
 b80:	30 e0       	ldi	r19, 0x00	; 0
 b82:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
	memcpy(&(subnetMask.bytes), &submask, sizeof(NIC_SUBNETMASK_t));
 b86:	ce 01       	movw	r24, r28
 b88:	81 96       	adiw	r24, 0x21	; 33
 b8a:	cc 01       	movw	r24, r24
 b8c:	a0 e8       	ldi	r26, 0x80	; 128
 b8e:	aa 2f       	mov	r26, r26
 b90:	ac 01       	movw	r20, r24
 b92:	6a 2f       	mov	r22, r26
 b94:	ce 01       	movw	r24, r28
 b96:	0f 96       	adiw	r24, 0x0f	; 15
 b98:	24 e0       	ldi	r18, 0x04	; 4
 b9a:	30 e0       	ldi	r19, 0x00	; 0
 b9c:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
	
	NIC_PACKET_t packet;
	
	// Initialize mac address
	packet = RenderUpdateMACPacket(macAddr);
 ba0:	ce 01       	movw	r24, r28
 ba2:	82 55       	subi	r24, 0x52	; 82
 ba4:	9f 4f       	sbci	r25, 0xFF	; 255
 ba6:	2d 81       	ldd	r18, Y+5	; 0x05
 ba8:	3e 81       	ldd	r19, Y+6	; 0x06
 baa:	4f 81       	ldd	r20, Y+7	; 0x07
 bac:	58 85       	ldd	r21, Y+8	; 0x08
 bae:	69 85       	ldd	r22, Y+9	; 0x09
 bb0:	7a 85       	ldd	r23, Y+10	; 0x0a
 bb2:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <RenderUpdateMACPacket>
 bb6:	ce 01       	movw	r24, r28
 bb8:	82 55       	subi	r24, 0x52	; 82
 bba:	9f 4f       	sbci	r25, 0xFF	; 255
 bbc:	29 e8       	ldi	r18, 0x89	; 137
 bbe:	fc 01       	movw	r30, r24
 bc0:	de 01       	movw	r26, r28
 bc2:	95 96       	adiw	r26, 0x25	; 37
 bc4:	01 90       	ld	r0, Z+
 bc6:	0d 92       	st	X+, r0
 bc8:	2a 95       	dec	r18
 bca:	e1 f7       	brne	.-8      	; 0xbc4 <nic_init+0x106>
	InsertTxPacket(&packet);
 bcc:	ce 01       	movw	r24, r28
 bce:	85 96       	adiw	r24, 0x25	; 37
 bd0:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
	
	// Initialize ip address	
	packet = RenderUpdateIpAddrPacket(ipAddr);
 bd4:	9e 01       	movw	r18, r28
 bd6:	22 55       	subi	r18, 0x52	; 82
 bd8:	3f 4f       	sbci	r19, 0xFF	; 255
 bda:	89 81       	ldd	r24, Y+1	; 0x01
 bdc:	9a 81       	ldd	r25, Y+2	; 0x02
 bde:	ab 81       	ldd	r26, Y+3	; 0x03
 be0:	bc 81       	ldd	r27, Y+4	; 0x04
 be2:	ac 01       	movw	r20, r24
 be4:	bd 01       	movw	r22, r26
 be6:	c9 01       	movw	r24, r18
 be8:	0e 94 ee 10 	call	0x21dc	; 0x21dc <RenderUpdateIpAddrPacket>
 bec:	ce 01       	movw	r24, r28
 bee:	82 55       	subi	r24, 0x52	; 82
 bf0:	9f 4f       	sbci	r25, 0xFF	; 255
 bf2:	29 e8       	ldi	r18, 0x89	; 137
 bf4:	fc 01       	movw	r30, r24
 bf6:	de 01       	movw	r26, r28
 bf8:	95 96       	adiw	r26, 0x25	; 37
 bfa:	01 90       	ld	r0, Z+
 bfc:	0d 92       	st	X+, r0
 bfe:	2a 95       	dec	r18
 c00:	e1 f7       	brne	.-8      	; 0xbfa <nic_init+0x13c>
	InsertTxPacket(&packet);
 c02:	ce 01       	movw	r24, r28
 c04:	85 96       	adiw	r24, 0x25	; 37
 c06:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
	
	// Initialize gateway
	packet = RenderUpdateGatewayPacket(gatewayAddr);
 c0a:	9e 01       	movw	r18, r28
 c0c:	22 55       	subi	r18, 0x52	; 82
 c0e:	3f 4f       	sbci	r19, 0xFF	; 255
 c10:	8b 85       	ldd	r24, Y+11	; 0x0b
 c12:	9c 85       	ldd	r25, Y+12	; 0x0c
 c14:	ad 85       	ldd	r26, Y+13	; 0x0d
 c16:	be 85       	ldd	r27, Y+14	; 0x0e
 c18:	ac 01       	movw	r20, r24
 c1a:	bd 01       	movw	r22, r26
 c1c:	c9 01       	movw	r24, r18
 c1e:	0e 94 4f 11 	call	0x229e	; 0x229e <RenderUpdateGatewayPacket>
 c22:	ce 01       	movw	r24, r28
 c24:	82 55       	subi	r24, 0x52	; 82
 c26:	9f 4f       	sbci	r25, 0xFF	; 255
 c28:	29 e8       	ldi	r18, 0x89	; 137
 c2a:	fc 01       	movw	r30, r24
 c2c:	de 01       	movw	r26, r28
 c2e:	95 96       	adiw	r26, 0x25	; 37
 c30:	01 90       	ld	r0, Z+
 c32:	0d 92       	st	X+, r0
 c34:	2a 95       	dec	r18
 c36:	e1 f7       	brne	.-8      	; 0xc30 <nic_init+0x172>
	InsertTxPacket(&packet);
 c38:	ce 01       	movw	r24, r28
 c3a:	85 96       	adiw	r24, 0x25	; 37
 c3c:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
	
	// Initialize subnet mask
	packet = RenderUpdateSubnetMaskPacket(subnetMask);
 c40:	9e 01       	movw	r18, r28
 c42:	22 55       	subi	r18, 0x52	; 82
 c44:	3f 4f       	sbci	r19, 0xFF	; 255
 c46:	8f 85       	ldd	r24, Y+15	; 0x0f
 c48:	98 89       	ldd	r25, Y+16	; 0x10
 c4a:	a9 89       	ldd	r26, Y+17	; 0x11
 c4c:	ba 89       	ldd	r27, Y+18	; 0x12
 c4e:	ac 01       	movw	r20, r24
 c50:	bd 01       	movw	r22, r26
 c52:	c9 01       	movw	r24, r18
 c54:	0e 94 b0 11 	call	0x2360	; 0x2360 <RenderUpdateSubnetMaskPacket>
 c58:	ce 01       	movw	r24, r28
 c5a:	82 55       	subi	r24, 0x52	; 82
 c5c:	9f 4f       	sbci	r25, 0xFF	; 255
 c5e:	29 e8       	ldi	r18, 0x89	; 137
 c60:	fc 01       	movw	r30, r24
 c62:	de 01       	movw	r26, r28
 c64:	95 96       	adiw	r26, 0x25	; 37
 c66:	01 90       	ld	r0, Z+
 c68:	0d 92       	st	X+, r0
 c6a:	2a 95       	dec	r18
 c6c:	e1 f7       	brne	.-8      	; 0xc66 <nic_init+0x1a8>
	InsertTxPacket(&packet);
 c6e:	ce 01       	movw	r24, r28
 c70:	85 96       	adiw	r24, 0x25	; 37
 c72:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
	
	RuntimeFlags.isNICInit = true;
 c76:	81 e0       	ldi	r24, 0x01	; 1
 c78:	80 93 38 46 	sts	0x4638, r24	; 0x804638 <RuntimeFlags>
	
	nic_sock_init();
 c7c:	0e 94 cf 12 	call	0x259e	; 0x259e <nic_sock_init>
}
 c80:	00 00       	nop
 c82:	ca 5c       	subi	r28, 0xCA	; 202
 c84:	de 4f       	sbci	r29, 0xFE	; 254
 c86:	cd bf       	out	0x3d, r28	; 61
 c88:	de bf       	out	0x3e, r29	; 62
 c8a:	df 91       	pop	r29
 c8c:	cf 91       	pop	r28
 c8e:	08 95       	ret

Disassembly of section .text.Open:

000033b8 <Open>:

void Open(uint8_t sock_num) {
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	cb 58       	subi	r28, 0x8B	; 139
    33c2:	d1 09       	sbc	r29, r1
    33c4:	cd bf       	out	0x3d, r28	; 61
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	9e 01       	movw	r18, r28
    33ca:	25 57       	subi	r18, 0x75	; 117
    33cc:	3f 4f       	sbci	r19, 0xFF	; 255
    33ce:	f9 01       	movw	r30, r18
    33d0:	80 83       	st	Z, r24
	if (sock_num >= NIC_SOCKET_COUNT) {
    33d2:	ce 01       	movw	r24, r28
    33d4:	85 57       	subi	r24, 0x75	; 117
    33d6:	9f 4f       	sbci	r25, 0xFF	; 255
    33d8:	fc 01       	movw	r30, r24
    33da:	80 81       	ld	r24, Z
    33dc:	88 30       	cpi	r24, 0x08	; 8
    33de:	98 f4       	brcc	.+38     	; 0x3406 <Open+0x4e>
		return;
	}
	
	NIC_SOCKET_CR_t cmd = NIC_SOCKET_CMD_OPEN;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	89 83       	std	Y+1, r24	; 0x01
	NIC_PACKET_t packet = RenderSocketCmdPacket(sock_num, cmd);
    33e4:	9e 01       	movw	r18, r28
    33e6:	2e 5f       	subi	r18, 0xFE	; 254
    33e8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ea:	ce 01       	movw	r24, r28
    33ec:	85 57       	subi	r24, 0x75	; 117
    33ee:	9f 4f       	sbci	r25, 0xFF	; 255
    33f0:	49 81       	ldd	r20, Y+1	; 0x01
    33f2:	fc 01       	movw	r30, r24
    33f4:	60 81       	ld	r22, Z
    33f6:	c9 01       	movw	r24, r18
    33f8:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <RenderSocketCmdPacket>
	InsertTxPacket(&packet);
    33fc:	ce 01       	movw	r24, r28
    33fe:	02 96       	adiw	r24, 0x02	; 2
    3400:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
    3404:	01 c0       	rjmp	.+2      	; 0x3408 <Open+0x50>
	nic_sock_init();
}

void Open(uint8_t sock_num) {
	if (sock_num >= NIC_SOCKET_COUNT) {
		return;
    3406:	00 00       	nop
	}
	
	NIC_SOCKET_CR_t cmd = NIC_SOCKET_CMD_OPEN;
	NIC_PACKET_t packet = RenderSocketCmdPacket(sock_num, cmd);
	InsertTxPacket(&packet);
}
    3408:	c5 57       	subi	r28, 0x75	; 117
    340a:	df 4f       	sbci	r29, 0xFF	; 255
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	de bf       	out	0x3e, r29	; 62
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	08 95       	ret

Disassembly of section .text.Close:

00003416 <Close>:

void Close(uint8_t sock_num) {
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	cb 58       	subi	r28, 0x8B	; 139
    3420:	d1 09       	sbc	r29, r1
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	9e 01       	movw	r18, r28
    3428:	25 57       	subi	r18, 0x75	; 117
    342a:	3f 4f       	sbci	r19, 0xFF	; 255
    342c:	f9 01       	movw	r30, r18
    342e:	80 83       	st	Z, r24
	if (sock_num >= NIC_SOCKET_COUNT) {
    3430:	ce 01       	movw	r24, r28
    3432:	85 57       	subi	r24, 0x75	; 117
    3434:	9f 4f       	sbci	r25, 0xFF	; 255
    3436:	fc 01       	movw	r30, r24
    3438:	80 81       	ld	r24, Z
    343a:	88 30       	cpi	r24, 0x08	; 8
    343c:	98 f4       	brcc	.+38     	; 0x3464 <Close+0x4e>
		return;
	}
	
	NIC_SOCKET_CR_t cmd = NIC_SOCKET_CMD_CLOSE;
    343e:	80 e1       	ldi	r24, 0x10	; 16
    3440:	89 83       	std	Y+1, r24	; 0x01
	NIC_PACKET_t packet = RenderSocketCmdPacket(sock_num, cmd);
    3442:	9e 01       	movw	r18, r28
    3444:	2e 5f       	subi	r18, 0xFE	; 254
    3446:	3f 4f       	sbci	r19, 0xFF	; 255
    3448:	ce 01       	movw	r24, r28
    344a:	85 57       	subi	r24, 0x75	; 117
    344c:	9f 4f       	sbci	r25, 0xFF	; 255
    344e:	49 81       	ldd	r20, Y+1	; 0x01
    3450:	fc 01       	movw	r30, r24
    3452:	60 81       	ld	r22, Z
    3454:	c9 01       	movw	r24, r18
    3456:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <RenderSocketCmdPacket>
	InsertTxPacket(&packet);
    345a:	ce 01       	movw	r24, r28
    345c:	02 96       	adiw	r24, 0x02	; 2
    345e:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
    3462:	01 c0       	rjmp	.+2      	; 0x3466 <Close+0x50>
	InsertTxPacket(&packet);
}

void Close(uint8_t sock_num) {
	if (sock_num >= NIC_SOCKET_COUNT) {
		return;
    3464:	00 00       	nop
	}
	
	NIC_SOCKET_CR_t cmd = NIC_SOCKET_CMD_CLOSE;
	NIC_PACKET_t packet = RenderSocketCmdPacket(sock_num, cmd);
	InsertTxPacket(&packet);
}
    3466:	c5 57       	subi	r28, 0x75	; 117
    3468:	df 4f       	sbci	r29, 0xFF	; 255
    346a:	cd bf       	out	0x3d, r28	; 61
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	df 91       	pop	r29
    3470:	cf 91       	pop	r28
    3472:	08 95       	ret

Disassembly of section .text.Connect:

00000e52 <Connect>:

void Connect(uint8_t sock_num) {
 e52:	cf 93       	push	r28
 e54:	df 93       	push	r29
 e56:	cd b7       	in	r28, 0x3d	; 61
 e58:	de b7       	in	r29, 0x3e	; 62
 e5a:	c1 52       	subi	r28, 0x21	; 33
 e5c:	d1 40       	sbci	r29, 0x01	; 1
 e5e:	cd bf       	out	0x3d, r28	; 61
 e60:	de bf       	out	0x3e, r29	; 62
 e62:	9e 01       	movw	r18, r28
 e64:	2a 56       	subi	r18, 0x6A	; 106
 e66:	3f 4f       	sbci	r19, 0xFF	; 255
 e68:	f9 01       	movw	r30, r18
 e6a:	80 83       	st	Z, r24
	if (sock_num >= NIC_SOCKET_COUNT) {
 e6c:	ce 01       	movw	r24, r28
 e6e:	8a 56       	subi	r24, 0x6A	; 106
 e70:	9f 4f       	sbci	r25, 0xFF	; 255
 e72:	fc 01       	movw	r30, r24
 e74:	80 81       	ld	r24, Z
 e76:	88 30       	cpi	r24, 0x08	; 8
 e78:	08 f0       	brcs	.+2      	; 0xe7c <Connect+0x2a>
 e7a:	b0 c0       	rjmp	.+352    	; 0xfdc <Connect+0x18a>
	
	NIC_PACKET_t packet;
	
	NIC_DPORT_t destPort;
	NIC_DIP_t destIp;
	const uint8_t dip[] = { 192, 168, 3, 109 };
 e7c:	ce 01       	movw	r24, r28
 e7e:	80 57       	subi	r24, 0x70	; 112
 e80:	9f 4f       	sbci	r25, 0xFF	; 255
 e82:	20 ec       	ldi	r18, 0xC0	; 192
 e84:	fc 01       	movw	r30, r24
 e86:	20 83       	st	Z, r18
 e88:	ce 01       	movw	r24, r28
 e8a:	80 57       	subi	r24, 0x70	; 112
 e8c:	9f 4f       	sbci	r25, 0xFF	; 255
 e8e:	28 ea       	ldi	r18, 0xA8	; 168
 e90:	fc 01       	movw	r30, r24
 e92:	21 83       	std	Z+1, r18	; 0x01
 e94:	ce 01       	movw	r24, r28
 e96:	80 57       	subi	r24, 0x70	; 112
 e98:	9f 4f       	sbci	r25, 0xFF	; 255
 e9a:	23 e0       	ldi	r18, 0x03	; 3
 e9c:	fc 01       	movw	r30, r24
 e9e:	22 83       	std	Z+2, r18	; 0x02
 ea0:	ce 01       	movw	r24, r28
 ea2:	80 57       	subi	r24, 0x70	; 112
 ea4:	9f 4f       	sbci	r25, 0xFF	; 255
 ea6:	2d e6       	ldi	r18, 0x6D	; 109
 ea8:	fc 01       	movw	r30, r24
 eaa:	23 83       	std	Z+3, r18	; 0x03
	const uint8_t dport[] = { 0x1A, 0x0D }; // 6669
 eac:	ce 01       	movw	r24, r28
 eae:	8c 56       	subi	r24, 0x6C	; 108
 eb0:	9f 4f       	sbci	r25, 0xFF	; 255
 eb2:	2a e1       	ldi	r18, 0x1A	; 26
 eb4:	fc 01       	movw	r30, r24
 eb6:	20 83       	st	Z, r18
 eb8:	ce 01       	movw	r24, r28
 eba:	8c 56       	subi	r24, 0x6C	; 108
 ebc:	9f 4f       	sbci	r25, 0xFF	; 255
 ebe:	2d e0       	ldi	r18, 0x0D	; 13
 ec0:	fc 01       	movw	r30, r24
 ec2:	21 83       	std	Z+1, r18	; 0x01
		
	memcpy(&(destIp.bytes), &dip, sizeof(NIC_DIP_t));
 ec4:	ce 01       	movw	r24, r28
 ec6:	80 57       	subi	r24, 0x70	; 112
 ec8:	9f 4f       	sbci	r25, 0xFF	; 255
 eca:	cc 01       	movw	r24, r24
 ecc:	a0 e8       	ldi	r26, 0x80	; 128
 ece:	aa 2f       	mov	r26, r26
 ed0:	ac 01       	movw	r20, r24
 ed2:	6a 2f       	mov	r22, r26
 ed4:	ce 01       	movw	r24, r28
 ed6:	84 57       	subi	r24, 0x74	; 116
 ed8:	9f 4f       	sbci	r25, 0xFF	; 255
 eda:	24 e0       	ldi	r18, 0x04	; 4
 edc:	30 e0       	ldi	r19, 0x00	; 0
 ede:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
	memcpy(&(destPort.bytes), &dport, sizeof(NIC_DPORT_t));
 ee2:	ce 01       	movw	r24, r28
 ee4:	8c 56       	subi	r24, 0x6C	; 108
 ee6:	9f 4f       	sbci	r25, 0xFF	; 255
 ee8:	cc 01       	movw	r24, r24
 eea:	a0 e8       	ldi	r26, 0x80	; 128
 eec:	aa 2f       	mov	r26, r26
 eee:	ac 01       	movw	r20, r24
 ef0:	6a 2f       	mov	r22, r26
 ef2:	ce 01       	movw	r24, r28
 ef4:	86 57       	subi	r24, 0x76	; 118
 ef6:	9f 4f       	sbci	r25, 0xFF	; 255
 ef8:	22 e0       	ldi	r18, 0x02	; 2
 efa:	30 e0       	ldi	r19, 0x00	; 0
 efc:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
	
	packet = RenderUpdateSocketDPortPacket(1, destPort);
 f00:	9e 01       	movw	r18, r28
 f02:	29 56       	subi	r18, 0x69	; 105
 f04:	3f 4f       	sbci	r19, 0xFF	; 255
 f06:	ce 01       	movw	r24, r28
 f08:	86 57       	subi	r24, 0x76	; 118
 f0a:	9f 4f       	sbci	r25, 0xFF	; 255
 f0c:	fc 01       	movw	r30, r24
 f0e:	80 81       	ld	r24, Z
 f10:	91 81       	ldd	r25, Z+1	; 0x01
 f12:	ac 01       	movw	r20, r24
 f14:	61 e0       	ldi	r22, 0x01	; 1
 f16:	c9 01       	movw	r24, r18
 f18:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <RenderUpdateSocketDPortPacket>
 f1c:	ce 01       	movw	r24, r28
 f1e:	89 56       	subi	r24, 0x69	; 105
 f20:	9f 4f       	sbci	r25, 0xFF	; 255
 f22:	29 e8       	ldi	r18, 0x89	; 137
 f24:	fc 01       	movw	r30, r24
 f26:	ce 01       	movw	r24, r28
 f28:	01 96       	adiw	r24, 0x01	; 1
 f2a:	dc 01       	movw	r26, r24
 f2c:	01 90       	ld	r0, Z+
 f2e:	0d 92       	st	X+, r0
 f30:	2a 95       	dec	r18
 f32:	e1 f7       	brne	.-8      	; 0xf2c <Connect+0xda>
	InsertTxPacket(&packet);
 f34:	ce 01       	movw	r24, r28
 f36:	01 96       	adiw	r24, 0x01	; 1
 f38:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
	
	packet = RenderUpdateSocketDIPPacket(1, destIp);
 f3c:	ce 01       	movw	r24, r28
 f3e:	89 56       	subi	r24, 0x69	; 105
 f40:	9f 4f       	sbci	r25, 0xFF	; 255
 f42:	c0 5e       	subi	r28, 0xE0	; 224
 f44:	de 4f       	sbci	r29, 0xFE	; 254
 f46:	88 83       	st	Y, r24
 f48:	99 83       	std	Y+1, r25	; 0x01
 f4a:	c0 52       	subi	r28, 0x20	; 32
 f4c:	d1 40       	sbci	r29, 0x01	; 1
 f4e:	ce 01       	movw	r24, r28
 f50:	84 57       	subi	r24, 0x74	; 116
 f52:	9f 4f       	sbci	r25, 0xFF	; 255
 f54:	fc 01       	movw	r30, r24
 f56:	80 81       	ld	r24, Z
 f58:	91 81       	ldd	r25, Z+1	; 0x01
 f5a:	a2 81       	ldd	r26, Z+2	; 0x02
 f5c:	b3 81       	ldd	r27, Z+3	; 0x03
 f5e:	9c 01       	movw	r18, r24
 f60:	ad 01       	movw	r20, r26
 f62:	61 e0       	ldi	r22, 0x01	; 1
 f64:	c0 5e       	subi	r28, 0xE0	; 224
 f66:	de 4f       	sbci	r29, 0xFE	; 254
 f68:	88 81       	ld	r24, Y
 f6a:	99 81       	ldd	r25, Y+1	; 0x01
 f6c:	c0 52       	subi	r28, 0x20	; 32
 f6e:	d1 40       	sbci	r29, 0x01	; 1
 f70:	0e 94 6d 0a 	call	0x14da	; 0x14da <RenderUpdateSocketDIPPacket>
 f74:	ce 01       	movw	r24, r28
 f76:	89 56       	subi	r24, 0x69	; 105
 f78:	9f 4f       	sbci	r25, 0xFF	; 255
 f7a:	29 e8       	ldi	r18, 0x89	; 137
 f7c:	fc 01       	movw	r30, r24
 f7e:	ce 01       	movw	r24, r28
 f80:	01 96       	adiw	r24, 0x01	; 1
 f82:	dc 01       	movw	r26, r24
 f84:	01 90       	ld	r0, Z+
 f86:	0d 92       	st	X+, r0
 f88:	2a 95       	dec	r18
 f8a:	e1 f7       	brne	.-8      	; 0xf84 <Connect+0x132>
	InsertTxPacket(&packet);
 f8c:	ce 01       	movw	r24, r28
 f8e:	01 96       	adiw	r24, 0x01	; 1
 f90:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
	
	packet = RenderSocketCmdPacket(1, NIC_SOCKET_CMD_CONNECT);
 f94:	ce 01       	movw	r24, r28
 f96:	89 56       	subi	r24, 0x69	; 105
 f98:	9f 4f       	sbci	r25, 0xFF	; 255
 f9a:	44 e0       	ldi	r20, 0x04	; 4
 f9c:	61 e0       	ldi	r22, 0x01	; 1
 f9e:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <RenderSocketCmdPacket>
 fa2:	ce 01       	movw	r24, r28
 fa4:	89 56       	subi	r24, 0x69	; 105
 fa6:	9f 4f       	sbci	r25, 0xFF	; 255
 fa8:	29 e8       	ldi	r18, 0x89	; 137
 faa:	fc 01       	movw	r30, r24
 fac:	ce 01       	movw	r24, r28
 fae:	01 96       	adiw	r24, 0x01	; 1
 fb0:	dc 01       	movw	r26, r24
 fb2:	01 90       	ld	r0, Z+
 fb4:	0d 92       	st	X+, r0
 fb6:	2a 95       	dec	r18
 fb8:	e1 f7       	brne	.-8      	; 0xfb2 <Connect+0x160>
	InsertTxPacket(&packet);
 fba:	ce 01       	movw	r24, r28
 fbc:	01 96       	adiw	r24, 0x01	; 1
 fbe:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
	
	NICData.sock_status[sock_num] = NIC_SOCKET_STATUS_CONNPEND;
 fc2:	ce 01       	movw	r24, r28
 fc4:	8a 56       	subi	r24, 0x6A	; 106
 fc6:	9f 4f       	sbci	r25, 0xFF	; 255
 fc8:	fc 01       	movw	r30, r24
 fca:	80 81       	ld	r24, Z
 fcc:	88 2f       	mov	r24, r24
 fce:	90 e0       	ldi	r25, 0x00	; 0
 fd0:	88 59       	subi	r24, 0x98	; 152
 fd2:	99 4b       	sbci	r25, 0xB9	; 185
 fd4:	23 e0       	ldi	r18, 0x03	; 3
 fd6:	fc 01       	movw	r30, r24
 fd8:	20 83       	st	Z, r18
 fda:	01 c0       	rjmp	.+2      	; 0xfde <Connect+0x18c>
	InsertTxPacket(&packet);
}

void Connect(uint8_t sock_num) {
	if (sock_num >= NIC_SOCKET_COUNT) {
		return;
 fdc:	00 00       	nop
	
	packet = RenderSocketCmdPacket(1, NIC_SOCKET_CMD_CONNECT);
	InsertTxPacket(&packet);
	
	NICData.sock_status[sock_num] = NIC_SOCKET_STATUS_CONNPEND;
}
 fde:	cf 5d       	subi	r28, 0xDF	; 223
 fe0:	de 4f       	sbci	r29, 0xFE	; 254
 fe2:	cd bf       	out	0x3d, r28	; 61
 fe4:	de bf       	out	0x3e, r29	; 62
 fe6:	df 91       	pop	r29
 fe8:	cf 91       	pop	r28
 fea:	08 95       	ret

Disassembly of section .text.Send:

0000372e <Send>:

// @ Deprecated
uint16_t Send(uint8_t sock_num, uint8_t* buffer, uint16_t length) {
    372e:	cf 93       	push	r28
    3730:	df 93       	push	r29
    3732:	cd b7       	in	r28, 0x3d	; 61
    3734:	de b7       	in	r29, 0x3e	; 62
    3736:	25 97       	sbiw	r28, 0x05	; 5
    3738:	cd bf       	out	0x3d, r28	; 61
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	89 83       	std	Y+1, r24	; 0x01
    373e:	6a 83       	std	Y+2, r22	; 0x02
    3740:	7b 83       	std	Y+3, r23	; 0x03
    3742:	4c 83       	std	Y+4, r20	; 0x04
    3744:	5d 83       	std	Y+5, r21	; 0x05
	if (sock_num >= NIC_SOCKET_COUNT) {
    3746:	89 81       	ldd	r24, Y+1	; 0x01
    3748:	88 30       	cpi	r24, 0x08	; 8
    374a:	18 f0       	brcs	.+6      	; 0x3752 <Send+0x24>
		return 0xFFFF;
    374c:	8f ef       	ldi	r24, 0xFF	; 255
    374e:	9f ef       	ldi	r25, 0xFF	; 255
    3750:	02 c0       	rjmp	.+4      	; 0x3756 <Send+0x28>
	}
	return 0;
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	90 e0       	ldi	r25, 0x00	; 0
}
    3756:	25 96       	adiw	r28, 0x05	; 5
    3758:	cd bf       	out	0x3d, r28	; 61
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	df 91       	pop	r29
    375e:	cf 91       	pop	r28
    3760:	08 95       	ret

Disassembly of section .text.SendEx:

00002654 <SendEx>:

uint16_t SendEx(uint8_t sock_num, NIC_PACKET_t packet) {
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	1f 92       	push	r1
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	89 83       	std	Y+1, r24	; 0x01
	// if (NICData.isRxC == false) return 0;
	if (NICData.isTxC == false) return 0;
    2660:	90 91 46 47 	lds	r25, 0x4746	; 0x804746 <NICData+0xde>
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	89 27       	eor	r24, r25
    2668:	88 23       	and	r24, r24
    266a:	19 f0       	breq	.+6      	; 0x2672 <SendEx+0x1e>
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	3a c0       	rjmp	.+116    	; 0x26e6 <SendEx+0x92>
	if (sock_num >= NIC_SOCKET_COUNT) {
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	88 30       	cpi	r24, 0x08	; 8
    2676:	18 f0       	brcs	.+6      	; 0x267e <SendEx+0x2a>
		return 0xFFFF;
    2678:	8f ef       	ldi	r24, 0xFF	; 255
    267a:	9f ef       	ldi	r25, 0xFF	; 255
    267c:	34 c0       	rjmp	.+104    	; 0x26e6 <SendEx+0x92>
	}
	
	NICData.isTxC = false;
    267e:	10 92 46 47 	sts	0x4746, r1	; 0x804746 <NICData+0xde>
	NICData.isRxC = false;
    2682:	10 92 c1 46 	sts	0x46C1, r1	; 0x8046c1 <NICData+0x59>
	
	memcpy((void *)NICData.txBuff, (void *)&packet.payload, packet.meta.packet_length);
    2686:	28 85       	ldd	r18, Y+8	; 0x08
    2688:	39 85       	ldd	r19, Y+9	; 0x09
    268a:	ce 01       	movw	r24, r28
    268c:	0c 96       	adiw	r24, 0x0c	; 12
    268e:	cc 01       	movw	r24, r24
    2690:	a0 e8       	ldi	r26, 0x80	; 128
    2692:	aa 2f       	mov	r26, r26
    2694:	ac 01       	movw	r20, r24
    2696:	6a 2f       	mov	r22, r26
    2698:	87 e4       	ldi	r24, 0x47	; 71
    269a:	97 e4       	ldi	r25, 0x47	; 71
    269c:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
	NICData.txPtr = 0;
    26a0:	10 92 c7 47 	sts	0x47C7, r1	; 0x8047c7 <NICData+0x15f>
    26a4:	10 92 c8 47 	sts	0x47C8, r1	; 0x8047c8 <NICData+0x160>
	NICData.txLen = packet.meta.packet_length;
    26a8:	88 85       	ldd	r24, Y+8	; 0x08
    26aa:	99 85       	ldd	r25, Y+9	; 0x09
    26ac:	80 93 c9 47 	sts	0x47C9, r24	; 0x8047c9 <NICData+0x161>
    26b0:	90 93 ca 47 	sts	0x47CA, r25	; 0x8047ca <NICData+0x162>
	NICData.rxPtr = 0;
    26b4:	10 92 42 47 	sts	0x4742, r1	; 0x804742 <NICData+0xda>
    26b8:	10 92 43 47 	sts	0x4743, r1	; 0x804743 <NICData+0xdb>
	NICData.rxLen = NICData.txLen;
    26bc:	80 91 c9 47 	lds	r24, 0x47C9	; 0x8047c9 <NICData+0x161>
    26c0:	90 91 ca 47 	lds	r25, 0x47CA	; 0x8047ca <NICData+0x162>
    26c4:	80 93 44 47 	sts	0x4744, r24	; 0x804744 <NICData+0xdc>
    26c8:	90 93 45 47 	sts	0x4745, r25	; 0x804745 <NICData+0xdd>
	SPI0_SLAVE_SELECT();
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	94 e0       	ldi	r25, 0x04	; 4
    26d0:	20 e8       	ldi	r18, 0x80	; 128
    26d2:	fc 01       	movw	r30, r24
    26d4:	26 83       	std	Z+6, r18	; 0x06
	SPI0.DATA = NICData.txBuff[0];
    26d6:	80 e4       	ldi	r24, 0x40	; 64
    26d8:	99 e0       	ldi	r25, 0x09	; 9
    26da:	20 91 47 47 	lds	r18, 0x4747	; 0x804747 <NICData+0xdf>
    26de:	fc 01       	movw	r30, r24
    26e0:	24 83       	std	Z+4, r18	; 0x04
	
	return 0;
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
}
    26e6:	0f 90       	pop	r0
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret

Disassembly of section .text.Receive:

00003224 <Receive>:

uint16_t Receive(uint8_t sock_num, uint8_t* buffer, uint16_t length) {
    3224:	cf 93       	push	r28
    3226:	df 93       	push	r29
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	27 97       	sbiw	r28, 0x07	; 7
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	8b 83       	std	Y+3, r24	; 0x03
    3234:	6c 83       	std	Y+4, r22	; 0x04
    3236:	7d 83       	std	Y+5, r23	; 0x05
    3238:	4e 83       	std	Y+6, r20	; 0x06
    323a:	5f 83       	std	Y+7, r21	; 0x07
	if (sock_num >= NIC_SOCKET_COUNT) {
    323c:	8b 81       	ldd	r24, Y+3	; 0x03
    323e:	88 30       	cpi	r24, 0x08	; 8
    3240:	18 f0       	brcs	.+6      	; 0x3248 <Receive+0x24>
		return 0xFFFF;
    3242:	8f ef       	ldi	r24, 0xFF	; 255
    3244:	9f ef       	ldi	r25, 0xFF	; 255
    3246:	1d c0       	rjmp	.+58     	; 0x3282 <Receive+0x5e>
	}
	for (uint16_t i = 0; i < length; i++)
    3248:	19 82       	std	Y+1, r1	; 0x01
    324a:	1a 82       	std	Y+2, r1	; 0x02
    324c:	11 c0       	rjmp	.+34     	; 0x3270 <Receive+0x4c>
	{
		buffer[i] = SPI0.DATA;
    324e:	2c 81       	ldd	r18, Y+4	; 0x04
    3250:	3d 81       	ldd	r19, Y+5	; 0x05
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	9a 81       	ldd	r25, Y+2	; 0x02
    3256:	82 0f       	add	r24, r18
    3258:	93 1f       	adc	r25, r19
    325a:	20 e4       	ldi	r18, 0x40	; 64
    325c:	39 e0       	ldi	r19, 0x09	; 9
    325e:	f9 01       	movw	r30, r18
    3260:	24 81       	ldd	r18, Z+4	; 0x04
    3262:	fc 01       	movw	r30, r24
    3264:	20 83       	st	Z, r18

uint16_t Receive(uint8_t sock_num, uint8_t* buffer, uint16_t length) {
	if (sock_num >= NIC_SOCKET_COUNT) {
		return 0xFFFF;
	}
	for (uint16_t i = 0; i < length; i++)
    3266:	89 81       	ldd	r24, Y+1	; 0x01
    3268:	9a 81       	ldd	r25, Y+2	; 0x02
    326a:	01 96       	adiw	r24, 0x01	; 1
    326c:	89 83       	std	Y+1, r24	; 0x01
    326e:	9a 83       	std	Y+2, r25	; 0x02
    3270:	29 81       	ldd	r18, Y+1	; 0x01
    3272:	3a 81       	ldd	r19, Y+2	; 0x02
    3274:	8e 81       	ldd	r24, Y+6	; 0x06
    3276:	9f 81       	ldd	r25, Y+7	; 0x07
    3278:	28 17       	cp	r18, r24
    327a:	39 07       	cpc	r19, r25
    327c:	40 f3       	brcs	.-48     	; 0x324e <Receive+0x2a>
	{
		buffer[i] = SPI0.DATA;
	}
	return length;
    327e:	8e 81       	ldd	r24, Y+6	; 0x06
    3280:	9f 81       	ldd	r25, Y+7	; 0x07
}
    3282:	27 96       	adiw	r28, 0x07	; 7
    3284:	cd bf       	out	0x3d, r28	; 61
    3286:	de bf       	out	0x3e, r29	; 62
    3288:	df 91       	pop	r29
    328a:	cf 91       	pop	r28
    328c:	08 95       	ret

Disassembly of section .text.isNICIdle:

00003794 <isNICIdle>:

bool isNICIdle() {
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
	if (NICData.isRxC == false) return false;
    379c:	90 91 c1 46 	lds	r25, 0x46C1	; 0x8046c1 <NICData+0x59>
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	89 27       	eor	r24, r25
    37a4:	88 23       	and	r24, r24
    37a6:	11 f0       	breq	.+4      	; 0x37ac <isNICIdle+0x18>
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	09 c0       	rjmp	.+18     	; 0x37be <isNICIdle+0x2a>
	if (NICData.isTxC == false) return false;
    37ac:	90 91 46 47 	lds	r25, 0x4746	; 0x804746 <NICData+0xde>
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	89 27       	eor	r24, r25
    37b4:	88 23       	and	r24, r24
    37b6:	11 f0       	breq	.+4      	; 0x37bc <isNICIdle+0x28>
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	01 c0       	rjmp	.+2      	; 0x37be <isNICIdle+0x2a>
	return true;
    37bc:	81 e0       	ldi	r24, 0x01	; 1
}
    37be:	df 91       	pop	r29
    37c0:	cf 91       	pop	r28
    37c2:	08 95       	ret

Disassembly of section .text.NICTxDispatch:

0000211a <NICTxDispatch>:

void NICTxDispatch() {
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	1f 92       	push	r1
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
	if (NICData.isTxC == false) return;
    2124:	90 91 46 47 	lds	r25, 0x4746	; 0x804746 <NICData+0xde>
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	89 27       	eor	r24, r25
    212c:	88 23       	and	r24, r24
    212e:	09 f0       	breq	.+2      	; 0x2132 <NICTxDispatch+0x18>
    2130:	50 c0       	rjmp	.+160    	; 0x21d2 <NICTxDispatch+0xb8>
	for (uint8_t i = 0; i < NIC_SIZE_TXPACKBUFF; i++)
    2132:	19 82       	std	Y+1, r1	; 0x01
    2134:	49 c0       	rjmp	.+146    	; 0x21c8 <NICTxDispatch+0xae>
	{
		if (NICData.txPacketBuff[i].meta.type != NIC_PACKET_TYPE_IDLE) {
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	49 e8       	ldi	r20, 0x89	; 137
    213e:	42 9f       	mul	r20, r18
    2140:	c0 01       	movw	r24, r0
    2142:	43 9f       	mul	r20, r19
    2144:	90 0d       	add	r25, r0
    2146:	11 24       	eor	r1, r1
    2148:	83 53       	subi	r24, 0x33	; 51
    214a:	98 4b       	sbci	r25, 0xB8	; 184
    214c:	fc 01       	movw	r30, r24
    214e:	80 81       	ld	r24, Z
    2150:	88 23       	and	r24, r24
    2152:	b9 f1       	breq	.+110    	; 0x21c2 <NICTxDispatch+0xa8>
			NICData.curTxPacket = &(NICData.txPacketBuff[i]);
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	49 e8       	ldi	r20, 0x89	; 137
    215c:	42 9f       	mul	r20, r18
    215e:	c0 01       	movw	r24, r0
    2160:	43 9f       	mul	r20, r19
    2162:	90 0d       	add	r25, r0
    2164:	11 24       	eor	r1, r1
    2166:	8c 59       	subi	r24, 0x9C	; 156
    2168:	9e 4f       	sbci	r25, 0xFE	; 254
    216a:	88 59       	subi	r24, 0x98	; 152
    216c:	99 4b       	sbci	r25, 0xB9	; 185
    216e:	80 93 ee 58 	sts	0x58EE, r24	; 0x8058ee <NICData+0x1286>
    2172:	90 93 ef 58 	sts	0x58EF, r25	; 0x8058ef <NICData+0x1287>
			SendEx(0, NICData.txPacketBuff[i]);
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	49 e8       	ldi	r20, 0x89	; 137
    217e:	42 9f       	mul	r20, r18
    2180:	c0 01       	movw	r24, r0
    2182:	43 9f       	mul	r20, r19
    2184:	90 0d       	add	r25, r0
    2186:	11 24       	eor	r1, r1
    2188:	9c 01       	movw	r18, r24
    218a:	24 53       	subi	r18, 0x34	; 52
    218c:	38 4b       	sbci	r19, 0xB8	; 184
    218e:	8d b7       	in	r24, 0x3d	; 61
    2190:	9e b7       	in	r25, 0x3e	; 62
    2192:	89 58       	subi	r24, 0x89	; 137
    2194:	91 09       	sbc	r25, r1
    2196:	8d bf       	out	0x3d, r24	; 61
    2198:	9e bf       	out	0x3e, r25	; 62
    219a:	8d b7       	in	r24, 0x3d	; 61
    219c:	9e b7       	in	r25, 0x3e	; 62
    219e:	01 96       	adiw	r24, 0x01	; 1
    21a0:	49 e8       	ldi	r20, 0x89	; 137
    21a2:	f9 01       	movw	r30, r18
    21a4:	dc 01       	movw	r26, r24
    21a6:	01 90       	ld	r0, Z+
    21a8:	0d 92       	st	X+, r0
    21aa:	4a 95       	dec	r20
    21ac:	e1 f7       	brne	.-8      	; 0x21a6 <NICTxDispatch+0x8c>
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	0e 94 2a 13 	call	0x2654	; 0x2654 <SendEx>
    21b4:	ed b7       	in	r30, 0x3d	; 61
    21b6:	fe b7       	in	r31, 0x3e	; 62
    21b8:	e7 57       	subi	r30, 0x77	; 119
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	de bf       	out	0x3e, r29	; 62
			break;
    21c0:	09 c0       	rjmp	.+18     	; 0x21d4 <NICTxDispatch+0xba>
	return true;
}

void NICTxDispatch() {
	if (NICData.isTxC == false) return;
	for (uint8_t i = 0; i < NIC_SIZE_TXPACKBUFF; i++)
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	8f 5f       	subi	r24, 0xFF	; 255
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	80 31       	cpi	r24, 0x10	; 16
    21cc:	08 f4       	brcc	.+2      	; 0x21d0 <NICTxDispatch+0xb6>
    21ce:	b3 cf       	rjmp	.-154    	; 0x2136 <NICTxDispatch+0x1c>
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <NICTxDispatch+0xba>
	if (NICData.isTxC == false) return false;
	return true;
}

void NICTxDispatch() {
	if (NICData.isTxC == false) return;
    21d2:	00 00       	nop
			NICData.curTxPacket = &(NICData.txPacketBuff[i]);
			SendEx(0, NICData.txPacketBuff[i]);
			break;
		}
	}
}
    21d4:	0f 90       	pop	r0
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	08 95       	ret

Disassembly of section .text.NICRxDispatch:

00002c38 <NICRxDispatch>:

void NICRxDispatch() {
    2c38:	cf 93       	push	r28
    2c3a:	df 93       	push	r29
    2c3c:	1f 92       	push	r1
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 0; i < NIC_SIZE_RXPACKBUFF; i++)
    2c42:	19 82       	std	Y+1, r1	; 0x01
    2c44:	2f c0       	rjmp	.+94     	; 0x2ca4 <NICRxDispatch+0x6c>
	{
		if (NICData.rxPacketBuff[i].meta.type != NIC_PACKET_TYPE_IDLE) {
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	28 2f       	mov	r18, r24
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	49 e8       	ldi	r20, 0x89	; 137
    2c4e:	42 9f       	mul	r20, r18
    2c50:	c0 01       	movw	r24, r0
    2c52:	43 9f       	mul	r20, r19
    2c54:	90 0d       	add	r25, r0
    2c56:	11 24       	eor	r1, r1
    2c58:	83 5a       	subi	r24, 0xA3	; 163
    2c5a:	9f 4a       	sbci	r25, 0xAF	; 175
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	80 81       	ld	r24, Z
    2c60:	88 23       	and	r24, r24
    2c62:	e9 f0       	breq	.+58     	; 0x2c9e <NICRxDispatch+0x66>
			NICData.curRxPacket = &(NICData.rxPacketBuff[i]);
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	28 2f       	mov	r18, r24
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	49 e8       	ldi	r20, 0x89	; 137
    2c6c:	42 9f       	mul	r20, r18
    2c6e:	c0 01       	movw	r24, r0
    2c70:	43 9f       	mul	r20, r19
    2c72:	90 0d       	add	r25, r0
    2c74:	11 24       	eor	r1, r1
    2c76:	8c 50       	subi	r24, 0x0C	; 12
    2c78:	96 4f       	sbci	r25, 0xF6	; 246
    2c7a:	88 59       	subi	r24, 0x98	; 152
    2c7c:	99 4b       	sbci	r25, 0xB9	; 185
    2c7e:	80 93 ec 58 	sts	0x58EC, r24	; 0x8058ec <NICData+0x1284>
    2c82:	90 93 ed 58 	sts	0x58ED, r25	; 0x8058ed <NICData+0x1285>
			NICRxDigestPacket(NICData.curRxPacket);
    2c86:	80 91 ec 58 	lds	r24, 0x58EC	; 0x8058ec <NICData+0x1284>
    2c8a:	90 91 ed 58 	lds	r25, 0x58ED	; 0x8058ed <NICData+0x1285>
    2c8e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <NICRxDigestPacket>
			NICData.curRxPacket->meta.type = NIC_PACKET_TYPE_IDLE;
    2c92:	80 91 ec 58 	lds	r24, 0x58EC	; 0x8058ec <NICData+0x1284>
    2c96:	90 91 ed 58 	lds	r25, 0x58ED	; 0x8058ed <NICData+0x1285>
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	11 82       	std	Z+1, r1	; 0x01
		}
	}
}

void NICRxDispatch() {
	for (uint8_t i = 0; i < NIC_SIZE_RXPACKBUFF; i++)
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	8f 5f       	subi	r24, 0xFF	; 255
    2ca2:	89 83       	std	Y+1, r24	; 0x01
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	80 31       	cpi	r24, 0x10	; 16
    2ca8:	70 f2       	brcs	.-100    	; 0x2c46 <NICRxDispatch+0xe>
			NICData.curRxPacket = &(NICData.rxPacketBuff[i]);
			NICRxDigestPacket(NICData.curRxPacket);
			NICData.curRxPacket->meta.type = NIC_PACKET_TYPE_IDLE;
		}
	}
}
    2caa:	00 00       	nop
    2cac:	0f 90       	pop	r0
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	08 95       	ret

Disassembly of section .text.FindIdleTxPacket:

000029ac <FindIdleTxPacket>:

volatile NIC_PACKET_t* FindIdleTxPacket() {
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	00 d0       	rcall	.+0      	; 0x29b2 <FindIdleTxPacket+0x6>
    29b2:	1f 92       	push	r1
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 0; i < NIC_SIZE_TXPACKBUFF; i++)
    29b8:	19 82       	std	Y+1, r1	; 0x01
    29ba:	2f c0       	rjmp	.+94     	; 0x2a1a <FindIdleTxPacket+0x6e>
	{
		if (NICData.txPacketBuff[i].meta.type == NIC_PACKET_TYPE_IDLE) {
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	49 e8       	ldi	r20, 0x89	; 137
    29c4:	42 9f       	mul	r20, r18
    29c6:	c0 01       	movw	r24, r0
    29c8:	43 9f       	mul	r20, r19
    29ca:	90 0d       	add	r25, r0
    29cc:	11 24       	eor	r1, r1
    29ce:	83 53       	subi	r24, 0x33	; 51
    29d0:	98 4b       	sbci	r25, 0xB8	; 184
    29d2:	fc 01       	movw	r30, r24
    29d4:	80 81       	ld	r24, Z
    29d6:	88 23       	and	r24, r24
    29d8:	e9 f4       	brne	.+58     	; 0x2a14 <FindIdleTxPacket+0x68>
			volatile NIC_PACKET_t* packet = &(NICData.txPacketBuff[i]);
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	49 e8       	ldi	r20, 0x89	; 137
    29e2:	42 9f       	mul	r20, r18
    29e4:	c0 01       	movw	r24, r0
    29e6:	43 9f       	mul	r20, r19
    29e8:	90 0d       	add	r25, r0
    29ea:	11 24       	eor	r1, r1
    29ec:	8c 59       	subi	r24, 0x9C	; 156
    29ee:	9e 4f       	sbci	r25, 0xFE	; 254
    29f0:	88 59       	subi	r24, 0x98	; 152
    29f2:	99 4b       	sbci	r25, 0xB9	; 185
    29f4:	8a 83       	std	Y+2, r24	; 0x02
    29f6:	9b 83       	std	Y+3, r25	; 0x03
			packet->meta.serialNum = NICData.serialCounter;
    29f8:	20 91 c0 46 	lds	r18, 0x46C0	; 0x8046c0 <NICData+0x58>
    29fc:	8a 81       	ldd	r24, Y+2	; 0x02
    29fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2a00:	fc 01       	movw	r30, r24
    2a02:	20 83       	st	Z, r18
			NICData.serialCounter++;
    2a04:	80 91 c0 46 	lds	r24, 0x46C0	; 0x8046c0 <NICData+0x58>
    2a08:	8f 5f       	subi	r24, 0xFF	; 255
    2a0a:	80 93 c0 46 	sts	0x46C0, r24	; 0x8046c0 <NICData+0x58>
			return packet;
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	9b 81       	ldd	r25, Y+3	; 0x03
    2a12:	08 c0       	rjmp	.+16     	; 0x2a24 <FindIdleTxPacket+0x78>
		}
	}
}

volatile NIC_PACKET_t* FindIdleTxPacket() {
	for (uint8_t i = 0; i < NIC_SIZE_TXPACKBUFF; i++)
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	8f 5f       	subi	r24, 0xFF	; 255
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	80 31       	cpi	r24, 0x10	; 16
    2a1e:	70 f2       	brcs	.-100    	; 0x29bc <FindIdleTxPacket+0x10>
			packet->meta.serialNum = NICData.serialCounter;
			NICData.serialCounter++;
			return packet;
		}
	}
	return NULL;
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	90 e0       	ldi	r25, 0x00	; 0
}
    2a24:	23 96       	adiw	r28, 0x03	; 3
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	08 95       	ret

Disassembly of section .text.FindIdleRxPacket:

00002a30 <FindIdleRxPacket>:

volatile NIC_PACKET_t* FindIdleRxPacket() {
    2a30:	cf 93       	push	r28
    2a32:	df 93       	push	r29
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <FindIdleRxPacket+0x6>
    2a36:	1f 92       	push	r1
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 0; i < NIC_SIZE_RXPACKBUFF; i++)
    2a3c:	19 82       	std	Y+1, r1	; 0x01
    2a3e:	2f c0       	rjmp	.+94     	; 0x2a9e <FindIdleRxPacket+0x6e>
	{
		if (NICData.rxPacketBuff[i].meta.type == NIC_PACKET_TYPE_IDLE) {
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	49 e8       	ldi	r20, 0x89	; 137
    2a48:	42 9f       	mul	r20, r18
    2a4a:	c0 01       	movw	r24, r0
    2a4c:	43 9f       	mul	r20, r19
    2a4e:	90 0d       	add	r25, r0
    2a50:	11 24       	eor	r1, r1
    2a52:	83 5a       	subi	r24, 0xA3	; 163
    2a54:	9f 4a       	sbci	r25, 0xAF	; 175
    2a56:	fc 01       	movw	r30, r24
    2a58:	80 81       	ld	r24, Z
    2a5a:	88 23       	and	r24, r24
    2a5c:	e9 f4       	brne	.+58     	; 0x2a98 <FindIdleRxPacket+0x68>
			volatile NIC_PACKET_t* packet = &(NICData.rxPacketBuff[i]);
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	28 2f       	mov	r18, r24
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	49 e8       	ldi	r20, 0x89	; 137
    2a66:	42 9f       	mul	r20, r18
    2a68:	c0 01       	movw	r24, r0
    2a6a:	43 9f       	mul	r20, r19
    2a6c:	90 0d       	add	r25, r0
    2a6e:	11 24       	eor	r1, r1
    2a70:	8c 50       	subi	r24, 0x0C	; 12
    2a72:	96 4f       	sbci	r25, 0xF6	; 246
    2a74:	88 59       	subi	r24, 0x98	; 152
    2a76:	99 4b       	sbci	r25, 0xB9	; 185
    2a78:	8a 83       	std	Y+2, r24	; 0x02
    2a7a:	9b 83       	std	Y+3, r25	; 0x03
			packet->meta.serialNum = NICData.serialCounter;
    2a7c:	20 91 c0 46 	lds	r18, 0x46C0	; 0x8046c0 <NICData+0x58>
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	9b 81       	ldd	r25, Y+3	; 0x03
    2a84:	fc 01       	movw	r30, r24
    2a86:	20 83       	st	Z, r18
			NICData.serialCounter++;
    2a88:	80 91 c0 46 	lds	r24, 0x46C0	; 0x8046c0 <NICData+0x58>
    2a8c:	8f 5f       	subi	r24, 0xFF	; 255
    2a8e:	80 93 c0 46 	sts	0x46C0, r24	; 0x8046c0 <NICData+0x58>
			return packet;
    2a92:	8a 81       	ldd	r24, Y+2	; 0x02
    2a94:	9b 81       	ldd	r25, Y+3	; 0x03
    2a96:	08 c0       	rjmp	.+16     	; 0x2aa8 <FindIdleRxPacket+0x78>
	}
	return NULL;
}

volatile NIC_PACKET_t* FindIdleRxPacket() {
	for (uint8_t i = 0; i < NIC_SIZE_RXPACKBUFF; i++)
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	8f 5f       	subi	r24, 0xFF	; 255
    2a9c:	89 83       	std	Y+1, r24	; 0x01
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	80 31       	cpi	r24, 0x10	; 16
    2aa2:	70 f2       	brcs	.-100    	; 0x2a40 <FindIdleRxPacket+0x10>
			packet->meta.serialNum = NICData.serialCounter;
			NICData.serialCounter++;
			return packet;
		}
	}
	return NULL;
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
}
    2aa8:	23 96       	adiw	r28, 0x03	; 3
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	df 91       	pop	r29
    2ab0:	cf 91       	pop	r28
    2ab2:	08 95       	ret

Disassembly of section .text.RenderReadChipVersionPacket:

00002ab4 <RenderReadChipVersionPacket>:

NIC_PACKET_t RenderReadChipVersionPacket() {
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	cb 58       	subi	r28, 0x8B	; 139
    2abe:	d1 09       	sbc	r29, r1
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	9e 01       	movw	r18, r28
    2ac6:	26 57       	subi	r18, 0x76	; 118
    2ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aca:	f9 01       	movw	r30, r18
    2acc:	80 83       	st	Z, r24
    2ace:	91 83       	std	Z+1, r25	; 0x01
	NIC_PACKET_t packet;
	packet.payload.addr.bytes[0] = 0x00;
    2ad0:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x39;
    2ad2:	89 e3       	ldi	r24, 0x39	; 57
    2ad4:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = 0b00000;
    2ad6:	89 85       	ldd	r24, Y+9	; 0x09
    2ad8:	87 70       	andi	r24, 0x07	; 7
    2ada:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    2adc:	89 85       	ldd	r24, Y+9	; 0x09
    2ade:	8c 7f       	andi	r24, 0xFC	; 252
    2ae0:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_READ_bm;
    2ae2:	89 85       	ldd	r24, Y+9	; 0x09
    2ae4:	8b 7f       	andi	r24, 0xFB	; 251
    2ae6:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = 0;
    2ae8:	1a 86       	std	Y+10, r1	; 0x0a
	packet.meta.dp_length = 1;
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 4;
    2af2:	84 e0       	ldi	r24, 0x04	; 4
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	8b 83       	std	Y+3, r24	; 0x03
    2af8:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_READ_VERSION;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    2afe:	ce 01       	movw	r24, r28
    2b00:	86 57       	subi	r24, 0x76	; 118
    2b02:	9f 4f       	sbci	r25, 0xFF	; 255
    2b04:	fc 01       	movw	r30, r24
    2b06:	80 81       	ld	r24, Z
    2b08:	91 81       	ldd	r25, Z+1	; 0x01
    2b0a:	49 e8       	ldi	r20, 0x89	; 137
    2b0c:	9e 01       	movw	r18, r28
    2b0e:	2f 5f       	subi	r18, 0xFF	; 255
    2b10:	3f 4f       	sbci	r19, 0xFF	; 255
    2b12:	f9 01       	movw	r30, r18
    2b14:	dc 01       	movw	r26, r24
    2b16:	01 90       	ld	r0, Z+
    2b18:	0d 92       	st	X+, r0
    2b1a:	4a 95       	dec	r20
    2b1c:	e1 f7       	brne	.-8      	; 0x2b16 <RenderReadChipVersionPacket+0x62>
}
    2b1e:	ce 01       	movw	r24, r28
    2b20:	86 57       	subi	r24, 0x76	; 118
    2b22:	9f 4f       	sbci	r25, 0xFF	; 255
    2b24:	fc 01       	movw	r30, r24
    2b26:	80 81       	ld	r24, Z
    2b28:	91 81       	ldd	r25, Z+1	; 0x01
    2b2a:	c5 57       	subi	r28, 0x75	; 117
    2b2c:	df 4f       	sbci	r29, 0xFF	; 255
    2b2e:	cd bf       	out	0x3d, r28	; 61
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	df 91       	pop	r29
    2b34:	cf 91       	pop	r28
    2b36:	08 95       	ret

Disassembly of section .text.InitializePacket:

000032f4 <InitializePacket>:

volatile NIC_PACKET_t* InitializePacket(volatile NIC_PACKET_t* packet) {
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	00 d0       	rcall	.+0      	; 0x32fa <InitializePacket+0x6>
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
    32fe:	89 83       	std	Y+1, r24	; 0x01
    3300:	9a 83       	std	Y+2, r25	; 0x02
	packet->meta.dp_length = 0;
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	9a 81       	ldd	r25, Y+2	; 0x02
    3306:	fc 01       	movw	r30, r24
    3308:	14 82       	std	Z+4, r1	; 0x04
    330a:	15 82       	std	Z+5, r1	; 0x05
	packet->meta.packet_length = 0;
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	9a 81       	ldd	r25, Y+2	; 0x02
    3310:	fc 01       	movw	r30, r24
    3312:	12 82       	std	Z+2, r1	; 0x02
    3314:	13 82       	std	Z+3, r1	; 0x03
	packet->meta.serialNum = 0;
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	9a 81       	ldd	r25, Y+2	; 0x02
    331a:	fc 01       	movw	r30, r24
    331c:	10 82       	st	Z, r1
	packet->meta.type = NIC_PACKET_TYPE_IDLE;
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	fc 01       	movw	r30, r24
    3324:	11 82       	std	Z+1, r1	; 0x01
	memset((void *)packet->payload.data, 0, NIC_SIZE_TXBUFFER);
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	9a 81       	ldd	r25, Y+2	; 0x02
    332a:	09 96       	adiw	r24, 0x09	; 9
    332c:	40 e8       	ldi	r20, 0x80	; 128
    332e:	50 e0       	ldi	r21, 0x00	; 0
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	70 e0       	ldi	r23, 0x00	; 0
    3334:	0e 94 90 1c 	call	0x3920	; 0x3920 <memset>
	packet->payload.addr.word = 0;
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	9a 81       	ldd	r25, Y+2	; 0x02
    333c:	fc 01       	movw	r30, r24
    333e:	16 82       	std	Z+6, r1	; 0x06
    3340:	17 82       	std	Z+7, r1	; 0x07
	packet->payload.ctrl.byte = 0;
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	9a 81       	ldd	r25, Y+2	; 0x02
    3346:	fc 01       	movw	r30, r24
    3348:	10 86       	std	Z+8, r1	; 0x08
	return packet;
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    334e:	0f 90       	pop	r0
    3350:	0f 90       	pop	r0
    3352:	df 91       	pop	r29
    3354:	cf 91       	pop	r28
    3356:	08 95       	ret

Disassembly of section .text.RenderUpdateIpAddrPacket:

000021dc <RenderUpdateIpAddrPacket>:

NIC_PACKET_t RenderUpdateIpAddrPacket(NIC_SIP_t ipAddr) {
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	cf 58       	subi	r28, 0x8F	; 143
    21e6:	d1 09       	sbc	r29, r1
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	9e 01       	movw	r18, r28
    21ee:	26 57       	subi	r18, 0x76	; 118
    21f0:	3f 4f       	sbci	r19, 0xFF	; 255
    21f2:	f9 01       	movw	r30, r18
    21f4:	80 83       	st	Z, r24
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	ce 01       	movw	r24, r28
    21fa:	84 57       	subi	r24, 0x74	; 116
    21fc:	9f 4f       	sbci	r25, 0xFF	; 255
    21fe:	fc 01       	movw	r30, r24
    2200:	40 83       	st	Z, r20
    2202:	51 83       	std	Z+1, r21	; 0x01
    2204:	62 83       	std	Z+2, r22	; 0x02
    2206:	73 83       	std	Z+3, r23	; 0x03
	NIC_PACKET_t packet;
	packet.payload.addr.bytes[0] = 0x00;
    2208:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x0F;
    220a:	8f e0       	ldi	r24, 0x0F	; 15
    220c:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = 0b00000;
    220e:	89 85       	ldd	r24, Y+9	; 0x09
    2210:	87 70       	andi	r24, 0x07	; 7
    2212:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    2214:	89 85       	ldd	r24, Y+9	; 0x09
    2216:	8c 7f       	andi	r24, 0xFC	; 252
    2218:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_WRITE_bm;
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	84 60       	ori	r24, 0x04	; 4
    221e:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = ipAddr.bytewise.SIPR0;
    2220:	ce 01       	movw	r24, r28
    2222:	84 57       	subi	r24, 0x74	; 116
    2224:	9f 4f       	sbci	r25, 0xFF	; 255
    2226:	fc 01       	movw	r30, r24
    2228:	80 81       	ld	r24, Z
    222a:	8a 87       	std	Y+10, r24	; 0x0a
	packet.payload.data[1] = ipAddr.bytewise.SIPR1;
    222c:	ce 01       	movw	r24, r28
    222e:	84 57       	subi	r24, 0x74	; 116
    2230:	9f 4f       	sbci	r25, 0xFF	; 255
    2232:	fc 01       	movw	r30, r24
    2234:	81 81       	ldd	r24, Z+1	; 0x01
    2236:	8b 87       	std	Y+11, r24	; 0x0b
	packet.payload.data[2] = ipAddr.bytewise.SIPR2;
    2238:	ce 01       	movw	r24, r28
    223a:	84 57       	subi	r24, 0x74	; 116
    223c:	9f 4f       	sbci	r25, 0xFF	; 255
    223e:	fc 01       	movw	r30, r24
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	8c 87       	std	Y+12, r24	; 0x0c
	packet.payload.data[3] = ipAddr.bytewise.SIPR3;
    2244:	ce 01       	movw	r24, r28
    2246:	84 57       	subi	r24, 0x74	; 116
    2248:	9f 4f       	sbci	r25, 0xFF	; 255
    224a:	fc 01       	movw	r30, r24
    224c:	83 81       	ldd	r24, Z+3	; 0x03
    224e:	8d 87       	std	Y+13, r24	; 0x0d
	packet.meta.dp_length = 4;
    2250:	84 e0       	ldi	r24, 0x04	; 4
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 7;
    2258:	87 e0       	ldi	r24, 0x07	; 7
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	8b 83       	std	Y+3, r24	; 0x03
    225e:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_MODIFY_SIP;
    2260:	83 e2       	ldi	r24, 0x23	; 35
    2262:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    2264:	ce 01       	movw	r24, r28
    2266:	86 57       	subi	r24, 0x76	; 118
    2268:	9f 4f       	sbci	r25, 0xFF	; 255
    226a:	fc 01       	movw	r30, r24
    226c:	80 81       	ld	r24, Z
    226e:	91 81       	ldd	r25, Z+1	; 0x01
    2270:	49 e8       	ldi	r20, 0x89	; 137
    2272:	9e 01       	movw	r18, r28
    2274:	2f 5f       	subi	r18, 0xFF	; 255
    2276:	3f 4f       	sbci	r19, 0xFF	; 255
    2278:	f9 01       	movw	r30, r18
    227a:	dc 01       	movw	r26, r24
    227c:	01 90       	ld	r0, Z+
    227e:	0d 92       	st	X+, r0
    2280:	4a 95       	dec	r20
    2282:	e1 f7       	brne	.-8      	; 0x227c <RenderUpdateIpAddrPacket+0xa0>
}
    2284:	ce 01       	movw	r24, r28
    2286:	86 57       	subi	r24, 0x76	; 118
    2288:	9f 4f       	sbci	r25, 0xFF	; 255
    228a:	fc 01       	movw	r30, r24
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	c1 57       	subi	r28, 0x71	; 113
    2292:	df 4f       	sbci	r29, 0xFF	; 255
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	08 95       	ret

Disassembly of section .text.RenderReadIpAddrPacket:

0000280e <RenderReadIpAddrPacket>:

NIC_PACKET_t RenderReadIpAddrPacket() {
    280e:	cf 93       	push	r28
    2810:	df 93       	push	r29
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	cb 58       	subi	r28, 0x8B	; 139
    2818:	d1 09       	sbc	r29, r1
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	9e 01       	movw	r18, r28
    2820:	26 57       	subi	r18, 0x76	; 118
    2822:	3f 4f       	sbci	r19, 0xFF	; 255
    2824:	f9 01       	movw	r30, r18
    2826:	80 83       	st	Z, r24
    2828:	91 83       	std	Z+1, r25	; 0x01
	NIC_PACKET_t packet;
	packet.payload.addr.bytes[0] = 0x00;
    282a:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x0F;
    282c:	8f e0       	ldi	r24, 0x0F	; 15
    282e:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = 0b00000;
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	87 70       	andi	r24, 0x07	; 7
    2834:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	8c 7f       	andi	r24, 0xFC	; 252
    283a:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_READ_bm;
    283c:	89 85       	ldd	r24, Y+9	; 0x09
    283e:	8b 7f       	andi	r24, 0xFB	; 251
    2840:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = 0;
    2842:	1a 86       	std	Y+10, r1	; 0x0a
	packet.payload.data[1] = 0;
    2844:	1b 86       	std	Y+11, r1	; 0x0b
	packet.payload.data[2] = 0;
    2846:	1c 86       	std	Y+12, r1	; 0x0c
	packet.payload.data[3] = 0;
    2848:	1d 86       	std	Y+13, r1	; 0x0d
	packet.meta.dp_length = 4;
    284a:	84 e0       	ldi	r24, 0x04	; 4
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	8d 83       	std	Y+5, r24	; 0x05
    2850:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 7;
    2852:	87 e0       	ldi	r24, 0x07	; 7
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	8b 83       	std	Y+3, r24	; 0x03
    2858:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_READ_SIP;
    285a:	83 e3       	ldi	r24, 0x33	; 51
    285c:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    285e:	ce 01       	movw	r24, r28
    2860:	86 57       	subi	r24, 0x76	; 118
    2862:	9f 4f       	sbci	r25, 0xFF	; 255
    2864:	fc 01       	movw	r30, r24
    2866:	80 81       	ld	r24, Z
    2868:	91 81       	ldd	r25, Z+1	; 0x01
    286a:	49 e8       	ldi	r20, 0x89	; 137
    286c:	9e 01       	movw	r18, r28
    286e:	2f 5f       	subi	r18, 0xFF	; 255
    2870:	3f 4f       	sbci	r19, 0xFF	; 255
    2872:	f9 01       	movw	r30, r18
    2874:	dc 01       	movw	r26, r24
    2876:	01 90       	ld	r0, Z+
    2878:	0d 92       	st	X+, r0
    287a:	4a 95       	dec	r20
    287c:	e1 f7       	brne	.-8      	; 0x2876 <RenderReadIpAddrPacket+0x68>
}
    287e:	ce 01       	movw	r24, r28
    2880:	86 57       	subi	r24, 0x76	; 118
    2882:	9f 4f       	sbci	r25, 0xFF	; 255
    2884:	fc 01       	movw	r30, r24
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	c5 57       	subi	r28, 0x75	; 117
    288c:	df 4f       	sbci	r29, 0xFF	; 255
    288e:	cd bf       	out	0x3d, r28	; 61
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	08 95       	ret

Disassembly of section .text.RenderUpdateMACPacket:

000018a0 <RenderUpdateMACPacket>:

NIC_PACKET_t RenderUpdateMACPacket(NIC_SMAC_t macAddr) {
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	c1 59       	subi	r28, 0x91	; 145
    18aa:	d1 09       	sbc	r29, r1
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	fe 01       	movw	r30, r28
    18b2:	e6 57       	subi	r30, 0x76	; 118
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 83       	st	Z, r24
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	ce 01       	movw	r24, r28
    18bc:	84 57       	subi	r24, 0x74	; 116
    18be:	9f 4f       	sbci	r25, 0xFF	; 255
    18c0:	fc 01       	movw	r30, r24
    18c2:	20 83       	st	Z, r18
    18c4:	fc 01       	movw	r30, r24
    18c6:	31 83       	std	Z+1, r19	; 0x01
    18c8:	fc 01       	movw	r30, r24
    18ca:	42 83       	std	Z+2, r20	; 0x02
    18cc:	fc 01       	movw	r30, r24
    18ce:	53 83       	std	Z+3, r21	; 0x03
    18d0:	fc 01       	movw	r30, r24
    18d2:	64 83       	std	Z+4, r22	; 0x04
    18d4:	fc 01       	movw	r30, r24
    18d6:	75 83       	std	Z+5, r23	; 0x05
	NIC_PACKET_t packet;
	packet.payload.addr.bytes[0] = 0x00;
    18d8:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x09;
    18da:	89 e0       	ldi	r24, 0x09	; 9
    18dc:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = 0b00000;
    18de:	89 85       	ldd	r24, Y+9	; 0x09
    18e0:	87 70       	andi	r24, 0x07	; 7
    18e2:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    18e4:	89 85       	ldd	r24, Y+9	; 0x09
    18e6:	8c 7f       	andi	r24, 0xFC	; 252
    18e8:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_WRITE_bm;
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	84 60       	ori	r24, 0x04	; 4
    18ee:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = macAddr.bytewise.SHAR0;
    18f0:	ce 01       	movw	r24, r28
    18f2:	84 57       	subi	r24, 0x74	; 116
    18f4:	9f 4f       	sbci	r25, 0xFF	; 255
    18f6:	fc 01       	movw	r30, r24
    18f8:	80 81       	ld	r24, Z
    18fa:	8a 87       	std	Y+10, r24	; 0x0a
	packet.payload.data[1] = macAddr.bytewise.SHAR1;
    18fc:	ce 01       	movw	r24, r28
    18fe:	84 57       	subi	r24, 0x74	; 116
    1900:	9f 4f       	sbci	r25, 0xFF	; 255
    1902:	fc 01       	movw	r30, r24
    1904:	81 81       	ldd	r24, Z+1	; 0x01
    1906:	8b 87       	std	Y+11, r24	; 0x0b
	packet.payload.data[2] = macAddr.bytewise.SHAR2;
    1908:	ce 01       	movw	r24, r28
    190a:	84 57       	subi	r24, 0x74	; 116
    190c:	9f 4f       	sbci	r25, 0xFF	; 255
    190e:	fc 01       	movw	r30, r24
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	8c 87       	std	Y+12, r24	; 0x0c
	packet.payload.data[3] = macAddr.bytewise.SHAR3;
    1914:	ce 01       	movw	r24, r28
    1916:	84 57       	subi	r24, 0x74	; 116
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	fc 01       	movw	r30, r24
    191c:	83 81       	ldd	r24, Z+3	; 0x03
    191e:	8d 87       	std	Y+13, r24	; 0x0d
	packet.payload.data[4] = macAddr.bytewise.SHAR4;
    1920:	ce 01       	movw	r24, r28
    1922:	84 57       	subi	r24, 0x74	; 116
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	fc 01       	movw	r30, r24
    1928:	84 81       	ldd	r24, Z+4	; 0x04
    192a:	8e 87       	std	Y+14, r24	; 0x0e
	packet.payload.data[5] = macAddr.bytewise.SHAR5;
    192c:	ce 01       	movw	r24, r28
    192e:	84 57       	subi	r24, 0x74	; 116
    1930:	9f 4f       	sbci	r25, 0xFF	; 255
    1932:	fc 01       	movw	r30, r24
    1934:	85 81       	ldd	r24, Z+5	; 0x05
    1936:	8f 87       	std	Y+15, r24	; 0x0f
	packet.meta.dp_length = 6;
    1938:	86 e0       	ldi	r24, 0x06	; 6
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	8d 83       	std	Y+5, r24	; 0x05
    193e:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 9;
    1940:	89 e0       	ldi	r24, 0x09	; 9
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	8b 83       	std	Y+3, r24	; 0x03
    1946:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_MODIFY_SMAC;
    1948:	82 e2       	ldi	r24, 0x22	; 34
    194a:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    194c:	ce 01       	movw	r24, r28
    194e:	86 57       	subi	r24, 0x76	; 118
    1950:	9f 4f       	sbci	r25, 0xFF	; 255
    1952:	fc 01       	movw	r30, r24
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	49 e8       	ldi	r20, 0x89	; 137
    195a:	9e 01       	movw	r18, r28
    195c:	2f 5f       	subi	r18, 0xFF	; 255
    195e:	3f 4f       	sbci	r19, 0xFF	; 255
    1960:	f9 01       	movw	r30, r18
    1962:	dc 01       	movw	r26, r24
    1964:	01 90       	ld	r0, Z+
    1966:	0d 92       	st	X+, r0
    1968:	4a 95       	dec	r20
    196a:	e1 f7       	brne	.-8      	; 0x1964 <RenderUpdateMACPacket+0xc4>
}
    196c:	ce 01       	movw	r24, r28
    196e:	86 57       	subi	r24, 0x76	; 118
    1970:	9f 4f       	sbci	r25, 0xFF	; 255
    1972:	fc 01       	movw	r30, r24
    1974:	80 81       	ld	r24, Z
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	cf 56       	subi	r28, 0x6F	; 111
    197a:	df 4f       	sbci	r29, 0xFF	; 255
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	08 95       	ret

Disassembly of section .text.RenderReadMACPacket:

00002780 <RenderReadMACPacket>:

NIC_PACKET_t RenderReadMACPacket() {
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	cb 58       	subi	r28, 0x8B	; 139
    278a:	d1 09       	sbc	r29, r1
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	9e 01       	movw	r18, r28
    2792:	26 57       	subi	r18, 0x76	; 118
    2794:	3f 4f       	sbci	r19, 0xFF	; 255
    2796:	f9 01       	movw	r30, r18
    2798:	80 83       	st	Z, r24
    279a:	91 83       	std	Z+1, r25	; 0x01
	NIC_PACKET_t packet;
	packet.payload.addr.bytes[0] = 0x00;
    279c:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x09;
    279e:	89 e0       	ldi	r24, 0x09	; 9
    27a0:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = 0b00000;
    27a2:	89 85       	ldd	r24, Y+9	; 0x09
    27a4:	87 70       	andi	r24, 0x07	; 7
    27a6:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    27a8:	89 85       	ldd	r24, Y+9	; 0x09
    27aa:	8c 7f       	andi	r24, 0xFC	; 252
    27ac:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_READ_bm;
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	8b 7f       	andi	r24, 0xFB	; 251
    27b2:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = 0;
    27b4:	1a 86       	std	Y+10, r1	; 0x0a
	packet.payload.data[1] = 0;
    27b6:	1b 86       	std	Y+11, r1	; 0x0b
	packet.payload.data[2] = 0;
    27b8:	1c 86       	std	Y+12, r1	; 0x0c
	packet.payload.data[3] = 0;
    27ba:	1d 86       	std	Y+13, r1	; 0x0d
	packet.payload.data[4] = 0;
    27bc:	1e 86       	std	Y+14, r1	; 0x0e
	packet.payload.data[5] = 0;
    27be:	1f 86       	std	Y+15, r1	; 0x0f
	packet.meta.dp_length = 6;
    27c0:	86 e0       	ldi	r24, 0x06	; 6
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	8d 83       	std	Y+5, r24	; 0x05
    27c6:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 9;
    27c8:	89 e0       	ldi	r24, 0x09	; 9
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	8b 83       	std	Y+3, r24	; 0x03
    27ce:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_READ_SMAC;
    27d0:	82 e3       	ldi	r24, 0x32	; 50
    27d2:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    27d4:	ce 01       	movw	r24, r28
    27d6:	86 57       	subi	r24, 0x76	; 118
    27d8:	9f 4f       	sbci	r25, 0xFF	; 255
    27da:	fc 01       	movw	r30, r24
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	49 e8       	ldi	r20, 0x89	; 137
    27e2:	9e 01       	movw	r18, r28
    27e4:	2f 5f       	subi	r18, 0xFF	; 255
    27e6:	3f 4f       	sbci	r19, 0xFF	; 255
    27e8:	f9 01       	movw	r30, r18
    27ea:	dc 01       	movw	r26, r24
    27ec:	01 90       	ld	r0, Z+
    27ee:	0d 92       	st	X+, r0
    27f0:	4a 95       	dec	r20
    27f2:	e1 f7       	brne	.-8      	; 0x27ec <RenderReadMACPacket+0x6c>
}
    27f4:	ce 01       	movw	r24, r28
    27f6:	86 57       	subi	r24, 0x76	; 118
    27f8:	9f 4f       	sbci	r25, 0xFF	; 255
    27fa:	fc 01       	movw	r30, r24
    27fc:	80 81       	ld	r24, Z
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	c5 57       	subi	r28, 0x75	; 117
    2802:	df 4f       	sbci	r29, 0xFF	; 255
    2804:	cd bf       	out	0x3d, r28	; 61
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	08 95       	ret

Disassembly of section .text.RenderUpdateGatewayPacket:

0000229e <RenderUpdateGatewayPacket>:

NIC_PACKET_t RenderUpdateGatewayPacket(NIC_GATEWAY_t gateway) {
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	cf 58       	subi	r28, 0x8F	; 143
    22a8:	d1 09       	sbc	r29, r1
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	9e 01       	movw	r18, r28
    22b0:	26 57       	subi	r18, 0x76	; 118
    22b2:	3f 4f       	sbci	r19, 0xFF	; 255
    22b4:	f9 01       	movw	r30, r18
    22b6:	80 83       	st	Z, r24
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	ce 01       	movw	r24, r28
    22bc:	84 57       	subi	r24, 0x74	; 116
    22be:	9f 4f       	sbci	r25, 0xFF	; 255
    22c0:	fc 01       	movw	r30, r24
    22c2:	40 83       	st	Z, r20
    22c4:	51 83       	std	Z+1, r21	; 0x01
    22c6:	62 83       	std	Z+2, r22	; 0x02
    22c8:	73 83       	std	Z+3, r23	; 0x03
	NIC_PACKET_t packet;
	packet.payload.addr.bytes[0] = 0x00;
    22ca:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x01;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = 0b00000;
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	87 70       	andi	r24, 0x07	; 7
    22d4:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    22d6:	89 85       	ldd	r24, Y+9	; 0x09
    22d8:	8c 7f       	andi	r24, 0xFC	; 252
    22da:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_WRITE_bm;
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	84 60       	ori	r24, 0x04	; 4
    22e0:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = gateway.bytewise.GAR0;
    22e2:	ce 01       	movw	r24, r28
    22e4:	84 57       	subi	r24, 0x74	; 116
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
    22e8:	fc 01       	movw	r30, r24
    22ea:	80 81       	ld	r24, Z
    22ec:	8a 87       	std	Y+10, r24	; 0x0a
	packet.payload.data[1] = gateway.bytewise.GAR1;
    22ee:	ce 01       	movw	r24, r28
    22f0:	84 57       	subi	r24, 0x74	; 116
    22f2:	9f 4f       	sbci	r25, 0xFF	; 255
    22f4:	fc 01       	movw	r30, r24
    22f6:	81 81       	ldd	r24, Z+1	; 0x01
    22f8:	8b 87       	std	Y+11, r24	; 0x0b
	packet.payload.data[2] = gateway.bytewise.GAR2;
    22fa:	ce 01       	movw	r24, r28
    22fc:	84 57       	subi	r24, 0x74	; 116
    22fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2300:	fc 01       	movw	r30, r24
    2302:	82 81       	ldd	r24, Z+2	; 0x02
    2304:	8c 87       	std	Y+12, r24	; 0x0c
	packet.payload.data[3] = gateway.bytewise.GAR3;
    2306:	ce 01       	movw	r24, r28
    2308:	84 57       	subi	r24, 0x74	; 116
    230a:	9f 4f       	sbci	r25, 0xFF	; 255
    230c:	fc 01       	movw	r30, r24
    230e:	83 81       	ldd	r24, Z+3	; 0x03
    2310:	8d 87       	std	Y+13, r24	; 0x0d
	packet.meta.dp_length = 4;
    2312:	84 e0       	ldi	r24, 0x04	; 4
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	8d 83       	std	Y+5, r24	; 0x05
    2318:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 7;
    231a:	87 e0       	ldi	r24, 0x07	; 7
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	8b 83       	std	Y+3, r24	; 0x03
    2320:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_MODIFY_GATEWAY;
    2322:	80 e2       	ldi	r24, 0x20	; 32
    2324:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    2326:	ce 01       	movw	r24, r28
    2328:	86 57       	subi	r24, 0x76	; 118
    232a:	9f 4f       	sbci	r25, 0xFF	; 255
    232c:	fc 01       	movw	r30, r24
    232e:	80 81       	ld	r24, Z
    2330:	91 81       	ldd	r25, Z+1	; 0x01
    2332:	49 e8       	ldi	r20, 0x89	; 137
    2334:	9e 01       	movw	r18, r28
    2336:	2f 5f       	subi	r18, 0xFF	; 255
    2338:	3f 4f       	sbci	r19, 0xFF	; 255
    233a:	f9 01       	movw	r30, r18
    233c:	dc 01       	movw	r26, r24
    233e:	01 90       	ld	r0, Z+
    2340:	0d 92       	st	X+, r0
    2342:	4a 95       	dec	r20
    2344:	e1 f7       	brne	.-8      	; 0x233e <RenderUpdateGatewayPacket+0xa0>
}
    2346:	ce 01       	movw	r24, r28
    2348:	86 57       	subi	r24, 0x76	; 118
    234a:	9f 4f       	sbci	r25, 0xFF	; 255
    234c:	fc 01       	movw	r30, r24
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	c1 57       	subi	r28, 0x71	; 113
    2354:	df 4f       	sbci	r29, 0xFF	; 255
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	08 95       	ret

Disassembly of section .text.RenderReadGatewayPacket:

00002898 <RenderReadGatewayPacket>:

NIC_PACKET_t RenderReadGatewayPacket() {
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	cb 58       	subi	r28, 0x8B	; 139
    28a2:	d1 09       	sbc	r29, r1
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	9e 01       	movw	r18, r28
    28aa:	26 57       	subi	r18, 0x76	; 118
    28ac:	3f 4f       	sbci	r19, 0xFF	; 255
    28ae:	f9 01       	movw	r30, r18
    28b0:	80 83       	st	Z, r24
    28b2:	91 83       	std	Z+1, r25	; 0x01
	NIC_PACKET_t packet;
	packet.payload.addr.bytes[0] = 0x00;
    28b4:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x01;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = 0b00000;
    28ba:	89 85       	ldd	r24, Y+9	; 0x09
    28bc:	87 70       	andi	r24, 0x07	; 7
    28be:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    28c0:	89 85       	ldd	r24, Y+9	; 0x09
    28c2:	8c 7f       	andi	r24, 0xFC	; 252
    28c4:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_READ_bm;
    28c6:	89 85       	ldd	r24, Y+9	; 0x09
    28c8:	8b 7f       	andi	r24, 0xFB	; 251
    28ca:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = 0;
    28cc:	1a 86       	std	Y+10, r1	; 0x0a
	packet.payload.data[1] = 0;
    28ce:	1b 86       	std	Y+11, r1	; 0x0b
	packet.payload.data[2] = 0;
    28d0:	1c 86       	std	Y+12, r1	; 0x0c
	packet.payload.data[3] = 0;
    28d2:	1d 86       	std	Y+13, r1	; 0x0d
	packet.meta.dp_length = 4;
    28d4:	84 e0       	ldi	r24, 0x04	; 4
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	8d 83       	std	Y+5, r24	; 0x05
    28da:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 7;
    28dc:	87 e0       	ldi	r24, 0x07	; 7
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	8b 83       	std	Y+3, r24	; 0x03
    28e2:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_READ_GATEWAY;
    28e4:	80 e3       	ldi	r24, 0x30	; 48
    28e6:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    28e8:	ce 01       	movw	r24, r28
    28ea:	86 57       	subi	r24, 0x76	; 118
    28ec:	9f 4f       	sbci	r25, 0xFF	; 255
    28ee:	fc 01       	movw	r30, r24
    28f0:	80 81       	ld	r24, Z
    28f2:	91 81       	ldd	r25, Z+1	; 0x01
    28f4:	49 e8       	ldi	r20, 0x89	; 137
    28f6:	9e 01       	movw	r18, r28
    28f8:	2f 5f       	subi	r18, 0xFF	; 255
    28fa:	3f 4f       	sbci	r19, 0xFF	; 255
    28fc:	f9 01       	movw	r30, r18
    28fe:	dc 01       	movw	r26, r24
    2900:	01 90       	ld	r0, Z+
    2902:	0d 92       	st	X+, r0
    2904:	4a 95       	dec	r20
    2906:	e1 f7       	brne	.-8      	; 0x2900 <RenderReadGatewayPacket+0x68>
}
    2908:	ce 01       	movw	r24, r28
    290a:	86 57       	subi	r24, 0x76	; 118
    290c:	9f 4f       	sbci	r25, 0xFF	; 255
    290e:	fc 01       	movw	r30, r24
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	c5 57       	subi	r28, 0x75	; 117
    2916:	df 4f       	sbci	r29, 0xFF	; 255
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	08 95       	ret

Disassembly of section .text.RenderUpdateSubnetMaskPacket:

00002360 <RenderUpdateSubnetMaskPacket>:

NIC_PACKET_t RenderUpdateSubnetMaskPacket(NIC_SUBNETMASK_t subnetMask) {
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	cf 58       	subi	r28, 0x8F	; 143
    236a:	d1 09       	sbc	r29, r1
    236c:	cd bf       	out	0x3d, r28	; 61
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	9e 01       	movw	r18, r28
    2372:	26 57       	subi	r18, 0x76	; 118
    2374:	3f 4f       	sbci	r19, 0xFF	; 255
    2376:	f9 01       	movw	r30, r18
    2378:	80 83       	st	Z, r24
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	ce 01       	movw	r24, r28
    237e:	84 57       	subi	r24, 0x74	; 116
    2380:	9f 4f       	sbci	r25, 0xFF	; 255
    2382:	fc 01       	movw	r30, r24
    2384:	40 83       	st	Z, r20
    2386:	51 83       	std	Z+1, r21	; 0x01
    2388:	62 83       	std	Z+2, r22	; 0x02
    238a:	73 83       	std	Z+3, r23	; 0x03
	NIC_PACKET_t packet;
	packet.payload.addr.bytes[0] = 0x00;
    238c:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x05;
    238e:	85 e0       	ldi	r24, 0x05	; 5
    2390:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = 0b00000;
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	87 70       	andi	r24, 0x07	; 7
    2396:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    2398:	89 85       	ldd	r24, Y+9	; 0x09
    239a:	8c 7f       	andi	r24, 0xFC	; 252
    239c:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_WRITE_bm;
    239e:	89 85       	ldd	r24, Y+9	; 0x09
    23a0:	84 60       	ori	r24, 0x04	; 4
    23a2:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = subnetMask.bytewise.SUBR0;
    23a4:	ce 01       	movw	r24, r28
    23a6:	84 57       	subi	r24, 0x74	; 116
    23a8:	9f 4f       	sbci	r25, 0xFF	; 255
    23aa:	fc 01       	movw	r30, r24
    23ac:	80 81       	ld	r24, Z
    23ae:	8a 87       	std	Y+10, r24	; 0x0a
	packet.payload.data[1] = subnetMask.bytewise.SUBR1;
    23b0:	ce 01       	movw	r24, r28
    23b2:	84 57       	subi	r24, 0x74	; 116
    23b4:	9f 4f       	sbci	r25, 0xFF	; 255
    23b6:	fc 01       	movw	r30, r24
    23b8:	81 81       	ldd	r24, Z+1	; 0x01
    23ba:	8b 87       	std	Y+11, r24	; 0x0b
	packet.payload.data[2] = subnetMask.bytewise.SUBR2;
    23bc:	ce 01       	movw	r24, r28
    23be:	84 57       	subi	r24, 0x74	; 116
    23c0:	9f 4f       	sbci	r25, 0xFF	; 255
    23c2:	fc 01       	movw	r30, r24
    23c4:	82 81       	ldd	r24, Z+2	; 0x02
    23c6:	8c 87       	std	Y+12, r24	; 0x0c
	packet.payload.data[3] = subnetMask.bytewise.SUBR3;
    23c8:	ce 01       	movw	r24, r28
    23ca:	84 57       	subi	r24, 0x74	; 116
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	fc 01       	movw	r30, r24
    23d0:	83 81       	ldd	r24, Z+3	; 0x03
    23d2:	8d 87       	std	Y+13, r24	; 0x0d
	packet.meta.dp_length = 4;
    23d4:	84 e0       	ldi	r24, 0x04	; 4
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	8d 83       	std	Y+5, r24	; 0x05
    23da:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 7;
    23dc:	87 e0       	ldi	r24, 0x07	; 7
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	8b 83       	std	Y+3, r24	; 0x03
    23e2:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_MODIFY_SUBMASK;
    23e4:	81 e2       	ldi	r24, 0x21	; 33
    23e6:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    23e8:	ce 01       	movw	r24, r28
    23ea:	86 57       	subi	r24, 0x76	; 118
    23ec:	9f 4f       	sbci	r25, 0xFF	; 255
    23ee:	fc 01       	movw	r30, r24
    23f0:	80 81       	ld	r24, Z
    23f2:	91 81       	ldd	r25, Z+1	; 0x01
    23f4:	49 e8       	ldi	r20, 0x89	; 137
    23f6:	9e 01       	movw	r18, r28
    23f8:	2f 5f       	subi	r18, 0xFF	; 255
    23fa:	3f 4f       	sbci	r19, 0xFF	; 255
    23fc:	f9 01       	movw	r30, r18
    23fe:	dc 01       	movw	r26, r24
    2400:	01 90       	ld	r0, Z+
    2402:	0d 92       	st	X+, r0
    2404:	4a 95       	dec	r20
    2406:	e1 f7       	brne	.-8      	; 0x2400 <RenderUpdateSubnetMaskPacket+0xa0>
}
    2408:	ce 01       	movw	r24, r28
    240a:	86 57       	subi	r24, 0x76	; 118
    240c:	9f 4f       	sbci	r25, 0xFF	; 255
    240e:	fc 01       	movw	r30, r24
    2410:	80 81       	ld	r24, Z
    2412:	91 81       	ldd	r25, Z+1	; 0x01
    2414:	c1 57       	subi	r28, 0x71	; 113
    2416:	df 4f       	sbci	r29, 0xFF	; 255
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	08 95       	ret

Disassembly of section .text.RenderReadSubnetMaskPacket:

00002922 <RenderReadSubnetMaskPacket>:

NIC_PACKET_t RenderReadSubnetMaskPacket() {
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	cb 58       	subi	r28, 0x8B	; 139
    292c:	d1 09       	sbc	r29, r1
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	9e 01       	movw	r18, r28
    2934:	26 57       	subi	r18, 0x76	; 118
    2936:	3f 4f       	sbci	r19, 0xFF	; 255
    2938:	f9 01       	movw	r30, r18
    293a:	80 83       	st	Z, r24
    293c:	91 83       	std	Z+1, r25	; 0x01
	NIC_PACKET_t packet;
	packet.payload.addr.bytes[0] = 0x00;
    293e:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x05;
    2940:	85 e0       	ldi	r24, 0x05	; 5
    2942:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = 0b00000;
    2944:	89 85       	ldd	r24, Y+9	; 0x09
    2946:	87 70       	andi	r24, 0x07	; 7
    2948:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    294a:	89 85       	ldd	r24, Y+9	; 0x09
    294c:	8c 7f       	andi	r24, 0xFC	; 252
    294e:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_READ_bm;
    2950:	89 85       	ldd	r24, Y+9	; 0x09
    2952:	8b 7f       	andi	r24, 0xFB	; 251
    2954:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = 0;
    2956:	1a 86       	std	Y+10, r1	; 0x0a
	packet.payload.data[1] = 0;
    2958:	1b 86       	std	Y+11, r1	; 0x0b
	packet.payload.data[2] = 0;
    295a:	1c 86       	std	Y+12, r1	; 0x0c
	packet.payload.data[3] = 0;
    295c:	1d 86       	std	Y+13, r1	; 0x0d
	packet.meta.dp_length = 4;
    295e:	84 e0       	ldi	r24, 0x04	; 4
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	8d 83       	std	Y+5, r24	; 0x05
    2964:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 7;
    2966:	87 e0       	ldi	r24, 0x07	; 7
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	8b 83       	std	Y+3, r24	; 0x03
    296c:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_READ_SUBMASK;
    296e:	81 e3       	ldi	r24, 0x31	; 49
    2970:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    2972:	ce 01       	movw	r24, r28
    2974:	86 57       	subi	r24, 0x76	; 118
    2976:	9f 4f       	sbci	r25, 0xFF	; 255
    2978:	fc 01       	movw	r30, r24
    297a:	80 81       	ld	r24, Z
    297c:	91 81       	ldd	r25, Z+1	; 0x01
    297e:	49 e8       	ldi	r20, 0x89	; 137
    2980:	9e 01       	movw	r18, r28
    2982:	2f 5f       	subi	r18, 0xFF	; 255
    2984:	3f 4f       	sbci	r19, 0xFF	; 255
    2986:	f9 01       	movw	r30, r18
    2988:	dc 01       	movw	r26, r24
    298a:	01 90       	ld	r0, Z+
    298c:	0d 92       	st	X+, r0
    298e:	4a 95       	dec	r20
    2990:	e1 f7       	brne	.-8      	; 0x298a <RenderReadSubnetMaskPacket+0x68>
}
    2992:	ce 01       	movw	r24, r28
    2994:	86 57       	subi	r24, 0x76	; 118
    2996:	9f 4f       	sbci	r25, 0xFF	; 255
    2998:	fc 01       	movw	r30, r24
    299a:	80 81       	ld	r24, Z
    299c:	91 81       	ldd	r25, Z+1	; 0x01
    299e:	c5 57       	subi	r28, 0x75	; 117
    29a0:	df 4f       	sbci	r29, 0xFF	; 255
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	df 91       	pop	r29
    29a8:	cf 91       	pop	r28
    29aa:	08 95       	ret

Disassembly of section .text.RenderUpdateSocketModePacket:

00001f7e <RenderUpdateSocketModePacket>:

NIC_PACKET_t RenderUpdateSocketModePacket(uint8_t sock_num, NIC_SOCKET_MR_t mode) {
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	cd 58       	subi	r28, 0x8D	; 141
    1f88:	d1 09       	sbc	r29, r1
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	9e 01       	movw	r18, r28
    1f90:	26 57       	subi	r18, 0x76	; 118
    1f92:	3f 4f       	sbci	r19, 0xFF	; 255
    1f94:	f9 01       	movw	r30, r18
    1f96:	80 83       	st	Z, r24
    1f98:	91 83       	std	Z+1, r25	; 0x01
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	84 57       	subi	r24, 0x74	; 116
    1f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	60 83       	st	Z, r22
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	83 57       	subi	r24, 0x73	; 115
    1fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1faa:	fc 01       	movw	r30, r24
    1fac:	40 83       	st	Z, r20
	NIC_PACKET_t packet;
	if (sock_num >= NIC_SOCKET_COUNT) {
    1fae:	ce 01       	movw	r24, r28
    1fb0:	84 57       	subi	r24, 0x74	; 116
    1fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	80 81       	ld	r24, Z
    1fb8:	88 30       	cpi	r24, 0x08	; 8
    1fba:	88 f0       	brcs	.+34     	; 0x1fde <RenderUpdateSocketModePacket+0x60>
		return packet;
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	86 57       	subi	r24, 0x76	; 118
    1fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	80 81       	ld	r24, Z
    1fc6:	91 81       	ldd	r25, Z+1	; 0x01
    1fc8:	49 e8       	ldi	r20, 0x89	; 137
    1fca:	9e 01       	movw	r18, r28
    1fcc:	2f 5f       	subi	r18, 0xFF	; 255
    1fce:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd0:	f9 01       	movw	r30, r18
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	01 90       	ld	r0, Z+
    1fd6:	0d 92       	st	X+, r0
    1fd8:	4a 95       	dec	r20
    1fda:	e1 f7       	brne	.-8      	; 0x1fd4 <RenderUpdateSocketModePacket+0x56>
    1fdc:	2c c0       	rjmp	.+88     	; 0x2036 <RenderUpdateSocketModePacket+0xb8>
	}
	
	packet.payload.addr.bytes[0] = 0x00;
    1fde:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x00;
    1fe0:	18 86       	std	Y+8, r1	; 0x08
	packet.payload.ctrl.bits.BSB = NIC_BS_SOCKET1_REGISTER;
    1fe2:	89 85       	ldd	r24, Y+9	; 0x09
    1fe4:	87 70       	andi	r24, 0x07	; 7
    1fe6:	88 62       	ori	r24, 0x28	; 40
    1fe8:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    1fea:	89 85       	ldd	r24, Y+9	; 0x09
    1fec:	8c 7f       	andi	r24, 0xFC	; 252
    1fee:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_WRITE_bm;
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	84 60       	ori	r24, 0x04	; 4
    1ff4:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = mode.byte;
    1ff6:	ce 01       	movw	r24, r28
    1ff8:	83 57       	subi	r24, 0x73	; 115
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	80 81       	ld	r24, Z
    2000:	8a 87       	std	Y+10, r24	; 0x0a
	packet.meta.dp_length = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	8d 83       	std	Y+5, r24	; 0x05
    2008:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 4;
    200a:	84 e0       	ldi	r24, 0x04	; 4
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	8b 83       	std	Y+3, r24	; 0x03
    2010:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_MODIFY_MODE;
    2012:	8f e1       	ldi	r24, 0x1F	; 31
    2014:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    2016:	ce 01       	movw	r24, r28
    2018:	86 57       	subi	r24, 0x76	; 118
    201a:	9f 4f       	sbci	r25, 0xFF	; 255
    201c:	fc 01       	movw	r30, r24
    201e:	80 81       	ld	r24, Z
    2020:	91 81       	ldd	r25, Z+1	; 0x01
    2022:	49 e8       	ldi	r20, 0x89	; 137
    2024:	9e 01       	movw	r18, r28
    2026:	2f 5f       	subi	r18, 0xFF	; 255
    2028:	3f 4f       	sbci	r19, 0xFF	; 255
    202a:	f9 01       	movw	r30, r18
    202c:	dc 01       	movw	r26, r24
    202e:	01 90       	ld	r0, Z+
    2030:	0d 92       	st	X+, r0
    2032:	4a 95       	dec	r20
    2034:	e1 f7       	brne	.-8      	; 0x202e <RenderUpdateSocketModePacket+0xb0>
}
    2036:	ce 01       	movw	r24, r28
    2038:	86 57       	subi	r24, 0x76	; 118
    203a:	9f 4f       	sbci	r25, 0xFF	; 255
    203c:	fc 01       	movw	r30, r24
    203e:	80 81       	ld	r24, Z
    2040:	91 81       	ldd	r25, Z+1	; 0x01
    2042:	c3 57       	subi	r28, 0x73	; 115
    2044:	df 4f       	sbci	r29, 0xFF	; 255
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	08 95       	ret

Disassembly of section .text.RenderSocketCmdPacket:

00001dd6 <RenderSocketCmdPacket>:

NIC_PACKET_t RenderSocketCmdPacket(uint8_t sock_num, NIC_SOCKET_CR_t cmd) {
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	cd 58       	subi	r28, 0x8D	; 141
    1de0:	d1 09       	sbc	r29, r1
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	9e 01       	movw	r18, r28
    1de8:	26 57       	subi	r18, 0x76	; 118
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	f9 01       	movw	r30, r18
    1dee:	80 83       	st	Z, r24
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	ce 01       	movw	r24, r28
    1df4:	84 57       	subi	r24, 0x74	; 116
    1df6:	9f 4f       	sbci	r25, 0xFF	; 255
    1df8:	fc 01       	movw	r30, r24
    1dfa:	60 83       	st	Z, r22
    1dfc:	ce 01       	movw	r24, r28
    1dfe:	83 57       	subi	r24, 0x73	; 115
    1e00:	9f 4f       	sbci	r25, 0xFF	; 255
    1e02:	fc 01       	movw	r30, r24
    1e04:	40 83       	st	Z, r20
	NIC_PACKET_t packet;
	if (sock_num >= NIC_SOCKET_COUNT) {
    1e06:	ce 01       	movw	r24, r28
    1e08:	84 57       	subi	r24, 0x74	; 116
    1e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 30       	cpi	r24, 0x08	; 8
    1e12:	88 f0       	brcs	.+34     	; 0x1e36 <RenderSocketCmdPacket+0x60>
		return packet;
    1e14:	ce 01       	movw	r24, r28
    1e16:	86 57       	subi	r24, 0x76	; 118
    1e18:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	49 e8       	ldi	r20, 0x89	; 137
    1e22:	9e 01       	movw	r18, r28
    1e24:	2f 5f       	subi	r18, 0xFF	; 255
    1e26:	3f 4f       	sbci	r19, 0xFF	; 255
    1e28:	f9 01       	movw	r30, r18
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	01 90       	ld	r0, Z+
    1e2e:	0d 92       	st	X+, r0
    1e30:	4a 95       	dec	r20
    1e32:	e1 f7       	brne	.-8      	; 0x1e2c <RenderSocketCmdPacket+0x56>
    1e34:	2d c0       	rjmp	.+90     	; 0x1e90 <RenderSocketCmdPacket+0xba>
	}
		
	packet.payload.addr.bytes[0] = 0x00;
    1e36:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x01;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = NIC_BS_SOCKET1_REGISTER;
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	87 70       	andi	r24, 0x07	; 7
    1e40:	88 62       	ori	r24, 0x28	; 40
    1e42:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	8c 7f       	andi	r24, 0xFC	; 252
    1e48:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_WRITE_bm;
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	84 60       	ori	r24, 0x04	; 4
    1e4e:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = cmd;
    1e50:	ce 01       	movw	r24, r28
    1e52:	83 57       	subi	r24, 0x73	; 115
    1e54:	9f 4f       	sbci	r25, 0xFF	; 255
    1e56:	fc 01       	movw	r30, r24
    1e58:	80 81       	ld	r24, Z
    1e5a:	8a 87       	std	Y+10, r24	; 0x0a
	packet.meta.dp_length = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	8d 83       	std	Y+5, r24	; 0x05
    1e62:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 4;
    1e64:	84 e0       	ldi	r24, 0x04	; 4
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	8b 83       	std	Y+3, r24	; 0x03
    1e6a:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_CMD;
    1e6c:	8d e1       	ldi	r24, 0x1D	; 29
    1e6e:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    1e70:	ce 01       	movw	r24, r28
    1e72:	86 57       	subi	r24, 0x76	; 118
    1e74:	9f 4f       	sbci	r25, 0xFF	; 255
    1e76:	fc 01       	movw	r30, r24
    1e78:	80 81       	ld	r24, Z
    1e7a:	91 81       	ldd	r25, Z+1	; 0x01
    1e7c:	49 e8       	ldi	r20, 0x89	; 137
    1e7e:	9e 01       	movw	r18, r28
    1e80:	2f 5f       	subi	r18, 0xFF	; 255
    1e82:	3f 4f       	sbci	r19, 0xFF	; 255
    1e84:	f9 01       	movw	r30, r18
    1e86:	dc 01       	movw	r26, r24
    1e88:	01 90       	ld	r0, Z+
    1e8a:	0d 92       	st	X+, r0
    1e8c:	4a 95       	dec	r20
    1e8e:	e1 f7       	brne	.-8      	; 0x1e88 <RenderSocketCmdPacket+0xb2>
}
    1e90:	ce 01       	movw	r24, r28
    1e92:	86 57       	subi	r24, 0x76	; 118
    1e94:	9f 4f       	sbci	r25, 0xFF	; 255
    1e96:	fc 01       	movw	r30, r24
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	c3 57       	subi	r28, 0x73	; 115
    1e9e:	df 4f       	sbci	r29, 0xFF	; 255
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	08 95       	ret

Disassembly of section .text.RenderUpdateSocketSPortPacket:

00001986 <RenderUpdateSocketSPortPacket>:

NIC_PACKET_t RenderUpdateSocketSPortPacket(uint8_t sock_num, NIC_SPORT_t sock_sport) {
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	ce 58       	subi	r28, 0x8E	; 142
    1990:	d1 09       	sbc	r29, r1
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	9e 01       	movw	r18, r28
    1998:	26 57       	subi	r18, 0x76	; 118
    199a:	3f 4f       	sbci	r19, 0xFF	; 255
    199c:	f9 01       	movw	r30, r18
    199e:	80 83       	st	Z, r24
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	ce 01       	movw	r24, r28
    19a4:	84 57       	subi	r24, 0x74	; 116
    19a6:	9f 4f       	sbci	r25, 0xFF	; 255
    19a8:	fc 01       	movw	r30, r24
    19aa:	60 83       	st	Z, r22
    19ac:	ce 01       	movw	r24, r28
    19ae:	83 57       	subi	r24, 0x73	; 115
    19b0:	9f 4f       	sbci	r25, 0xFF	; 255
    19b2:	fc 01       	movw	r30, r24
    19b4:	40 83       	st	Z, r20
    19b6:	51 83       	std	Z+1, r21	; 0x01
	NIC_PACKET_t packet;
	if (sock_num >= NIC_SOCKET_COUNT) {
    19b8:	ce 01       	movw	r24, r28
    19ba:	84 57       	subi	r24, 0x74	; 116
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	fc 01       	movw	r30, r24
    19c0:	80 81       	ld	r24, Z
    19c2:	88 30       	cpi	r24, 0x08	; 8
    19c4:	88 f0       	brcs	.+34     	; 0x19e8 <RenderUpdateSocketSPortPacket+0x62>
		return packet;
    19c6:	ce 01       	movw	r24, r28
    19c8:	86 57       	subi	r24, 0x76	; 118
    19ca:	9f 4f       	sbci	r25, 0xFF	; 255
    19cc:	fc 01       	movw	r30, r24
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	49 e8       	ldi	r20, 0x89	; 137
    19d4:	9e 01       	movw	r18, r28
    19d6:	2f 5f       	subi	r18, 0xFF	; 255
    19d8:	3f 4f       	sbci	r19, 0xFF	; 255
    19da:	f9 01       	movw	r30, r18
    19dc:	dc 01       	movw	r26, r24
    19de:	01 90       	ld	r0, Z+
    19e0:	0d 92       	st	X+, r0
    19e2:	4a 95       	dec	r20
    19e4:	e1 f7       	brne	.-8      	; 0x19de <RenderUpdateSocketSPortPacket+0x58>
    19e6:	33 c0       	rjmp	.+102    	; 0x1a4e <RenderUpdateSocketSPortPacket+0xc8>
	}
	
	packet.payload.addr.bytes[0] = 0x00;
    19e8:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x04;	
    19ea:	84 e0       	ldi	r24, 0x04	; 4
    19ec:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = NIC_BS_SOCKET1_REGISTER;
    19ee:	89 85       	ldd	r24, Y+9	; 0x09
    19f0:	87 70       	andi	r24, 0x07	; 7
    19f2:	88 62       	ori	r24, 0x28	; 40
    19f4:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    19f6:	89 85       	ldd	r24, Y+9	; 0x09
    19f8:	8c 7f       	andi	r24, 0xFC	; 252
    19fa:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_WRITE_bm;
    19fc:	89 85       	ldd	r24, Y+9	; 0x09
    19fe:	84 60       	ori	r24, 0x04	; 4
    1a00:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = sock_sport.bytewise.SPORTR0;
    1a02:	ce 01       	movw	r24, r28
    1a04:	83 57       	subi	r24, 0x73	; 115
    1a06:	9f 4f       	sbci	r25, 0xFF	; 255
    1a08:	fc 01       	movw	r30, r24
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8a 87       	std	Y+10, r24	; 0x0a
	packet.payload.data[1] = sock_sport.bytewise.SPORTR1;	
    1a0e:	ce 01       	movw	r24, r28
    1a10:	83 57       	subi	r24, 0x73	; 115
    1a12:	9f 4f       	sbci	r25, 0xFF	; 255
    1a14:	fc 01       	movw	r30, r24
    1a16:	81 81       	ldd	r24, Z+1	; 0x01
    1a18:	8b 87       	std	Y+11, r24	; 0x0b
	packet.meta.dp_length = 2;
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 5;
    1a22:	85 e0       	ldi	r24, 0x05	; 5
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	8b 83       	std	Y+3, r24	; 0x03
    1a28:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_MODIFY_SPORT;
    1a2a:	80 e4       	ldi	r24, 0x40	; 64
    1a2c:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    1a2e:	ce 01       	movw	r24, r28
    1a30:	86 57       	subi	r24, 0x76	; 118
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	fc 01       	movw	r30, r24
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	49 e8       	ldi	r20, 0x89	; 137
    1a3c:	9e 01       	movw	r18, r28
    1a3e:	2f 5f       	subi	r18, 0xFF	; 255
    1a40:	3f 4f       	sbci	r19, 0xFF	; 255
    1a42:	f9 01       	movw	r30, r18
    1a44:	dc 01       	movw	r26, r24
    1a46:	01 90       	ld	r0, Z+
    1a48:	0d 92       	st	X+, r0
    1a4a:	4a 95       	dec	r20
    1a4c:	e1 f7       	brne	.-8      	; 0x1a46 <RenderUpdateSocketSPortPacket+0xc0>
}
    1a4e:	ce 01       	movw	r24, r28
    1a50:	86 57       	subi	r24, 0x76	; 118
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	fc 01       	movw	r30, r24
    1a56:	80 81       	ld	r24, Z
    1a58:	91 81       	ldd	r25, Z+1	; 0x01
    1a5a:	c2 57       	subi	r28, 0x72	; 114
    1a5c:	df 4f       	sbci	r29, 0xFF	; 255
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	08 95       	ret

Disassembly of section .text.RenderUpdateSocketDPortPacket:

00001a68 <RenderUpdateSocketDPortPacket>:

NIC_PACKET_t RenderUpdateSocketDPortPacket(uint8_t sock_num, NIC_DPORT_t sock_dport) {
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	ce 58       	subi	r28, 0x8E	; 142
    1a72:	d1 09       	sbc	r29, r1
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	9e 01       	movw	r18, r28
    1a7a:	26 57       	subi	r18, 0x76	; 118
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	f9 01       	movw	r30, r18
    1a80:	80 83       	st	Z, r24
    1a82:	91 83       	std	Z+1, r25	; 0x01
    1a84:	ce 01       	movw	r24, r28
    1a86:	84 57       	subi	r24, 0x74	; 116
    1a88:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	60 83       	st	Z, r22
    1a8e:	ce 01       	movw	r24, r28
    1a90:	83 57       	subi	r24, 0x73	; 115
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
    1a94:	fc 01       	movw	r30, r24
    1a96:	40 83       	st	Z, r20
    1a98:	51 83       	std	Z+1, r21	; 0x01
	NIC_PACKET_t packet;
	if (sock_num >= NIC_SOCKET_COUNT) {
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	84 57       	subi	r24, 0x74	; 116
    1a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	80 81       	ld	r24, Z
    1aa4:	88 30       	cpi	r24, 0x08	; 8
    1aa6:	88 f0       	brcs	.+34     	; 0x1aca <RenderUpdateSocketDPortPacket+0x62>
		return packet;
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	86 57       	subi	r24, 0x76	; 118
    1aac:	9f 4f       	sbci	r25, 0xFF	; 255
    1aae:	fc 01       	movw	r30, r24
    1ab0:	80 81       	ld	r24, Z
    1ab2:	91 81       	ldd	r25, Z+1	; 0x01
    1ab4:	49 e8       	ldi	r20, 0x89	; 137
    1ab6:	9e 01       	movw	r18, r28
    1ab8:	2f 5f       	subi	r18, 0xFF	; 255
    1aba:	3f 4f       	sbci	r19, 0xFF	; 255
    1abc:	f9 01       	movw	r30, r18
    1abe:	dc 01       	movw	r26, r24
    1ac0:	01 90       	ld	r0, Z+
    1ac2:	0d 92       	st	X+, r0
    1ac4:	4a 95       	dec	r20
    1ac6:	e1 f7       	brne	.-8      	; 0x1ac0 <RenderUpdateSocketDPortPacket+0x58>
    1ac8:	33 c0       	rjmp	.+102    	; 0x1b30 <RenderUpdateSocketDPortPacket+0xc8>
	}
	
	packet.payload.addr.bytes[0] = 0x00;
    1aca:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x10;
    1acc:	80 e1       	ldi	r24, 0x10	; 16
    1ace:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = NIC_BS_SOCKET1_REGISTER;
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	87 70       	andi	r24, 0x07	; 7
    1ad4:	88 62       	ori	r24, 0x28	; 40
    1ad6:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	8c 7f       	andi	r24, 0xFC	; 252
    1adc:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_WRITE_bm;
    1ade:	89 85       	ldd	r24, Y+9	; 0x09
    1ae0:	84 60       	ori	r24, 0x04	; 4
    1ae2:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = sock_dport.bytewise.DPORTR0;
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	83 57       	subi	r24, 0x73	; 115
    1ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aea:	fc 01       	movw	r30, r24
    1aec:	80 81       	ld	r24, Z
    1aee:	8a 87       	std	Y+10, r24	; 0x0a
	packet.payload.data[1] = sock_dport.bytewise.DPORTR1;
    1af0:	ce 01       	movw	r24, r28
    1af2:	83 57       	subi	r24, 0x73	; 115
    1af4:	9f 4f       	sbci	r25, 0xFF	; 255
    1af6:	fc 01       	movw	r30, r24
    1af8:	81 81       	ldd	r24, Z+1	; 0x01
    1afa:	8b 87       	std	Y+11, r24	; 0x0b
	packet.meta.dp_length = 2;
    1afc:	82 e0       	ldi	r24, 0x02	; 2
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 5;
    1b04:	85 e0       	ldi	r24, 0x05	; 5
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	8b 83       	std	Y+3, r24	; 0x03
    1b0a:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_MODIFY_DPORT;
    1b0c:	82 e4       	ldi	r24, 0x42	; 66
    1b0e:	8a 83       	std	Y+2, r24	; 0x02
	return packet;	
    1b10:	ce 01       	movw	r24, r28
    1b12:	86 57       	subi	r24, 0x76	; 118
    1b14:	9f 4f       	sbci	r25, 0xFF	; 255
    1b16:	fc 01       	movw	r30, r24
    1b18:	80 81       	ld	r24, Z
    1b1a:	91 81       	ldd	r25, Z+1	; 0x01
    1b1c:	49 e8       	ldi	r20, 0x89	; 137
    1b1e:	9e 01       	movw	r18, r28
    1b20:	2f 5f       	subi	r18, 0xFF	; 255
    1b22:	3f 4f       	sbci	r19, 0xFF	; 255
    1b24:	f9 01       	movw	r30, r18
    1b26:	dc 01       	movw	r26, r24
    1b28:	01 90       	ld	r0, Z+
    1b2a:	0d 92       	st	X+, r0
    1b2c:	4a 95       	dec	r20
    1b2e:	e1 f7       	brne	.-8      	; 0x1b28 <RenderUpdateSocketDPortPacket+0xc0>
}
    1b30:	ce 01       	movw	r24, r28
    1b32:	86 57       	subi	r24, 0x76	; 118
    1b34:	9f 4f       	sbci	r25, 0xFF	; 255
    1b36:	fc 01       	movw	r30, r24
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	c2 57       	subi	r28, 0x72	; 114
    1b3e:	df 4f       	sbci	r29, 0xFF	; 255
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	08 95       	ret

Disassembly of section .text.RenderUpdateSocketDIPPacket:

000014da <RenderUpdateSocketDIPPacket>:

NIC_PACKET_t RenderUpdateSocketDIPPacket(uint8_t sock_num, NIC_DIP_t sock_dip) {
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	c0 59       	subi	r28, 0x90	; 144
    14e4:	d1 09       	sbc	r29, r1
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	fe 01       	movw	r30, r28
    14ec:	e6 57       	subi	r30, 0x76	; 118
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	80 83       	st	Z, r24
    14f2:	91 83       	std	Z+1, r25	; 0x01
    14f4:	ce 01       	movw	r24, r28
    14f6:	84 57       	subi	r24, 0x74	; 116
    14f8:	9f 4f       	sbci	r25, 0xFF	; 255
    14fa:	fc 01       	movw	r30, r24
    14fc:	60 83       	st	Z, r22
    14fe:	ce 01       	movw	r24, r28
    1500:	83 57       	subi	r24, 0x73	; 115
    1502:	9f 4f       	sbci	r25, 0xFF	; 255
    1504:	fc 01       	movw	r30, r24
    1506:	20 83       	st	Z, r18
    1508:	31 83       	std	Z+1, r19	; 0x01
    150a:	42 83       	std	Z+2, r20	; 0x02
    150c:	53 83       	std	Z+3, r21	; 0x03
	NIC_PACKET_t packet;
	if (sock_num >= NIC_SOCKET_COUNT) {
    150e:	ce 01       	movw	r24, r28
    1510:	84 57       	subi	r24, 0x74	; 116
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	fc 01       	movw	r30, r24
    1516:	80 81       	ld	r24, Z
    1518:	88 30       	cpi	r24, 0x08	; 8
    151a:	88 f0       	brcs	.+34     	; 0x153e <RenderUpdateSocketDIPPacket+0x64>
		return packet;
    151c:	ce 01       	movw	r24, r28
    151e:	86 57       	subi	r24, 0x76	; 118
    1520:	9f 4f       	sbci	r25, 0xFF	; 255
    1522:	fc 01       	movw	r30, r24
    1524:	80 81       	ld	r24, Z
    1526:	91 81       	ldd	r25, Z+1	; 0x01
    1528:	49 e8       	ldi	r20, 0x89	; 137
    152a:	9e 01       	movw	r18, r28
    152c:	2f 5f       	subi	r18, 0xFF	; 255
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	f9 01       	movw	r30, r18
    1532:	dc 01       	movw	r26, r24
    1534:	01 90       	ld	r0, Z+
    1536:	0d 92       	st	X+, r0
    1538:	4a 95       	dec	r20
    153a:	e1 f7       	brne	.-8      	; 0x1534 <RenderUpdateSocketDIPPacket+0x5a>
    153c:	3f c0       	rjmp	.+126    	; 0x15bc <RenderUpdateSocketDIPPacket+0xe2>
	}
	
	packet.payload.addr.bytes[0] = 0x00;
    153e:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x0C;
    1540:	8c e0       	ldi	r24, 0x0C	; 12
    1542:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = NIC_BS_SOCKET1_REGISTER;
    1544:	89 85       	ldd	r24, Y+9	; 0x09
    1546:	87 70       	andi	r24, 0x07	; 7
    1548:	88 62       	ori	r24, 0x28	; 40
    154a:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    154c:	89 85       	ldd	r24, Y+9	; 0x09
    154e:	8c 7f       	andi	r24, 0xFC	; 252
    1550:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_WRITE_bm;
    1552:	89 85       	ldd	r24, Y+9	; 0x09
    1554:	84 60       	ori	r24, 0x04	; 4
    1556:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = sock_dip.bytewise.DIPR0;
    1558:	ce 01       	movw	r24, r28
    155a:	83 57       	subi	r24, 0x73	; 115
    155c:	9f 4f       	sbci	r25, 0xFF	; 255
    155e:	fc 01       	movw	r30, r24
    1560:	80 81       	ld	r24, Z
    1562:	8a 87       	std	Y+10, r24	; 0x0a
	packet.payload.data[1] = sock_dip.bytewise.DIPR1;
    1564:	ce 01       	movw	r24, r28
    1566:	83 57       	subi	r24, 0x73	; 115
    1568:	9f 4f       	sbci	r25, 0xFF	; 255
    156a:	fc 01       	movw	r30, r24
    156c:	81 81       	ldd	r24, Z+1	; 0x01
    156e:	8b 87       	std	Y+11, r24	; 0x0b
	packet.payload.data[2] = sock_dip.bytewise.DIPR2;
    1570:	ce 01       	movw	r24, r28
    1572:	83 57       	subi	r24, 0x73	; 115
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	fc 01       	movw	r30, r24
    1578:	82 81       	ldd	r24, Z+2	; 0x02
    157a:	8c 87       	std	Y+12, r24	; 0x0c
	packet.payload.data[3] = sock_dip.bytewise.DIPR3;
    157c:	ce 01       	movw	r24, r28
    157e:	83 57       	subi	r24, 0x73	; 115
    1580:	9f 4f       	sbci	r25, 0xFF	; 255
    1582:	fc 01       	movw	r30, r24
    1584:	83 81       	ldd	r24, Z+3	; 0x03
    1586:	8d 87       	std	Y+13, r24	; 0x0d
	packet.meta.dp_length = 4;
    1588:	84 e0       	ldi	r24, 0x04	; 4
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	8d 83       	std	Y+5, r24	; 0x05
    158e:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 7;
    1590:	87 e0       	ldi	r24, 0x07	; 7
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	8b 83       	std	Y+3, r24	; 0x03
    1596:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_MODIFY_DIP;
    1598:	81 e4       	ldi	r24, 0x41	; 65
    159a:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    159c:	ce 01       	movw	r24, r28
    159e:	86 57       	subi	r24, 0x76	; 118
    15a0:	9f 4f       	sbci	r25, 0xFF	; 255
    15a2:	fc 01       	movw	r30, r24
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	49 e8       	ldi	r20, 0x89	; 137
    15aa:	9e 01       	movw	r18, r28
    15ac:	2f 5f       	subi	r18, 0xFF	; 255
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	f9 01       	movw	r30, r18
    15b2:	dc 01       	movw	r26, r24
    15b4:	01 90       	ld	r0, Z+
    15b6:	0d 92       	st	X+, r0
    15b8:	4a 95       	dec	r20
    15ba:	e1 f7       	brne	.-8      	; 0x15b4 <RenderUpdateSocketDIPPacket+0xda>
}
    15bc:	ce 01       	movw	r24, r28
    15be:	86 57       	subi	r24, 0x76	; 118
    15c0:	9f 4f       	sbci	r25, 0xFF	; 255
    15c2:	fc 01       	movw	r30, r24
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	c0 57       	subi	r28, 0x70	; 112
    15ca:	df 4f       	sbci	r29, 0xFF	; 255
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	08 95       	ret

Disassembly of section .text.RenderReadRxPtrPacket:

00002422 <RenderReadRxPtrPacket>:

NIC_PACKET_t RenderReadRxPtrPacket(uint8_t sock_num) {
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	cc 58       	subi	r28, 0x8C	; 140
    242c:	d1 09       	sbc	r29, r1
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	9e 01       	movw	r18, r28
    2434:	26 57       	subi	r18, 0x76	; 118
    2436:	3f 4f       	sbci	r19, 0xFF	; 255
    2438:	f9 01       	movw	r30, r18
    243a:	80 83       	st	Z, r24
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	ce 01       	movw	r24, r28
    2440:	84 57       	subi	r24, 0x74	; 116
    2442:	9f 4f       	sbci	r25, 0xFF	; 255
    2444:	fc 01       	movw	r30, r24
    2446:	60 83       	st	Z, r22
	NIC_PACKET_t packet;
	if (sock_num >= NIC_SOCKET_COUNT) {
    2448:	ce 01       	movw	r24, r28
    244a:	84 57       	subi	r24, 0x74	; 116
    244c:	9f 4f       	sbci	r25, 0xFF	; 255
    244e:	fc 01       	movw	r30, r24
    2450:	80 81       	ld	r24, Z
    2452:	88 30       	cpi	r24, 0x08	; 8
    2454:	88 f0       	brcs	.+34     	; 0x2478 <RenderReadRxPtrPacket+0x56>
		return packet;
    2456:	ce 01       	movw	r24, r28
    2458:	86 57       	subi	r24, 0x76	; 118
    245a:	9f 4f       	sbci	r25, 0xFF	; 255
    245c:	fc 01       	movw	r30, r24
    245e:	80 81       	ld	r24, Z
    2460:	91 81       	ldd	r25, Z+1	; 0x01
    2462:	49 e8       	ldi	r20, 0x89	; 137
    2464:	9e 01       	movw	r18, r28
    2466:	2f 5f       	subi	r18, 0xFF	; 255
    2468:	3f 4f       	sbci	r19, 0xFF	; 255
    246a:	f9 01       	movw	r30, r18
    246c:	dc 01       	movw	r26, r24
    246e:	01 90       	ld	r0, Z+
    2470:	0d 92       	st	X+, r0
    2472:	4a 95       	dec	r20
    2474:	e1 f7       	brne	.-8      	; 0x246e <RenderReadRxPtrPacket+0x4c>
    2476:	27 c0       	rjmp	.+78     	; 0x24c6 <RenderReadRxPtrPacket+0xa4>
	}
	packet.payload.addr.bytes[0] = 0x00;
    2478:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x28;
    247a:	88 e2       	ldi	r24, 0x28	; 40
    247c:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = NIC_BS_SOCKET1_REGISTER;
    247e:	89 85       	ldd	r24, Y+9	; 0x09
    2480:	87 70       	andi	r24, 0x07	; 7
    2482:	88 62       	ori	r24, 0x28	; 40
    2484:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	8c 7f       	andi	r24, 0xFC	; 252
    248a:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_READ_bm;
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	8b 7f       	andi	r24, 0xFB	; 251
    2490:	89 87       	std	Y+9, r24	; 0x09
	packet.meta.dp_length = 4;
    2492:	84 e0       	ldi	r24, 0x04	; 4
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 7;
    249a:	87 e0       	ldi	r24, 0x07	; 7
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_READ_RXPTR;
    24a2:	80 e5       	ldi	r24, 0x50	; 80
    24a4:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    24a6:	ce 01       	movw	r24, r28
    24a8:	86 57       	subi	r24, 0x76	; 118
    24aa:	9f 4f       	sbci	r25, 0xFF	; 255
    24ac:	fc 01       	movw	r30, r24
    24ae:	80 81       	ld	r24, Z
    24b0:	91 81       	ldd	r25, Z+1	; 0x01
    24b2:	49 e8       	ldi	r20, 0x89	; 137
    24b4:	9e 01       	movw	r18, r28
    24b6:	2f 5f       	subi	r18, 0xFF	; 255
    24b8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ba:	f9 01       	movw	r30, r18
    24bc:	dc 01       	movw	r26, r24
    24be:	01 90       	ld	r0, Z+
    24c0:	0d 92       	st	X+, r0
    24c2:	4a 95       	dec	r20
    24c4:	e1 f7       	brne	.-8      	; 0x24be <RenderReadRxPtrPacket+0x9c>
}
    24c6:	ce 01       	movw	r24, r28
    24c8:	86 57       	subi	r24, 0x76	; 118
    24ca:	9f 4f       	sbci	r25, 0xFF	; 255
    24cc:	fc 01       	movw	r30, r24
    24ce:	80 81       	ld	r24, Z
    24d0:	91 81       	ldd	r25, Z+1	; 0x01
    24d2:	c4 57       	subi	r28, 0x74	; 116
    24d4:	df 4f       	sbci	r29, 0xFF	; 255
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	08 95       	ret

Disassembly of section .text.RenderReadTxPtrPacket:

000024e0 <RenderReadTxPtrPacket>:

NIC_PACKET_t RenderReadTxPtrPacket(uint8_t sock_num) {
    24e0:	cf 93       	push	r28
    24e2:	df 93       	push	r29
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	cc 58       	subi	r28, 0x8C	; 140
    24ea:	d1 09       	sbc	r29, r1
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	9e 01       	movw	r18, r28
    24f2:	26 57       	subi	r18, 0x76	; 118
    24f4:	3f 4f       	sbci	r19, 0xFF	; 255
    24f6:	f9 01       	movw	r30, r18
    24f8:	80 83       	st	Z, r24
    24fa:	91 83       	std	Z+1, r25	; 0x01
    24fc:	ce 01       	movw	r24, r28
    24fe:	84 57       	subi	r24, 0x74	; 116
    2500:	9f 4f       	sbci	r25, 0xFF	; 255
    2502:	fc 01       	movw	r30, r24
    2504:	60 83       	st	Z, r22
	NIC_PACKET_t packet;
	if (sock_num >= NIC_SOCKET_COUNT) {
    2506:	ce 01       	movw	r24, r28
    2508:	84 57       	subi	r24, 0x74	; 116
    250a:	9f 4f       	sbci	r25, 0xFF	; 255
    250c:	fc 01       	movw	r30, r24
    250e:	80 81       	ld	r24, Z
    2510:	88 30       	cpi	r24, 0x08	; 8
    2512:	88 f0       	brcs	.+34     	; 0x2536 <RenderReadTxPtrPacket+0x56>
		return packet;
    2514:	ce 01       	movw	r24, r28
    2516:	86 57       	subi	r24, 0x76	; 118
    2518:	9f 4f       	sbci	r25, 0xFF	; 255
    251a:	fc 01       	movw	r30, r24
    251c:	80 81       	ld	r24, Z
    251e:	91 81       	ldd	r25, Z+1	; 0x01
    2520:	49 e8       	ldi	r20, 0x89	; 137
    2522:	9e 01       	movw	r18, r28
    2524:	2f 5f       	subi	r18, 0xFF	; 255
    2526:	3f 4f       	sbci	r19, 0xFF	; 255
    2528:	f9 01       	movw	r30, r18
    252a:	dc 01       	movw	r26, r24
    252c:	01 90       	ld	r0, Z+
    252e:	0d 92       	st	X+, r0
    2530:	4a 95       	dec	r20
    2532:	e1 f7       	brne	.-8      	; 0x252c <RenderReadTxPtrPacket+0x4c>
    2534:	27 c0       	rjmp	.+78     	; 0x2584 <RenderReadTxPtrPacket+0xa4>
	}
	packet.payload.addr.bytes[0] = 0x00;
    2536:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x22;
    2538:	82 e2       	ldi	r24, 0x22	; 34
    253a:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = NIC_BS_SOCKET1_REGISTER;
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	87 70       	andi	r24, 0x07	; 7
    2540:	88 62       	ori	r24, 0x28	; 40
    2542:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    2544:	89 85       	ldd	r24, Y+9	; 0x09
    2546:	8c 7f       	andi	r24, 0xFC	; 252
    2548:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_READ_bm;
    254a:	89 85       	ldd	r24, Y+9	; 0x09
    254c:	8b 7f       	andi	r24, 0xFB	; 251
    254e:	89 87       	std	Y+9, r24	; 0x09
	packet.meta.dp_length = 4;
    2550:	84 e0       	ldi	r24, 0x04	; 4
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 7;
    2558:	87 e0       	ldi	r24, 0x07	; 7
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	8b 83       	std	Y+3, r24	; 0x03
    255e:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_READ_TXPTR;
    2560:	81 e5       	ldi	r24, 0x51	; 81
    2562:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    2564:	ce 01       	movw	r24, r28
    2566:	86 57       	subi	r24, 0x76	; 118
    2568:	9f 4f       	sbci	r25, 0xFF	; 255
    256a:	fc 01       	movw	r30, r24
    256c:	80 81       	ld	r24, Z
    256e:	91 81       	ldd	r25, Z+1	; 0x01
    2570:	49 e8       	ldi	r20, 0x89	; 137
    2572:	9e 01       	movw	r18, r28
    2574:	2f 5f       	subi	r18, 0xFF	; 255
    2576:	3f 4f       	sbci	r19, 0xFF	; 255
    2578:	f9 01       	movw	r30, r18
    257a:	dc 01       	movw	r26, r24
    257c:	01 90       	ld	r0, Z+
    257e:	0d 92       	st	X+, r0
    2580:	4a 95       	dec	r20
    2582:	e1 f7       	brne	.-8      	; 0x257c <RenderReadTxPtrPacket+0x9c>
}
    2584:	ce 01       	movw	r24, r28
    2586:	86 57       	subi	r24, 0x76	; 118
    2588:	9f 4f       	sbci	r25, 0xFF	; 255
    258a:	fc 01       	movw	r30, r24
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	c4 57       	subi	r28, 0x74	; 116
    2592:	df 4f       	sbci	r29, 0xFF	; 255
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	df 91       	pop	r29
    259a:	cf 91       	pop	r28
    259c:	08 95       	ret

Disassembly of section .text.RenderUpdRxPtrPacket:

000016c4 <RenderUpdRxPtrPacket>:

NIC_PACKET_t RenderUpdRxPtrPacket(uint8_t sock_num, uint8_t rxrd[2]) {
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	ce 58       	subi	r28, 0x8E	; 142
    16ce:	d1 09       	sbc	r29, r1
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	9e 01       	movw	r18, r28
    16d6:	26 57       	subi	r18, 0x76	; 118
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	f9 01       	movw	r30, r18
    16dc:	80 83       	st	Z, r24
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	ce 01       	movw	r24, r28
    16e2:	84 57       	subi	r24, 0x74	; 116
    16e4:	9f 4f       	sbci	r25, 0xFF	; 255
    16e6:	fc 01       	movw	r30, r24
    16e8:	60 83       	st	Z, r22
    16ea:	ce 01       	movw	r24, r28
    16ec:	83 57       	subi	r24, 0x73	; 115
    16ee:	9f 4f       	sbci	r25, 0xFF	; 255
    16f0:	fc 01       	movw	r30, r24
    16f2:	40 83       	st	Z, r20
    16f4:	51 83       	std	Z+1, r21	; 0x01
	NIC_PACKET_t packet;
	if (sock_num >= NIC_SOCKET_COUNT) {
    16f6:	ce 01       	movw	r24, r28
    16f8:	84 57       	subi	r24, 0x74	; 116
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	fc 01       	movw	r30, r24
    16fe:	80 81       	ld	r24, Z
    1700:	88 30       	cpi	r24, 0x08	; 8
    1702:	88 f0       	brcs	.+34     	; 0x1726 <RenderUpdRxPtrPacket+0x62>
		return packet;
    1704:	ce 01       	movw	r24, r28
    1706:	86 57       	subi	r24, 0x76	; 118
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	fc 01       	movw	r30, r24
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	49 e8       	ldi	r20, 0x89	; 137
    1712:	9e 01       	movw	r18, r28
    1714:	2f 5f       	subi	r18, 0xFF	; 255
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
    1718:	f9 01       	movw	r30, r18
    171a:	dc 01       	movw	r26, r24
    171c:	01 90       	ld	r0, Z+
    171e:	0d 92       	st	X+, r0
    1720:	4a 95       	dec	r20
    1722:	e1 f7       	brne	.-8      	; 0x171c <RenderUpdRxPtrPacket+0x58>
    1724:	39 c0       	rjmp	.+114    	; 0x1798 <RenderUpdRxPtrPacket+0xd4>
	}
	packet.payload.addr.bytes[0] = 0x00;
    1726:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x28;
    1728:	88 e2       	ldi	r24, 0x28	; 40
    172a:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = NIC_BS_SOCKET1_REGISTER;
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	87 70       	andi	r24, 0x07	; 7
    1730:	88 62       	ori	r24, 0x28	; 40
    1732:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	8c 7f       	andi	r24, 0xFC	; 252
    1738:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_WRITE_bm;
    173a:	89 85       	ldd	r24, Y+9	; 0x09
    173c:	84 60       	ori	r24, 0x04	; 4
    173e:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = rxrd[0];
    1740:	ce 01       	movw	r24, r28
    1742:	83 57       	subi	r24, 0x73	; 115
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	fc 01       	movw	r30, r24
    1748:	80 81       	ld	r24, Z
    174a:	91 81       	ldd	r25, Z+1	; 0x01
    174c:	fc 01       	movw	r30, r24
    174e:	80 81       	ld	r24, Z
    1750:	8a 87       	std	Y+10, r24	; 0x0a
	packet.payload.data[1] = rxrd[1];
    1752:	ce 01       	movw	r24, r28
    1754:	83 57       	subi	r24, 0x73	; 115
    1756:	9f 4f       	sbci	r25, 0xFF	; 255
    1758:	fc 01       	movw	r30, r24
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	fc 01       	movw	r30, r24
    1760:	81 81       	ldd	r24, Z+1	; 0x01
    1762:	8b 87       	std	Y+11, r24	; 0x0b
	packet.meta.dp_length = 2;
    1764:	82 e0       	ldi	r24, 0x02	; 2
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 5;
    176c:	85 e0       	ldi	r24, 0x05	; 5
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	8b 83       	std	Y+3, r24	; 0x03
    1772:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_MODIFY_RXPTR;
    1774:	82 e5       	ldi	r24, 0x52	; 82
    1776:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    1778:	ce 01       	movw	r24, r28
    177a:	86 57       	subi	r24, 0x76	; 118
    177c:	9f 4f       	sbci	r25, 0xFF	; 255
    177e:	fc 01       	movw	r30, r24
    1780:	80 81       	ld	r24, Z
    1782:	91 81       	ldd	r25, Z+1	; 0x01
    1784:	49 e8       	ldi	r20, 0x89	; 137
    1786:	9e 01       	movw	r18, r28
    1788:	2f 5f       	subi	r18, 0xFF	; 255
    178a:	3f 4f       	sbci	r19, 0xFF	; 255
    178c:	f9 01       	movw	r30, r18
    178e:	dc 01       	movw	r26, r24
    1790:	01 90       	ld	r0, Z+
    1792:	0d 92       	st	X+, r0
    1794:	4a 95       	dec	r20
    1796:	e1 f7       	brne	.-8      	; 0x1790 <RenderUpdRxPtrPacket+0xcc>
}
    1798:	ce 01       	movw	r24, r28
    179a:	86 57       	subi	r24, 0x76	; 118
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	fc 01       	movw	r30, r24
    17a0:	80 81       	ld	r24, Z
    17a2:	91 81       	ldd	r25, Z+1	; 0x01
    17a4:	c2 57       	subi	r28, 0x72	; 114
    17a6:	df 4f       	sbci	r29, 0xFF	; 255
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	08 95       	ret

Disassembly of section .text.RenderUpdTxPtrPacket:

000017b2 <RenderUpdTxPtrPacket>:

NIC_PACKET_t RenderUpdTxPtrPacket(uint8_t sock_num, uint8_t txwr[2]) {
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	ce 58       	subi	r28, 0x8E	; 142
    17bc:	d1 09       	sbc	r29, r1
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	9e 01       	movw	r18, r28
    17c4:	26 57       	subi	r18, 0x76	; 118
    17c6:	3f 4f       	sbci	r19, 0xFF	; 255
    17c8:	f9 01       	movw	r30, r18
    17ca:	80 83       	st	Z, r24
    17cc:	91 83       	std	Z+1, r25	; 0x01
    17ce:	ce 01       	movw	r24, r28
    17d0:	84 57       	subi	r24, 0x74	; 116
    17d2:	9f 4f       	sbci	r25, 0xFF	; 255
    17d4:	fc 01       	movw	r30, r24
    17d6:	60 83       	st	Z, r22
    17d8:	ce 01       	movw	r24, r28
    17da:	83 57       	subi	r24, 0x73	; 115
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	fc 01       	movw	r30, r24
    17e0:	40 83       	st	Z, r20
    17e2:	51 83       	std	Z+1, r21	; 0x01
	NIC_PACKET_t packet;
	if (sock_num >= NIC_SOCKET_COUNT) {
    17e4:	ce 01       	movw	r24, r28
    17e6:	84 57       	subi	r24, 0x74	; 116
    17e8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ea:	fc 01       	movw	r30, r24
    17ec:	80 81       	ld	r24, Z
    17ee:	88 30       	cpi	r24, 0x08	; 8
    17f0:	88 f0       	brcs	.+34     	; 0x1814 <RenderUpdTxPtrPacket+0x62>
		return packet;
    17f2:	ce 01       	movw	r24, r28
    17f4:	86 57       	subi	r24, 0x76	; 118
    17f6:	9f 4f       	sbci	r25, 0xFF	; 255
    17f8:	fc 01       	movw	r30, r24
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	49 e8       	ldi	r20, 0x89	; 137
    1800:	9e 01       	movw	r18, r28
    1802:	2f 5f       	subi	r18, 0xFF	; 255
    1804:	3f 4f       	sbci	r19, 0xFF	; 255
    1806:	f9 01       	movw	r30, r18
    1808:	dc 01       	movw	r26, r24
    180a:	01 90       	ld	r0, Z+
    180c:	0d 92       	st	X+, r0
    180e:	4a 95       	dec	r20
    1810:	e1 f7       	brne	.-8      	; 0x180a <RenderUpdTxPtrPacket+0x58>
    1812:	39 c0       	rjmp	.+114    	; 0x1886 <RenderUpdTxPtrPacket+0xd4>
	}
	packet.payload.addr.bytes[0] = 0x00;
    1814:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x24;
    1816:	84 e2       	ldi	r24, 0x24	; 36
    1818:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = NIC_BS_SOCKET1_REGISTER;
    181a:	89 85       	ldd	r24, Y+9	; 0x09
    181c:	87 70       	andi	r24, 0x07	; 7
    181e:	88 62       	ori	r24, 0x28	; 40
    1820:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	8c 7f       	andi	r24, 0xFC	; 252
    1826:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_WRITE_bm;
    1828:	89 85       	ldd	r24, Y+9	; 0x09
    182a:	84 60       	ori	r24, 0x04	; 4
    182c:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = txwr[0];
    182e:	ce 01       	movw	r24, r28
    1830:	83 57       	subi	r24, 0x73	; 115
    1832:	9f 4f       	sbci	r25, 0xFF	; 255
    1834:	fc 01       	movw	r30, r24
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	fc 01       	movw	r30, r24
    183c:	80 81       	ld	r24, Z
    183e:	8a 87       	std	Y+10, r24	; 0x0a
	packet.payload.data[1] = txwr[1];
    1840:	ce 01       	movw	r24, r28
    1842:	83 57       	subi	r24, 0x73	; 115
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	fc 01       	movw	r30, r24
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	fc 01       	movw	r30, r24
    184e:	81 81       	ldd	r24, Z+1	; 0x01
    1850:	8b 87       	std	Y+11, r24	; 0x0b
	packet.meta.dp_length = 2;
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	8d 83       	std	Y+5, r24	; 0x05
    1858:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 5;
    185a:	85 e0       	ldi	r24, 0x05	; 5
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	8b 83       	std	Y+3, r24	; 0x03
    1860:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_MODIFY_TXPTR;
    1862:	83 e5       	ldi	r24, 0x53	; 83
    1864:	8a 83       	std	Y+2, r24	; 0x02
	return packet;
    1866:	ce 01       	movw	r24, r28
    1868:	86 57       	subi	r24, 0x76	; 118
    186a:	9f 4f       	sbci	r25, 0xFF	; 255
    186c:	fc 01       	movw	r30, r24
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	49 e8       	ldi	r20, 0x89	; 137
    1874:	9e 01       	movw	r18, r28
    1876:	2f 5f       	subi	r18, 0xFF	; 255
    1878:	3f 4f       	sbci	r19, 0xFF	; 255
    187a:	f9 01       	movw	r30, r18
    187c:	dc 01       	movw	r26, r24
    187e:	01 90       	ld	r0, Z+
    1880:	0d 92       	st	X+, r0
    1882:	4a 95       	dec	r20
    1884:	e1 f7       	brne	.-8      	; 0x187e <RenderUpdTxPtrPacket+0xcc>
}
    1886:	ce 01       	movw	r24, r28
    1888:	86 57       	subi	r24, 0x76	; 118
    188a:	9f 4f       	sbci	r25, 0xFF	; 255
    188c:	fc 01       	movw	r30, r24
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	c2 57       	subi	r28, 0x72	; 114
    1894:	df 4f       	sbci	r29, 0xFF	; 255
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

Disassembly of section .text.InsertTxPacket:

00003358 <InsertTxPacket>:

volatile NIC_PACKET_t* InsertTxPacket(volatile NIC_PACKET_t *packet) {
    3358:	cf 93       	push	r28
    335a:	df 93       	push	r29
    335c:	00 d0       	rcall	.+0      	; 0x335e <InsertTxPacket+0x6>
    335e:	00 d0       	rcall	.+0      	; 0x3360 <InsertTxPacket+0x8>
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
    3364:	8b 83       	std	Y+3, r24	; 0x03
    3366:	9c 83       	std	Y+4, r25	; 0x04
	volatile NIC_PACKET_t* idlePacket;
	idlePacket = FindIdleTxPacket();
    3368:	0e 94 d6 14 	call	0x29ac	; 0x29ac <FindIdleTxPacket>
    336c:	89 83       	std	Y+1, r24	; 0x01
    336e:	9a 83       	std	Y+2, r25	; 0x02
	if (idlePacket == NULL) {
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	9a 81       	ldd	r25, Y+2	; 0x02
    3374:	89 2b       	or	r24, r25
    3376:	19 f4       	brne	.+6      	; 0x337e <InsertTxPacket+0x26>
		return NULL;
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	17 c0       	rjmp	.+46     	; 0x33ac <InsertTxPacket+0x54>
	}
	
	packet->meta.serialNum = idlePacket->meta.serialNum;
    337e:	89 81       	ldd	r24, Y+1	; 0x01
    3380:	9a 81       	ldd	r25, Y+2	; 0x02
    3382:	fc 01       	movw	r30, r24
    3384:	20 81       	ld	r18, Z
    3386:	8b 81       	ldd	r24, Y+3	; 0x03
    3388:	9c 81       	ldd	r25, Y+4	; 0x04
    338a:	fc 01       	movw	r30, r24
    338c:	20 83       	st	Z, r18
	memcpy((void *)idlePacket, (const void *)packet, sizeof(NIC_PACKET_t));
    338e:	8b 81       	ldd	r24, Y+3	; 0x03
    3390:	9c 81       	ldd	r25, Y+4	; 0x04
    3392:	cc 01       	movw	r24, r24
    3394:	a0 e8       	ldi	r26, 0x80	; 128
    3396:	aa 2f       	mov	r26, r26
    3398:	ac 01       	movw	r20, r24
    339a:	6a 2f       	mov	r22, r26
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	9a 81       	ldd	r25, Y+2	; 0x02
    33a0:	29 e8       	ldi	r18, 0x89	; 137
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
	
	return idlePacket;
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    33ac:	24 96       	adiw	r28, 0x04	; 4
    33ae:	cd bf       	out	0x3d, r28	; 61
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	df 91       	pop	r29
    33b4:	cf 91       	pop	r28
    33b6:	08 95       	ret

Disassembly of section .text.InsertRxPacket:

00003884 <InsertRxPacket>:

volatile NIC_PACKET_t* InsertRxPacket(volatile NIC_PACKET_t *packet) {
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
    3888:	00 d0       	rcall	.+0      	; 0x388a <InsertRxPacket+0x6>
    388a:	cd b7       	in	r28, 0x3d	; 61
    388c:	de b7       	in	r29, 0x3e	; 62
    388e:	89 83       	std	Y+1, r24	; 0x01
    3890:	9a 83       	std	Y+2, r25	; 0x02
	return NULL;
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	90 e0       	ldi	r25, 0x00	; 0
}
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	df 91       	pop	r29
    389c:	cf 91       	pop	r28
    389e:	08 95       	ret

Disassembly of section .text.NICRxDigestPacket:

000012a6 <NICRxDigestPacket>:

void NICRxDigestPacket(volatile NIC_PACKET_t* packet) {
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	2e 97       	sbiw	r28, 0x0e	; 14
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	8d 87       	std	Y+13, r24	; 0x0d
    12b6:	9e 87       	std	Y+14, r25	; 0x0e
	NIC_PACKET_TYPE_t packetType = packet->meta.type;
    12b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    12bc:	fc 01       	movw	r30, r24
    12be:	81 81       	ldd	r24, Z+1	; 0x01
    12c0:	89 83       	std	Y+1, r24	; 0x01
	NIC_SOCKET_SR_t sr;
	uint8_t *data, *txrd, *txwr, *rxrd, *rxwr;
	switch (packetType) {
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	80 35       	cpi	r24, 0x50	; 80
    12ca:	91 05       	cpc	r25, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <NICRxDigestPacket+0x2a>
    12ce:	43 c0       	rjmp	.+134    	; 0x1356 <NICRxDigestPacket+0xb0>
    12d0:	81 35       	cpi	r24, 0x51	; 81
    12d2:	91 05       	cpc	r25, r1
    12d4:	69 f0       	breq	.+26     	; 0x12f0 <NICRxDigestPacket+0x4a>
    12d6:	03 97       	sbiw	r24, 0x03	; 3
    12d8:	09 f0       	breq	.+2      	; 0x12dc <NICRxDigestPacket+0x36>
		rxwr[0] = data[5];
		rxwr[1] = data[6];
		NICData.sock_data[1].isRxPtrRdy = true;
		break;
	default: 
		break;
    12da:	70 c0       	rjmp	.+224    	; 0x13bc <NICRxDigestPacket+0x116>
	NIC_PACKET_TYPE_t packetType = packet->meta.type;
	NIC_SOCKET_SR_t sr;
	uint8_t *data, *txrd, *txwr, *rxrd, *rxwr;
	switch (packetType) {
	case NIC_PACKET_TYPE_READ_SOCKSTAT:
		sr = (NIC_SOCKET_SR_t)((packet->payload).data[3]);
    12dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12de:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e0:	fc 01       	movw	r30, r24
    12e2:	84 85       	ldd	r24, Z+12	; 0x0c
    12e4:	8a 83       	std	Y+2, r24	; 0x02
		UpdateSockStat(1, sr);
    12e6:	6a 81       	ldd	r22, Y+2	; 0x02
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	0e 94 47 19 	call	0x328e	; 0x328e <UpdateSockStat>
		break;
    12ee:	66 c0       	rjmp	.+204    	; 0x13bc <NICRxDigestPacket+0x116>
	case NIC_PACKET_TYPE_READ_TXPTR:
		data = (packet->payload).data;
    12f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f4:	09 96       	adiw	r24, 0x09	; 9
    12f6:	8b 83       	std	Y+3, r24	; 0x03
    12f8:	9c 83       	std	Y+4, r25	; 0x04
		txrd = NICData.sock_data[1].txrd;
    12fa:	80 e8       	ldi	r24, 0x80	; 128
    12fc:	96 e4       	ldi	r25, 0x46	; 70
    12fe:	8d 83       	std	Y+5, r24	; 0x05
    1300:	9e 83       	std	Y+6, r25	; 0x06
		txwr = NICData.sock_data[1].txwr;
    1302:	82 e8       	ldi	r24, 0x82	; 130
    1304:	96 e4       	ldi	r25, 0x46	; 70
    1306:	8f 83       	std	Y+7, r24	; 0x07
    1308:	98 87       	std	Y+8, r25	; 0x08
		txrd[0] = data[3];
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	fc 01       	movw	r30, r24
    1310:	23 81       	ldd	r18, Z+3	; 0x03
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	fc 01       	movw	r30, r24
    1318:	20 83       	st	Z, r18
		txrd[1] = data[4];
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	9e 81       	ldd	r25, Y+6	; 0x06
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	2b 81       	ldd	r18, Y+3	; 0x03
    1322:	3c 81       	ldd	r19, Y+4	; 0x04
    1324:	f9 01       	movw	r30, r18
    1326:	24 81       	ldd	r18, Z+4	; 0x04
    1328:	fc 01       	movw	r30, r24
    132a:	20 83       	st	Z, r18
		txwr[0] = data[5];
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	fc 01       	movw	r30, r24
    1332:	25 81       	ldd	r18, Z+5	; 0x05
    1334:	8f 81       	ldd	r24, Y+7	; 0x07
    1336:	98 85       	ldd	r25, Y+8	; 0x08
    1338:	fc 01       	movw	r30, r24
    133a:	20 83       	st	Z, r18
		txwr[1] = data[6];
    133c:	8f 81       	ldd	r24, Y+7	; 0x07
    133e:	98 85       	ldd	r25, Y+8	; 0x08
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	2b 81       	ldd	r18, Y+3	; 0x03
    1344:	3c 81       	ldd	r19, Y+4	; 0x04
    1346:	f9 01       	movw	r30, r18
    1348:	26 81       	ldd	r18, Z+6	; 0x06
    134a:	fc 01       	movw	r30, r24
    134c:	20 83       	st	Z, r18
		NICData.sock_data[1].isTxPtrRdy = true;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 7b 46 	sts	0x467B, r24	; 0x80467b <NICData+0x13>
		break;
    1354:	33 c0       	rjmp	.+102    	; 0x13bc <NICRxDigestPacket+0x116>
	case NIC_PACKET_TYPE_READ_RXPTR:
		data = (packet->payload).data;
    1356:	8d 85       	ldd	r24, Y+13	; 0x0d
    1358:	9e 85       	ldd	r25, Y+14	; 0x0e
    135a:	09 96       	adiw	r24, 0x09	; 9
    135c:	8b 83       	std	Y+3, r24	; 0x03
    135e:	9c 83       	std	Y+4, r25	; 0x04
		rxrd = NICData.sock_data[1].rxrd;
    1360:	8c e7       	ldi	r24, 0x7C	; 124
    1362:	96 e4       	ldi	r25, 0x46	; 70
    1364:	89 87       	std	Y+9, r24	; 0x09
    1366:	9a 87       	std	Y+10, r25	; 0x0a
		rxwr = NICData.sock_data[1].rxwr;
    1368:	8e e7       	ldi	r24, 0x7E	; 126
    136a:	96 e4       	ldi	r25, 0x46	; 70
    136c:	8b 87       	std	Y+11, r24	; 0x0b
    136e:	9c 87       	std	Y+12, r25	; 0x0c
		rxrd[0] = data[3];
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	fc 01       	movw	r30, r24
    1376:	23 81       	ldd	r18, Z+3	; 0x03
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	9a 85       	ldd	r25, Y+10	; 0x0a
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18
		rxrd[1] = data[4];
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	2b 81       	ldd	r18, Y+3	; 0x03
    1388:	3c 81       	ldd	r19, Y+4	; 0x04
    138a:	f9 01       	movw	r30, r18
    138c:	24 81       	ldd	r18, Z+4	; 0x04
    138e:	fc 01       	movw	r30, r24
    1390:	20 83       	st	Z, r18
		rxwr[0] = data[5];
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	fc 01       	movw	r30, r24
    1398:	25 81       	ldd	r18, Z+5	; 0x05
    139a:	8b 85       	ldd	r24, Y+11	; 0x0b
    139c:	9c 85       	ldd	r25, Y+12	; 0x0c
    139e:	fc 01       	movw	r30, r24
    13a0:	20 83       	st	Z, r18
		rxwr[1] = data[6];
    13a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    13a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	2b 81       	ldd	r18, Y+3	; 0x03
    13aa:	3c 81       	ldd	r19, Y+4	; 0x04
    13ac:	f9 01       	movw	r30, r18
    13ae:	26 81       	ldd	r18, Z+6	; 0x06
    13b0:	fc 01       	movw	r30, r24
    13b2:	20 83       	st	Z, r18
		NICData.sock_data[1].isRxPtrRdy = true;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	80 93 7a 46 	sts	0x467A, r24	; 0x80467a <NICData+0x12>
		break;
    13ba:	00 00       	nop
	default: 
		break;
	}
	packet->meta.type = NIC_PACKET_TYPE_IDLE;
    13bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13be:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c0:	fc 01       	movw	r30, r24
    13c2:	11 82       	std	Z+1, r1	; 0x01
}
    13c4:	00 00       	nop
    13c6:	2e 96       	adiw	r28, 0x0e	; 14
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

Disassembly of section .text.UpdateSockStat:

0000328e <UpdateSockStat>:

void UpdateSockStat(uint8_t sock_num, NIC_SOCKET_SR_t sr) {
    328e:	cf 93       	push	r28
    3290:	df 93       	push	r29
    3292:	00 d0       	rcall	.+0      	; 0x3294 <UpdateSockStat+0x6>
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
    3298:	89 83       	std	Y+1, r24	; 0x01
    329a:	6a 83       	std	Y+2, r22	; 0x02
	switch (sr) {
    329c:	8a 81       	ldd	r24, Y+2	; 0x02
    329e:	88 2f       	mov	r24, r24
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	83 31       	cpi	r24, 0x13	; 19
    32a4:	91 05       	cpc	r25, r1
    32a6:	31 f0       	breq	.+12     	; 0x32b4 <UpdateSockStat+0x26>
    32a8:	87 31       	cpi	r24, 0x17	; 23
    32aa:	91 05       	cpc	r25, r1
    32ac:	61 f0       	breq	.+24     	; 0x32c6 <UpdateSockStat+0x38>
    32ae:	89 2b       	or	r24, r25
    32b0:	99 f0       	breq	.+38     	; 0x32d8 <UpdateSockStat+0x4a>
		break;
	case NIC_SOCK_CLOSED:
		NICData.sock_status[sock_num] = NIC_SOCKET_STATUS_UNINIT;
		break;
	default:
		break;
    32b2:	1a c0       	rjmp	.+52     	; 0x32e8 <UpdateSockStat+0x5a>
}

void UpdateSockStat(uint8_t sock_num, NIC_SOCKET_SR_t sr) {
	switch (sr) {
	case NIC_SOCK_INIT:
		NICData.sock_status[sock_num] = NIC_SOCKET_STATUS_OPEN;
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	88 2f       	mov	r24, r24
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	88 59       	subi	r24, 0x98	; 152
    32bc:	99 4b       	sbci	r25, 0xB9	; 185
    32be:	22 e0       	ldi	r18, 0x02	; 2
    32c0:	fc 01       	movw	r30, r24
    32c2:	20 83       	st	Z, r18
		break;
    32c4:	11 c0       	rjmp	.+34     	; 0x32e8 <UpdateSockStat+0x5a>
	case NIC_SOCK_ESTABLISHED:
		NICData.sock_status[sock_num] = NIC_SOCKET_STATUS_ESTABLISHED;
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	88 2f       	mov	r24, r24
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	88 59       	subi	r24, 0x98	; 152
    32ce:	99 4b       	sbci	r25, 0xB9	; 185
    32d0:	24 e0       	ldi	r18, 0x04	; 4
    32d2:	fc 01       	movw	r30, r24
    32d4:	20 83       	st	Z, r18
		break;
    32d6:	08 c0       	rjmp	.+16     	; 0x32e8 <UpdateSockStat+0x5a>
	case NIC_SOCK_CLOSED:
		NICData.sock_status[sock_num] = NIC_SOCKET_STATUS_UNINIT;
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	88 2f       	mov	r24, r24
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	88 59       	subi	r24, 0x98	; 152
    32e0:	99 4b       	sbci	r25, 0xB9	; 185
    32e2:	fc 01       	movw	r30, r24
    32e4:	10 82       	st	Z, r1
		break;
    32e6:	00 00       	nop
	default:
		break;
	}
}
    32e8:	00 00       	nop
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	08 95       	ret

Disassembly of section .text.ReadSockPtr:

000013d2 <ReadSockPtr>:

void ReadSockPtr(uint8_t sock_num) {
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	c3 51       	subi	r28, 0x13	; 19
    13dc:	d1 40       	sbci	r29, 0x01	; 1
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	9e 01       	movw	r18, r28
    13e4:	26 57       	subi	r18, 0x76	; 118
    13e6:	3f 4f       	sbci	r19, 0xFF	; 255
    13e8:	f9 01       	movw	r30, r18
    13ea:	80 83       	st	Z, r24
	NIC_PACKET_t packet;
	if (sock_num >= NIC_SOCKET_COUNT) return; 
    13ec:	ce 01       	movw	r24, r28
    13ee:	86 57       	subi	r24, 0x76	; 118
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	fc 01       	movw	r30, r24
    13f4:	80 81       	ld	r24, Z
    13f6:	88 30       	cpi	r24, 0x08	; 8
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <ReadSockPtr+0x2a>
    13fa:	67 c0       	rjmp	.+206    	; 0x14ca <ReadSockPtr+0xf8>
	if (NICData.sock_data[sock_num].isRxPtrRdy == false) {
    13fc:	ce 01       	movw	r24, r28
    13fe:	86 57       	subi	r24, 0x76	; 118
    1400:	9f 4f       	sbci	r25, 0xFF	; 255
    1402:	fc 01       	movw	r30, r24
    1404:	80 81       	ld	r24, Z
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	9c 01       	movw	r18, r24
    1410:	22 0f       	add	r18, r18
    1412:	33 1f       	adc	r19, r19
    1414:	22 0f       	add	r18, r18
    1416:	33 1f       	adc	r19, r19
    1418:	82 0f       	add	r24, r18
    141a:	93 1f       	adc	r25, r19
    141c:	80 59       	subi	r24, 0x90	; 144
    141e:	99 4b       	sbci	r25, 0xB9	; 185
    1420:	fc 01       	movw	r30, r24
    1422:	90 81       	ld	r25, Z
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	89 27       	eor	r24, r25
    1428:	88 23       	and	r24, r24
    142a:	d9 f0       	breq	.+54     	; 0x1462 <ReadSockPtr+0x90>
		packet = RenderReadRxPtrPacket(sock_num);
    142c:	9e 01       	movw	r18, r28
    142e:	25 57       	subi	r18, 0x75	; 117
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	ce 01       	movw	r24, r28
    1434:	86 57       	subi	r24, 0x76	; 118
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	fc 01       	movw	r30, r24
    143a:	60 81       	ld	r22, Z
    143c:	c9 01       	movw	r24, r18
    143e:	0e 94 11 12 	call	0x2422	; 0x2422 <RenderReadRxPtrPacket>
    1442:	ce 01       	movw	r24, r28
    1444:	85 57       	subi	r24, 0x75	; 117
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	29 e8       	ldi	r18, 0x89	; 137
    144a:	fc 01       	movw	r30, r24
    144c:	ce 01       	movw	r24, r28
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	dc 01       	movw	r26, r24
    1452:	01 90       	ld	r0, Z+
    1454:	0d 92       	st	X+, r0
    1456:	2a 95       	dec	r18
    1458:	e1 f7       	brne	.-8      	; 0x1452 <ReadSockPtr+0x80>
		InsertTxPacket(&packet);		
    145a:	ce 01       	movw	r24, r28
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
	}
	if (NICData.sock_data[sock_num].isTxPtrRdy == false) {
    1462:	ce 01       	movw	r24, r28
    1464:	86 57       	subi	r24, 0x76	; 118
    1466:	9f 4f       	sbci	r25, 0xFF	; 255
    1468:	fc 01       	movw	r30, r24
    146a:	80 81       	ld	r24, Z
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	9c 01       	movw	r18, r24
    1476:	22 0f       	add	r18, r18
    1478:	33 1f       	adc	r19, r19
    147a:	22 0f       	add	r18, r18
    147c:	33 1f       	adc	r19, r19
    147e:	82 0f       	add	r24, r18
    1480:	93 1f       	adc	r25, r19
    1482:	8f 58       	subi	r24, 0x8F	; 143
    1484:	99 4b       	sbci	r25, 0xB9	; 185
    1486:	fc 01       	movw	r30, r24
    1488:	90 81       	ld	r25, Z
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	89 27       	eor	r24, r25
    148e:	88 23       	and	r24, r24
    1490:	e9 f0       	breq	.+58     	; 0x14cc <ReadSockPtr+0xfa>
		packet = RenderReadTxPtrPacket(sock_num);
    1492:	9e 01       	movw	r18, r28
    1494:	25 57       	subi	r18, 0x75	; 117
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	ce 01       	movw	r24, r28
    149a:	86 57       	subi	r24, 0x76	; 118
    149c:	9f 4f       	sbci	r25, 0xFF	; 255
    149e:	fc 01       	movw	r30, r24
    14a0:	60 81       	ld	r22, Z
    14a2:	c9 01       	movw	r24, r18
    14a4:	0e 94 70 12 	call	0x24e0	; 0x24e0 <RenderReadTxPtrPacket>
    14a8:	ce 01       	movw	r24, r28
    14aa:	85 57       	subi	r24, 0x75	; 117
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	29 e8       	ldi	r18, 0x89	; 137
    14b0:	fc 01       	movw	r30, r24
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	dc 01       	movw	r26, r24
    14b8:	01 90       	ld	r0, Z+
    14ba:	0d 92       	st	X+, r0
    14bc:	2a 95       	dec	r18
    14be:	e1 f7       	brne	.-8      	; 0x14b8 <ReadSockPtr+0xe6>
		InsertTxPacket(&packet);		
    14c0:	ce 01       	movw	r24, r28
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <ReadSockPtr+0xfa>
	}
}

void ReadSockPtr(uint8_t sock_num) {
	NIC_PACKET_t packet;
	if (sock_num >= NIC_SOCKET_COUNT) return; 
    14ca:	00 00       	nop
	}
	if (NICData.sock_data[sock_num].isTxPtrRdy == false) {
		packet = RenderReadTxPtrPacket(sock_num);
		InsertTxPacket(&packet);		
	}
}
    14cc:	cd 5e       	subi	r28, 0xED	; 237
    14ce:	de 4f       	sbci	r29, 0xFE	; 254
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	08 95       	ret

Disassembly of section .text.NICSchedule:

00002f12 <NICSchedule>:

void NICSchedule() {
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	00 d0       	rcall	.+0      	; 0x2f18 <NICSchedule+0x6>
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 1 /* 0 */; i < 2 /* NIC_SOCKET_COUNT */; i++)
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	29 c0       	rjmp	.+82     	; 0x2f74 <NICSchedule+0x62>
	{
		NIC_SOCKET_STATEx_t status = NICData.sock_status[i];
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	88 2f       	mov	r24, r24
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	88 59       	subi	r24, 0x98	; 152
    2f2a:	99 4b       	sbci	r25, 0xB9	; 185
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	80 81       	ld	r24, Z
    2f30:	8a 83       	std	Y+2, r24	; 0x02
		switch (status) {
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	88 2f       	mov	r24, r24
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	81 30       	cpi	r24, 0x01	; 1
    2f3a:	91 05       	cpc	r25, r1
    2f3c:	b9 f0       	breq	.+46     	; 0x2f6c <NICSchedule+0x5a>
    2f3e:	82 30       	cpi	r24, 0x02	; 2
    2f40:	91 05       	cpc	r25, r1
    2f42:	1c f4       	brge	.+6      	; 0x2f4a <NICSchedule+0x38>
    2f44:	89 2b       	or	r24, r25
    2f46:	39 f0       	breq	.+14     	; 0x2f56 <NICSchedule+0x44>
		break;
		case NIC_SOCKET_STATUS_ESTABLISHED:
			ReadSockPtr(1);
		break;
		default:
		break;
    2f48:	12 c0       	rjmp	.+36     	; 0x2f6e <NICSchedule+0x5c>

void NICSchedule() {
	for (uint8_t i = 1 /* 0 */; i < 2 /* NIC_SOCKET_COUNT */; i++)
	{
		NIC_SOCKET_STATEx_t status = NICData.sock_status[i];
		switch (status) {
    2f4a:	82 30       	cpi	r24, 0x02	; 2
    2f4c:	91 05       	cpc	r25, r1
    2f4e:	31 f0       	breq	.+12     	; 0x2f5c <NICSchedule+0x4a>
    2f50:	04 97       	sbiw	r24, 0x04	; 4
    2f52:	41 f0       	breq	.+16     	; 0x2f64 <NICSchedule+0x52>
		break;
		case NIC_SOCKET_STATUS_ESTABLISHED:
			ReadSockPtr(1);
		break;
		default:
		break;
    2f54:	0c c0       	rjmp	.+24     	; 0x2f6e <NICSchedule+0x5c>
	for (uint8_t i = 1 /* 0 */; i < 2 /* NIC_SOCKET_COUNT */; i++)
	{
		NIC_SOCKET_STATEx_t status = NICData.sock_status[i];
		switch (status) {
		case NIC_SOCKET_STATUS_UNINIT:
			nic_sock_init();
    2f56:	0e 94 cf 12 	call	0x259e	; 0x259e <nic_sock_init>
		break;
    2f5a:	09 c0       	rjmp	.+18     	; 0x2f6e <NICSchedule+0x5c>
		case NIC_SOCKET_STATUS_OPENPEND: 
		break;
		case NIC_SOCKET_STATUS_OPEN:
			Connect(1);
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	0e 94 29 07 	call	0xe52	; 0xe52 <Connect>
		break;
    2f62:	05 c0       	rjmp	.+10     	; 0x2f6e <NICSchedule+0x5c>
		case NIC_SOCKET_STATUS_ESTABLISHED:
			ReadSockPtr(1);
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <ReadSockPtr>
		break;
    2f6a:	01 c0       	rjmp	.+2      	; 0x2f6e <NICSchedule+0x5c>
		switch (status) {
		case NIC_SOCKET_STATUS_UNINIT:
			nic_sock_init();
		break;
		case NIC_SOCKET_STATUS_OPENPEND: 
		break;
    2f6c:	00 00       	nop
		InsertTxPacket(&packet);		
	}
}

void NICSchedule() {
	for (uint8_t i = 1 /* 0 */; i < 2 /* NIC_SOCKET_COUNT */; i++)
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	82 30       	cpi	r24, 0x02	; 2
    2f78:	a0 f2       	brcs	.-88     	; 0x2f22 <NICSchedule+0x10>
		break;
		default:
		break;
		}
	}
}
    2f7a:	00 00       	nop
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	df 91       	pop	r29
    2f82:	cf 91       	pop	r28
    2f84:	08 95       	ret

Disassembly of section .text.CheckNICStatus:

000038b8 <CheckNICStatus>:

void CheckNICStatus() {
    38b8:	cf 93       	push	r28
    38ba:	df 93       	push	r29
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
	// NIC_PACKET_t packet;
	
	CheckSocketStatus(1);
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <CheckSocketStatus>
}
    38c6:	00 00       	nop
    38c8:	df 91       	pop	r29
    38ca:	cf 91       	pop	r28
    38cc:	08 95       	ret

Disassembly of section .text.CheckSocketStatus:

00002f86 <CheckSocketStatus>:

void CheckSocketStatus(uint8_t sock_num) {
    2f86:	cf 93       	push	r28
    2f88:	df 93       	push	r29
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    2f8e:	ca 58       	subi	r28, 0x8A	; 138
    2f90:	d1 09       	sbc	r29, r1
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	de bf       	out	0x3e, r29	; 62
    2f96:	9e 01       	movw	r18, r28
    2f98:	26 57       	subi	r18, 0x76	; 118
    2f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9c:	f9 01       	movw	r30, r18
    2f9e:	80 83       	st	Z, r24
	if (sock_num >= NIC_SOCKET_COUNT) {
    2fa0:	ce 01       	movw	r24, r28
    2fa2:	86 57       	subi	r24, 0x76	; 118
    2fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	80 81       	ld	r24, Z
    2faa:	88 30       	cpi	r24, 0x08	; 8
    2fac:	e8 f4       	brcc	.+58     	; 0x2fe8 <CheckSocketStatus+0x62>
		return;
	}
	
	NIC_PACKET_t packet;
	
	packet.payload.addr.bytes[0] = 0x00;
    2fae:	1f 82       	std	Y+7, r1	; 0x07
	packet.payload.addr.bytes[1] = 0x03;	
    2fb0:	83 e0       	ldi	r24, 0x03	; 3
    2fb2:	88 87       	std	Y+8, r24	; 0x08
	packet.payload.ctrl.bits.BSB = NIC_BS_SOCKET1_REGISTER;
    2fb4:	89 85       	ldd	r24, Y+9	; 0x09
    2fb6:	87 70       	andi	r24, 0x07	; 7
    2fb8:	88 62       	ori	r24, 0x28	; 40
    2fba:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.OM = NIC_CTRL_PHASE_OM_N_gc;
    2fbc:	89 85       	ldd	r24, Y+9	; 0x09
    2fbe:	8c 7f       	andi	r24, 0xFC	; 252
    2fc0:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.ctrl.bits.RWB = NIC_CTRL_PHASE_RWB_READ_bm;
    2fc2:	89 85       	ldd	r24, Y+9	; 0x09
    2fc4:	8b 7f       	andi	r24, 0xFB	; 251
    2fc6:	89 87       	std	Y+9, r24	; 0x09
	packet.payload.data[0] = 0;
    2fc8:	1a 86       	std	Y+10, r1	; 0x0a
	packet.meta.dp_length = 1;
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	8d 83       	std	Y+5, r24	; 0x05
    2fd0:	9e 83       	std	Y+6, r25	; 0x06
	packet.meta.packet_length = 4;
    2fd2:	84 e0       	ldi	r24, 0x04	; 4
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	8b 83       	std	Y+3, r24	; 0x03
    2fd8:	9c 83       	std	Y+4, r25	; 0x04
	packet.meta.type = NIC_PACKET_TYPE_READ_SOCKSTAT;
    2fda:	83 e0       	ldi	r24, 0x03	; 3
    2fdc:	8a 83       	std	Y+2, r24	; 0x02
	
	InsertTxPacket(&packet);
    2fde:	ce 01       	movw	r24, r28
    2fe0:	01 96       	adiw	r24, 0x01	; 1
    2fe2:	0e 94 ac 19 	call	0x3358	; 0x3358 <InsertTxPacket>
    2fe6:	01 c0       	rjmp	.+2      	; 0x2fea <CheckSocketStatus+0x64>
	CheckSocketStatus(1);
}

void CheckSocketStatus(uint8_t sock_num) {
	if (sock_num >= NIC_SOCKET_COUNT) {
		return;
    2fe8:	00 00       	nop
	packet.meta.dp_length = 1;
	packet.meta.packet_length = 4;
	packet.meta.type = NIC_PACKET_TYPE_READ_SOCKSTAT;
	
	InsertTxPacket(&packet);
}
    2fea:	c6 57       	subi	r28, 0x76	; 118
    2fec:	df 4f       	sbci	r29, 0xFF	; 255
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	08 95       	ret

Disassembly of section .text.__vector_18:

00000164 <__vector_18>:

ISR(SPI0_INT_vect) {
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
 174:	0f 92       	push	r0
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	25 97       	sbiw	r28, 0x05	; 5
 198:	cd bf       	out	0x3d, r28	; 61
 19a:	de bf       	out	0x3e, r29	; 62
	if ((SPI0.CTRLB & SPI_BUFEN_bm) == SPI_BUFEN_bm) { // if buffer mode
 19c:	80 e4       	ldi	r24, 0x40	; 64
 19e:	99 e0       	ldi	r25, 0x09	; 9
 1a0:	fc 01       	movw	r30, r24
 1a2:	81 81       	ldd	r24, Z+1	; 0x01
 1a4:	88 23       	and	r24, r24
 1a6:	0c f0       	brlt	.+2      	; 0x1aa <__vector_18+0x46>
 1a8:	aa c0       	rjmp	.+340    	; 0x2fe <__EEPROM_REGION_LENGTH__+0xfe>
		if ((SPI0.INTFLAGS & SPI_RXCIF_bm) ==  SPI_RXCIF_bm) { // receive complete
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	99 e0       	ldi	r25, 0x09	; 9
 1ae:	fc 01       	movw	r30, r24
 1b0:	83 81       	ldd	r24, Z+3	; 0x03
 1b2:	88 23       	and	r24, r24
 1b4:	0c f0       	brlt	.+2      	; 0x1b8 <__vector_18+0x54>
 1b6:	57 c0       	rjmp	.+174    	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
			NICData.rxBuff[NICData.rxPtr] = SPI0.DATA;
 1b8:	80 91 42 47 	lds	r24, 0x4742	; 0x804742 <NICData+0xda>
 1bc:	90 91 43 47 	lds	r25, 0x4743	; 0x804743 <NICData+0xdb>
 1c0:	20 e4       	ldi	r18, 0x40	; 64
 1c2:	39 e0       	ldi	r19, 0x09	; 9
 1c4:	f9 01       	movw	r30, r18
 1c6:	24 81       	ldd	r18, Z+4	; 0x04
 1c8:	8e 53       	subi	r24, 0x3E	; 62
 1ca:	99 4b       	sbci	r25, 0xB9	; 185
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
			NICData.rxPtr++;
 1d0:	80 91 42 47 	lds	r24, 0x4742	; 0x804742 <NICData+0xda>
 1d4:	90 91 43 47 	lds	r25, 0x4743	; 0x804743 <NICData+0xdb>
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <NICData+0xda>
 1de:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <NICData+0xdb>
			if (NICData.rxPtr >= NICData.rxLen) {
 1e2:	20 91 42 47 	lds	r18, 0x4742	; 0x804742 <NICData+0xda>
 1e6:	30 91 43 47 	lds	r19, 0x4743	; 0x804743 <NICData+0xdb>
 1ea:	80 91 44 47 	lds	r24, 0x4744	; 0x804744 <NICData+0xdc>
 1ee:	90 91 45 47 	lds	r25, 0x4745	; 0x804745 <NICData+0xdd>
 1f2:	28 17       	cp	r18, r24
 1f4:	39 07       	cpc	r19, r25
 1f6:	b8 f1       	brcs	.+110    	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
				volatile NIC_PACKET_t* packet = FindIdleRxPacket();
 1f8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <FindIdleRxPacket>
 1fc:	89 83       	std	Y+1, r24	; 0x01
 1fe:	9a 83       	std	Y+2, r25	; 0x02
				if (packet == NULL) reti(); // Discard
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	9a 81       	ldd	r25, Y+2	; 0x02
 204:	89 2b       	or	r24, r25
 206:	09 f4       	brne	.+2      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 208:	18 95       	reti
				memcpy((void *)packet->payload.data, (void *)NICData.rxBuff, NICData.rxLen);
 20a:	20 91 44 47 	lds	r18, 0x4744	; 0x804744 <NICData+0xdc>
 20e:	30 91 45 47 	lds	r19, 0x4745	; 0x804745 <NICData+0xdd>
 212:	82 ec       	ldi	r24, 0xC2	; 194
 214:	96 e4       	ldi	r25, 0x46	; 70
 216:	cc 01       	movw	r24, r24
 218:	a0 e8       	ldi	r26, 0x80	; 128
 21a:	aa 2f       	mov	r26, r26
 21c:	ac 01       	movw	r20, r24
 21e:	6a 2f       	mov	r22, r26
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	9a 81       	ldd	r25, Y+2	; 0x02
 224:	09 96       	adiw	r24, 0x09	; 9
 226:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
				packet->meta.dp_length = NICData.rxLen;
 22a:	20 91 44 47 	lds	r18, 0x4744	; 0x804744 <NICData+0xdc>
 22e:	30 91 45 47 	lds	r19, 0x4745	; 0x804745 <NICData+0xdd>
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	9a 81       	ldd	r25, Y+2	; 0x02
 236:	fc 01       	movw	r30, r24
 238:	24 83       	std	Z+4, r18	; 0x04
 23a:	35 83       	std	Z+5, r19	; 0x05
				packet->meta.type = NICData.curTxPacket->meta.type;
 23c:	80 91 ee 58 	lds	r24, 0x58EE	; 0x8058ee <NICData+0x1286>
 240:	90 91 ef 58 	lds	r25, 0x58EF	; 0x8058ef <NICData+0x1287>
 244:	fc 01       	movw	r30, r24
 246:	21 81       	ldd	r18, Z+1	; 0x01
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	9a 81       	ldd	r25, Y+2	; 0x02
 24c:	fc 01       	movw	r30, r24
 24e:	21 83       	std	Z+1, r18	; 0x01
				NICData.rxLen = 0;
 250:	10 92 44 47 	sts	0x4744, r1	; 0x804744 <NICData+0xdc>
 254:	10 92 45 47 	sts	0x4745, r1	; 0x804745 <NICData+0xdd>
				NICData.rxPtr = 0;
 258:	10 92 42 47 	sts	0x4742, r1	; 0x804742 <NICData+0xda>
 25c:	10 92 43 47 	sts	0x4743, r1	; 0x804743 <NICData+0xdb>
				NICData.isRxC = true;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 c1 46 	sts	0x46C1, r24	; 0x8046c1 <NICData+0x59>
			}
		}
		if ((SPI0.INTFLAGS & SPI_TXCIF_bm) == SPI_TXCIF_bm) { // transmission complete
 266:	80 e4       	ldi	r24, 0x40	; 64
 268:	99 e0       	ldi	r25, 0x09	; 9
 26a:	fc 01       	movw	r30, r24
 26c:	83 81       	ldd	r24, Z+3	; 0x03
 26e:	88 2f       	mov	r24, r24
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	80 74       	andi	r24, 0x40	; 64
 274:	99 27       	eor	r25, r25
 276:	89 2b       	or	r24, r25
 278:	09 f4       	brne	.+2      	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
 27a:	df c0       	rjmp	.+446    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			SPI0.INTFLAGS = SPI_TXCIF_bm;
 27c:	80 e4       	ldi	r24, 0x40	; 64
 27e:	99 e0       	ldi	r25, 0x09	; 9
 280:	20 e4       	ldi	r18, 0x40	; 64
 282:	fc 01       	movw	r30, r24
 284:	23 83       	std	Z+3, r18	; 0x03
			NICData.txPtr++;
 286:	80 91 c7 47 	lds	r24, 0x47C7	; 0x8047c7 <NICData+0x15f>
 28a:	90 91 c8 47 	lds	r25, 0x47C8	; 0x8047c8 <NICData+0x160>
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	80 93 c7 47 	sts	0x47C7, r24	; 0x8047c7 <NICData+0x15f>
 294:	90 93 c8 47 	sts	0x47C8, r25	; 0x8047c8 <NICData+0x160>
			if (NICData.txPtr < NICData.txLen) {
 298:	20 91 c7 47 	lds	r18, 0x47C7	; 0x8047c7 <NICData+0x15f>
 29c:	30 91 c8 47 	lds	r19, 0x47C8	; 0x8047c8 <NICData+0x160>
 2a0:	80 91 c9 47 	lds	r24, 0x47C9	; 0x8047c9 <NICData+0x161>
 2a4:	90 91 ca 47 	lds	r25, 0x47CA	; 0x8047ca <NICData+0x162>
 2a8:	28 17       	cp	r18, r24
 2aa:	39 07       	cpc	r19, r25
 2ac:	68 f4       	brcc	.+26     	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>
				SPI0.DATA = NICData.txBuff[NICData.txPtr];
 2ae:	80 e4       	ldi	r24, 0x40	; 64
 2b0:	99 e0       	ldi	r25, 0x09	; 9
 2b2:	20 91 c7 47 	lds	r18, 0x47C7	; 0x8047c7 <NICData+0x15f>
 2b6:	30 91 c8 47 	lds	r19, 0x47C8	; 0x8047c8 <NICData+0x160>
 2ba:	29 5b       	subi	r18, 0xB9	; 185
 2bc:	38 4b       	sbci	r19, 0xB8	; 184
 2be:	f9 01       	movw	r30, r18
 2c0:	20 81       	ld	r18, Z
 2c2:	fc 01       	movw	r30, r24
 2c4:	24 83       	std	Z+4, r18	; 0x04
			NICData.txPtr = 0;
			NICData.isTxC = true;
			SPI0_SLAVE_DESELECT();
		}
	}
}
 2c6:	b9 c0       	rjmp	.+370    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			NICData.txPtr++;
			if (NICData.txPtr < NICData.txLen) {
				SPI0.DATA = NICData.txBuff[NICData.txPtr];
			}
			else {
				InitializePacket(NICData.curTxPacket);
 2c8:	80 91 ee 58 	lds	r24, 0x58EE	; 0x8058ee <NICData+0x1286>
 2cc:	90 91 ef 58 	lds	r25, 0x58EF	; 0x8058ef <NICData+0x1287>
 2d0:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <InitializePacket>
				NICData.curTxPacket = NULL;
 2d4:	10 92 ee 58 	sts	0x58EE, r1	; 0x8058ee <NICData+0x1286>
 2d8:	10 92 ef 58 	sts	0x58EF, r1	; 0x8058ef <NICData+0x1287>
				NICData.txLen = 0;
 2dc:	10 92 c9 47 	sts	0x47C9, r1	; 0x8047c9 <NICData+0x161>
 2e0:	10 92 ca 47 	sts	0x47CA, r1	; 0x8047ca <NICData+0x162>
				NICData.txPtr = 0;
 2e4:	10 92 c7 47 	sts	0x47C7, r1	; 0x8047c7 <NICData+0x15f>
 2e8:	10 92 c8 47 	sts	0x47C8, r1	; 0x8047c8 <NICData+0x160>
				NICData.isTxC = true;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	80 93 46 47 	sts	0x4746, r24	; 0x804746 <NICData+0xde>
				SPI0_SLAVE_DESELECT();
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	94 e0       	ldi	r25, 0x04	; 4
 2f6:	20 e8       	ldi	r18, 0x80	; 128
 2f8:	fc 01       	movw	r30, r24
 2fa:	25 83       	std	Z+5, r18	; 0x05
			NICData.txPtr = 0;
			NICData.isTxC = true;
			SPI0_SLAVE_DESELECT();
		}
	}
}
 2fc:	9e c0       	rjmp	.+316    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				NICData.isTxC = true;
				SPI0_SLAVE_DESELECT();
			}
		}
	}
	else if ((SPI0.CTRLB & SPI_BUFEN_bm) == 0) { // if not buffer mode
 2fe:	80 e4       	ldi	r24, 0x40	; 64
 300:	99 e0       	ldi	r25, 0x09	; 9
 302:	fc 01       	movw	r30, r24
 304:	81 81       	ldd	r24, Z+1	; 0x01
 306:	88 23       	and	r24, r24
 308:	0c f4       	brge	.+2      	; 0x30c <__EEPROM_REGION_LENGTH__+0x10c>
 30a:	97 c0       	rjmp	.+302    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		volatile uint8_t intflags = SPI0.INTFLAGS;
 30c:	80 e4       	ldi	r24, 0x40	; 64
 30e:	99 e0       	ldi	r25, 0x09	; 9
 310:	fc 01       	movw	r30, r24
 312:	83 81       	ldd	r24, Z+3	; 0x03
 314:	8d 83       	std	Y+5, r24	; 0x05
		NICData.rxBuff[NICData.rxPtr] = SPI0.DATA;
 316:	80 91 42 47 	lds	r24, 0x4742	; 0x804742 <NICData+0xda>
 31a:	90 91 43 47 	lds	r25, 0x4743	; 0x804743 <NICData+0xdb>
 31e:	20 e4       	ldi	r18, 0x40	; 64
 320:	39 e0       	ldi	r19, 0x09	; 9
 322:	f9 01       	movw	r30, r18
 324:	24 81       	ldd	r18, Z+4	; 0x04
 326:	8e 53       	subi	r24, 0x3E	; 62
 328:	99 4b       	sbci	r25, 0xB9	; 185
 32a:	fc 01       	movw	r30, r24
 32c:	20 83       	st	Z, r18
		NICData.rxPtr++;
 32e:	80 91 42 47 	lds	r24, 0x4742	; 0x804742 <NICData+0xda>
 332:	90 91 43 47 	lds	r25, 0x4743	; 0x804743 <NICData+0xdb>
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	80 93 42 47 	sts	0x4742, r24	; 0x804742 <NICData+0xda>
 33c:	90 93 43 47 	sts	0x4743, r25	; 0x804743 <NICData+0xdb>
		if (NICData.rxPtr >= NICData.rxLen) {
 340:	20 91 42 47 	lds	r18, 0x4742	; 0x804742 <NICData+0xda>
 344:	30 91 43 47 	lds	r19, 0x4743	; 0x804743 <NICData+0xdb>
 348:	80 91 44 47 	lds	r24, 0x4744	; 0x804744 <NICData+0xdc>
 34c:	90 91 45 47 	lds	r25, 0x4745	; 0x804745 <NICData+0xdd>
 350:	28 17       	cp	r18, r24
 352:	39 07       	cpc	r19, r25
 354:	b8 f1       	brcs	.+110    	; 0x3c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			volatile NIC_PACKET_t* packet = FindIdleRxPacket();
 356:	0e 94 18 15 	call	0x2a30	; 0x2a30 <FindIdleRxPacket>
 35a:	8b 83       	std	Y+3, r24	; 0x03
 35c:	9c 83       	std	Y+4, r25	; 0x04
			if (packet == NULL) // Discard
 35e:	8b 81       	ldd	r24, Y+3	; 0x03
 360:	9c 81       	ldd	r25, Y+4	; 0x04
 362:	89 2b       	or	r24, r25
 364:	09 f4       	brne	.+2      	; 0x368 <__EEPROM_REGION_LENGTH__+0x168>
			{
				reti();
 366:	18 95       	reti
			}
			memcpy((void *)packet->payload.data, (void *)NICData.rxBuff, NICData.rxLen);
 368:	20 91 44 47 	lds	r18, 0x4744	; 0x804744 <NICData+0xdc>
 36c:	30 91 45 47 	lds	r19, 0x4745	; 0x804745 <NICData+0xdd>
 370:	82 ec       	ldi	r24, 0xC2	; 194
 372:	96 e4       	ldi	r25, 0x46	; 70
 374:	cc 01       	movw	r24, r24
 376:	a0 e8       	ldi	r26, 0x80	; 128
 378:	aa 2f       	mov	r26, r26
 37a:	ac 01       	movw	r20, r24
 37c:	6a 2f       	mov	r22, r26
 37e:	8b 81       	ldd	r24, Y+3	; 0x03
 380:	9c 81       	ldd	r25, Y+4	; 0x04
 382:	09 96       	adiw	r24, 0x09	; 9
 384:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
			packet->meta.dp_length = NICData.rxLen;
 388:	20 91 44 47 	lds	r18, 0x4744	; 0x804744 <NICData+0xdc>
 38c:	30 91 45 47 	lds	r19, 0x4745	; 0x804745 <NICData+0xdd>
 390:	8b 81       	ldd	r24, Y+3	; 0x03
 392:	9c 81       	ldd	r25, Y+4	; 0x04
 394:	fc 01       	movw	r30, r24
 396:	24 83       	std	Z+4, r18	; 0x04
 398:	35 83       	std	Z+5, r19	; 0x05
			packet->meta.type = NICData.curTxPacket->meta.type;
 39a:	80 91 ee 58 	lds	r24, 0x58EE	; 0x8058ee <NICData+0x1286>
 39e:	90 91 ef 58 	lds	r25, 0x58EF	; 0x8058ef <NICData+0x1287>
 3a2:	fc 01       	movw	r30, r24
 3a4:	21 81       	ldd	r18, Z+1	; 0x01
 3a6:	8b 81       	ldd	r24, Y+3	; 0x03
 3a8:	9c 81       	ldd	r25, Y+4	; 0x04
 3aa:	fc 01       	movw	r30, r24
 3ac:	21 83       	std	Z+1, r18	; 0x01
			NICData.rxLen = 0;
 3ae:	10 92 44 47 	sts	0x4744, r1	; 0x804744 <NICData+0xdc>
 3b2:	10 92 45 47 	sts	0x4745, r1	; 0x804745 <NICData+0xdd>
			NICData.rxPtr = 0;
 3b6:	10 92 42 47 	sts	0x4742, r1	; 0x804742 <NICData+0xda>
 3ba:	10 92 43 47 	sts	0x4743, r1	; 0x804743 <NICData+0xdb>
			NICData.isRxC = true;
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	80 93 c1 46 	sts	0x46C1, r24	; 0x8046c1 <NICData+0x59>
		}
		
		NICData.txPtr++;
 3c4:	80 91 c7 47 	lds	r24, 0x47C7	; 0x8047c7 <NICData+0x15f>
 3c8:	90 91 c8 47 	lds	r25, 0x47C8	; 0x8047c8 <NICData+0x160>
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	80 93 c7 47 	sts	0x47C7, r24	; 0x8047c7 <NICData+0x15f>
 3d2:	90 93 c8 47 	sts	0x47C8, r25	; 0x8047c8 <NICData+0x160>
		if (NICData.txPtr < NICData.txLen) {
 3d6:	20 91 c7 47 	lds	r18, 0x47C7	; 0x8047c7 <NICData+0x15f>
 3da:	30 91 c8 47 	lds	r19, 0x47C8	; 0x8047c8 <NICData+0x160>
 3de:	80 91 c9 47 	lds	r24, 0x47C9	; 0x8047c9 <NICData+0x161>
 3e2:	90 91 ca 47 	lds	r25, 0x47CA	; 0x8047ca <NICData+0x162>
 3e6:	28 17       	cp	r18, r24
 3e8:	39 07       	cpc	r19, r25
 3ea:	68 f4       	brcc	.+26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			SPI0.DATA = NICData.txBuff[NICData.txPtr];
 3ec:	80 e4       	ldi	r24, 0x40	; 64
 3ee:	99 e0       	ldi	r25, 0x09	; 9
 3f0:	20 91 c7 47 	lds	r18, 0x47C7	; 0x8047c7 <NICData+0x15f>
 3f4:	30 91 c8 47 	lds	r19, 0x47C8	; 0x8047c8 <NICData+0x160>
 3f8:	29 5b       	subi	r18, 0xB9	; 185
 3fa:	38 4b       	sbci	r19, 0xB8	; 184
 3fc:	f9 01       	movw	r30, r18
 3fe:	20 81       	ld	r18, Z
 400:	fc 01       	movw	r30, r24
 402:	24 83       	std	Z+4, r18	; 0x04
			NICData.txPtr = 0;
			NICData.isTxC = true;
			SPI0_SLAVE_DESELECT();
		}
	}
}
 404:	1a c0       	rjmp	.+52     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		NICData.txPtr++;
		if (NICData.txPtr < NICData.txLen) {
			SPI0.DATA = NICData.txBuff[NICData.txPtr];
		}
		else {
			InitializePacket(NICData.curTxPacket);
 406:	80 91 ee 58 	lds	r24, 0x58EE	; 0x8058ee <NICData+0x1286>
 40a:	90 91 ef 58 	lds	r25, 0x58EF	; 0x8058ef <NICData+0x1287>
 40e:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <InitializePacket>
			NICData.curTxPacket = NULL;
 412:	10 92 ee 58 	sts	0x58EE, r1	; 0x8058ee <NICData+0x1286>
 416:	10 92 ef 58 	sts	0x58EF, r1	; 0x8058ef <NICData+0x1287>
			NICData.txLen = 0;
 41a:	10 92 c9 47 	sts	0x47C9, r1	; 0x8047c9 <NICData+0x161>
 41e:	10 92 ca 47 	sts	0x47CA, r1	; 0x8047ca <NICData+0x162>
			NICData.txPtr = 0;
 422:	10 92 c7 47 	sts	0x47C7, r1	; 0x8047c7 <NICData+0x15f>
 426:	10 92 c8 47 	sts	0x47C8, r1	; 0x8047c8 <NICData+0x160>
			NICData.isTxC = true;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	80 93 46 47 	sts	0x4746, r24	; 0x804746 <NICData+0xde>
			SPI0_SLAVE_DESELECT();
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	94 e0       	ldi	r25, 0x04	; 4
 434:	20 e8       	ldi	r18, 0x80	; 128
 436:	fc 01       	movw	r30, r24
 438:	25 83       	std	Z+5, r18	; 0x05
		}
	}
}
 43a:	00 00       	nop
 43c:	25 96       	adiw	r28, 0x05	; 5
 43e:	cd bf       	out	0x3d, r28	; 61
 440:	de bf       	out	0x3e, r29	; 62
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	ff 91       	pop	r31
 448:	ef 91       	pop	r30
 44a:	bf 91       	pop	r27
 44c:	af 91       	pop	r26
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	7f 91       	pop	r23
 454:	6f 91       	pop	r22
 456:	5f 91       	pop	r21
 458:	4f 91       	pop	r20
 45a:	3f 91       	pop	r19
 45c:	2f 91       	pop	r18
 45e:	0f 90       	pop	r0
 460:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
 464:	0f 90       	pop	r0
 466:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

Disassembly of section .text.__vector_58:

000034d2 <__vector_58>:

ISR(PORTG_PORT_vect) {
    34d2:	1f 92       	push	r1
    34d4:	0f 92       	push	r0
    34d6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    34da:	0f 92       	push	r0
    34dc:	11 24       	eor	r1, r1
    34de:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    34e2:	0f 92       	push	r0
    34e4:	8f 93       	push	r24
    34e6:	9f 93       	push	r25
    34e8:	ef 93       	push	r30
    34ea:	ff 93       	push	r31
    34ec:	cf 93       	push	r28
    34ee:	df 93       	push	r29
    34f0:	1f 92       	push	r1
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t a = 0;
    34f6:	19 82       	std	Y+1, r1	; 0x01
	if (PORTG.INTFLAGS & PIN7_bm) { // nic int
    34f8:	80 ec       	ldi	r24, 0xC0	; 192
    34fa:	94 e0       	ldi	r25, 0x04	; 4
    34fc:	fc 01       	movw	r30, r24
    34fe:	81 85       	ldd	r24, Z+9	; 0x09
    3500:	88 23       	and	r24, r24
    3502:	1c f4       	brge	.+6      	; 0x350a <__vector_58+0x38>
		a++;	
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	8f 5f       	subi	r24, 0xFF	; 255
    3508:	89 83       	std	Y+1, r24	; 0x01
	}
    350a:	00 00       	nop
    350c:	0f 90       	pop	r0
    350e:	df 91       	pop	r29
    3510:	cf 91       	pop	r28
    3512:	ff 91       	pop	r31
    3514:	ef 91       	pop	r30
    3516:	9f 91       	pop	r25
    3518:	8f 91       	pop	r24
    351a:	0f 90       	pop	r0
    351c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    3520:	0f 90       	pop	r0
    3522:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    3526:	0f 90       	pop	r0
    3528:	1f 90       	pop	r1
    352a:	18 95       	reti

Disassembly of section .text.CheckChecksum:

00002b38 <CheckChecksum>:
#include <xc.h>
#include "dependency.h"
#include "nic.h"

bool CheckChecksum(uint8_t *pack, uint16_t size)
{
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	27 97       	sbiw	r28, 0x07	; 7
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	8c 83       	std	Y+4, r24	; 0x04
    2b48:	9d 83       	std	Y+5, r25	; 0x05
    2b4a:	6e 83       	std	Y+6, r22	; 0x06
    2b4c:	7f 83       	std	Y+7, r23	; 0x07
	uint8_t checksumA = 0;
    2b4e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t checkSumB = pack[size - 1];
    2b50:	8e 81       	ldd	r24, Y+6	; 0x06
    2b52:	9f 81       	ldd	r25, Y+7	; 0x07
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	2c 81       	ldd	r18, Y+4	; 0x04
    2b58:	3d 81       	ldd	r19, Y+5	; 0x05
    2b5a:	82 0f       	add	r24, r18
    2b5c:	93 1f       	adc	r25, r19
    2b5e:	fc 01       	movw	r30, r24
    2b60:	80 81       	ld	r24, Z
    2b62:	8b 83       	std	Y+3, r24	; 0x03
	for (uint8_t i = 0; i < size - 1; i++)
    2b64:	1a 82       	std	Y+2, r1	; 0x02
    2b66:	0f c0       	rjmp	.+30     	; 0x2b86 <CheckChecksum+0x4e>
	{
		checksumA += pack[i];
    2b68:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6a:	88 2f       	mov	r24, r24
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	2c 81       	ldd	r18, Y+4	; 0x04
    2b70:	3d 81       	ldd	r19, Y+5	; 0x05
    2b72:	82 0f       	add	r24, r18
    2b74:	93 1f       	adc	r25, r19
    2b76:	fc 01       	movw	r30, r24
    2b78:	80 81       	ld	r24, Z
    2b7a:	99 81       	ldd	r25, Y+1	; 0x01
    2b7c:	89 0f       	add	r24, r25
    2b7e:	89 83       	std	Y+1, r24	; 0x01

bool CheckChecksum(uint8_t *pack, uint16_t size)
{
	uint8_t checksumA = 0;
	uint8_t checkSumB = pack[size - 1];
	for (uint8_t i = 0; i < size - 1; i++)
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	8f 5f       	subi	r24, 0xFF	; 255
    2b84:	8a 83       	std	Y+2, r24	; 0x02
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b8e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	28 17       	cp	r18, r24
    2b94:	39 07       	cpc	r19, r25
    2b96:	40 f3       	brcs	.-48     	; 0x2b68 <CheckChecksum+0x30>
	{
		checksumA += pack[i];
	}
	return ((checksumA & 0x7F) == (checkSumB & 0x7F)) ? true : false;
    2b98:	99 81       	ldd	r25, Y+1	; 0x01
    2b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9c:	89 27       	eor	r24, r25
    2b9e:	88 2f       	mov	r24, r24
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	8f 77       	andi	r24, 0x7F	; 127
    2ba4:	99 27       	eor	r25, r25
    2ba6:	21 e0       	ldi	r18, 0x01	; 1
    2ba8:	89 2b       	or	r24, r25
    2baa:	09 f0       	breq	.+2      	; 0x2bae <CheckChecksum+0x76>
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	82 2f       	mov	r24, r18
}
    2bb0:	27 96       	adiw	r28, 0x07	; 7
    2bb2:	cd bf       	out	0x3d, r28	; 61
    2bb4:	de bf       	out	0x3e, r29	; 62
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	08 95       	ret

Disassembly of section .text.GetChecksum:

0000352c <GetChecksum>:

uint8_t GetChecksum(uint8_t *pack, uint16_t size) {
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	26 97       	sbiw	r28, 0x06	; 6
    3536:	cd bf       	out	0x3d, r28	; 61
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	8b 83       	std	Y+3, r24	; 0x03
    353c:	9c 83       	std	Y+4, r25	; 0x04
    353e:	6d 83       	std	Y+5, r22	; 0x05
    3540:	7e 83       	std	Y+6, r23	; 0x06
	uint8_t checksum = 0;
    3542:	19 82       	std	Y+1, r1	; 0x01
	for (uint8_t i = 0; i < size; i++)
    3544:	1a 82       	std	Y+2, r1	; 0x02
    3546:	0f c0       	rjmp	.+30     	; 0x3566 <GetChecksum+0x3a>
	{
		checksum += pack[i];
    3548:	8a 81       	ldd	r24, Y+2	; 0x02
    354a:	88 2f       	mov	r24, r24
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	2b 81       	ldd	r18, Y+3	; 0x03
    3550:	3c 81       	ldd	r19, Y+4	; 0x04
    3552:	82 0f       	add	r24, r18
    3554:	93 1f       	adc	r25, r19
    3556:	fc 01       	movw	r30, r24
    3558:	80 81       	ld	r24, Z
    355a:	99 81       	ldd	r25, Y+1	; 0x01
    355c:	89 0f       	add	r24, r25
    355e:	89 83       	std	Y+1, r24	; 0x01
	return ((checksumA & 0x7F) == (checkSumB & 0x7F)) ? true : false;
}

uint8_t GetChecksum(uint8_t *pack, uint16_t size) {
	uint8_t checksum = 0;
	for (uint8_t i = 0; i < size; i++)
    3560:	8a 81       	ldd	r24, Y+2	; 0x02
    3562:	8f 5f       	subi	r24, 0xFF	; 255
    3564:	8a 83       	std	Y+2, r24	; 0x02
    3566:	8a 81       	ldd	r24, Y+2	; 0x02
    3568:	28 2f       	mov	r18, r24
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	8d 81       	ldd	r24, Y+5	; 0x05
    356e:	9e 81       	ldd	r25, Y+6	; 0x06
    3570:	28 17       	cp	r18, r24
    3572:	39 07       	cpc	r19, r25
    3574:	48 f3       	brcs	.-46     	; 0x3548 <GetChecksum+0x1c>
	{
		checksum += pack[i];
	}
	return checksum;
    3576:	89 81       	ldd	r24, Y+1	; 0x01
}
    3578:	26 96       	adiw	r28, 0x06	; 6
    357a:	cd bf       	out	0x3d, r28	; 61
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	df 91       	pop	r29
    3580:	cf 91       	pop	r28
    3582:	08 95       	ret

Disassembly of section .text.GetWordFromBytes:

000037f0 <GetWordFromBytes>:

uint16_t GetWordFromBytes(uint8_t byte1, uint8_t byte2) {
    37f0:	cf 93       	push	r28
    37f2:	df 93       	push	r29
    37f4:	00 d0       	rcall	.+0      	; 0x37f6 <GetWordFromBytes+0x6>
    37f6:	00 d0       	rcall	.+0      	; 0x37f8 <GetWordFromBytes+0x8>
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
    37fc:	8b 83       	std	Y+3, r24	; 0x03
    37fe:	6c 83       	std	Y+4, r22	; 0x04
	union {
		uint16_t word;
		uint8_t bytes[2];
	} data;
	data.bytes[0] = byte2;
    3800:	8c 81       	ldd	r24, Y+4	; 0x04
    3802:	89 83       	std	Y+1, r24	; 0x01
	data.bytes[1] = byte1;
    3804:	8b 81       	ldd	r24, Y+3	; 0x03
    3806:	8a 83       	std	Y+2, r24	; 0x02
	return data.word;
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    380c:	24 96       	adiw	r28, 0x04	; 4
    380e:	cd bf       	out	0x3d, r28	; 61
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	df 91       	pop	r29
    3814:	cf 91       	pop	r28
    3816:	08 95       	ret

Disassembly of section .text.GetWordFrom14Bits:

000035d4 <GetWordFrom14Bits>:

uint16_t GetWordFrom14Bits(uint8_t byte1, uint8_t byte2) {
    35d4:	cf 93       	push	r28
    35d6:	df 93       	push	r29
    35d8:	00 d0       	rcall	.+0      	; 0x35da <GetWordFrom14Bits+0x6>
    35da:	00 d0       	rcall	.+0      	; 0x35dc <GetWordFrom14Bits+0x8>
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
    35e0:	8b 83       	std	Y+3, r24	; 0x03
    35e2:	6c 83       	std	Y+4, r22	; 0x04
	uint16_t word = 0;
    35e4:	19 82       	std	Y+1, r1	; 0x01
    35e6:	1a 82       	std	Y+2, r1	; 0x02
	word = byte2 & 0b011111111;
    35e8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ea:	88 2f       	mov	r24, r24
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	89 83       	std	Y+1, r24	; 0x01
    35f0:	9a 83       	std	Y+2, r25	; 0x02
	word += (byte1 & 0b011111111) << 7;
    35f2:	8b 81       	ldd	r24, Y+3	; 0x03
    35f4:	88 2f       	mov	r24, r24
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	96 95       	lsr	r25
    35fa:	98 2f       	mov	r25, r24
    35fc:	88 27       	eor	r24, r24
    35fe:	97 95       	ror	r25
    3600:	87 95       	ror	r24
    3602:	9c 01       	movw	r18, r24
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	9a 81       	ldd	r25, Y+2	; 0x02
    3608:	82 0f       	add	r24, r18
    360a:	93 1f       	adc	r25, r19
    360c:	89 83       	std	Y+1, r24	; 0x01
    360e:	9a 83       	std	Y+2, r25	; 0x02
	return word;
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3614:	24 96       	adiw	r28, 0x04	; 4
    3616:	cd bf       	out	0x3d, r28	; 61
    3618:	de bf       	out	0x3e, r29	; 62
    361a:	df 91       	pop	r29
    361c:	cf 91       	pop	r28
    361e:	08 95       	ret

Disassembly of section .text.GetBytesFromWord:

00003620 <GetBytesFromWord>:

uint8_t GetBytesFromWord(uint16_t word, uint8_t byte_num) {
    3620:	cf 93       	push	r28
    3622:	df 93       	push	r29
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
    3628:	25 97       	sbiw	r28, 0x05	; 5
    362a:	cd bf       	out	0x3d, r28	; 61
    362c:	de bf       	out	0x3e, r29	; 62
    362e:	8b 83       	std	Y+3, r24	; 0x03
    3630:	9c 83       	std	Y+4, r25	; 0x04
    3632:	6d 83       	std	Y+5, r22	; 0x05
	if (byte_num >= 2) return 0;
    3634:	8d 81       	ldd	r24, Y+5	; 0x05
    3636:	82 30       	cpi	r24, 0x02	; 2
    3638:	10 f0       	brcs	.+4      	; 0x363e <GetBytesFromWord+0x1e>
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	0f c0       	rjmp	.+30     	; 0x365c <GetBytesFromWord+0x3c>
	union {
		uint8_t bytes[2];
		uint16_t word;
	} data;
	data.word = word;
    363e:	8b 81       	ldd	r24, Y+3	; 0x03
    3640:	9c 81       	ldd	r25, Y+4	; 0x04
    3642:	89 83       	std	Y+1, r24	; 0x01
    3644:	9a 83       	std	Y+2, r25	; 0x02
	if (byte_num == 0) {
    3646:	8d 81       	ldd	r24, Y+5	; 0x05
    3648:	88 23       	and	r24, r24
    364a:	11 f4       	brne	.+4      	; 0x3650 <GetBytesFromWord+0x30>
		return data.bytes[1];
    364c:	8a 81       	ldd	r24, Y+2	; 0x02
    364e:	06 c0       	rjmp	.+12     	; 0x365c <GetBytesFromWord+0x3c>
	}
	else if (byte_num == 1) {
    3650:	8d 81       	ldd	r24, Y+5	; 0x05
    3652:	81 30       	cpi	r24, 0x01	; 1
    3654:	11 f4       	brne	.+4      	; 0x365a <GetBytesFromWord+0x3a>
		return data.bytes[0];
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	01 c0       	rjmp	.+2      	; 0x365c <GetBytesFromWord+0x3c>
	}
	return 0; // dummy
    365a:	80 e0       	ldi	r24, 0x00	; 0
}
    365c:	25 96       	adiw	r28, 0x05	; 5
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	de bf       	out	0x3e, r29	; 62
    3662:	df 91       	pop	r29
    3664:	cf 91       	pop	r28
    3666:	08 95       	ret

Disassembly of section .text.GetBytesFrom14Bits:

000036f4 <GetBytesFrom14Bits>:

uint8_t GetBytesFrom14Bits(uint8_t byte1, uint8_t byte2, uint8_t byte_num) {
    36f4:	cf 93       	push	r28
    36f6:	df 93       	push	r29
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
    36fc:	26 97       	sbiw	r28, 0x06	; 6
    36fe:	cd bf       	out	0x3d, r28	; 61
    3700:	de bf       	out	0x3e, r29	; 62
    3702:	8c 83       	std	Y+4, r24	; 0x04
    3704:	6d 83       	std	Y+5, r22	; 0x05
    3706:	4e 83       	std	Y+6, r20	; 0x06
	uint16_t word = GetWordFrom14Bits(byte1, byte2);
    3708:	6d 81       	ldd	r22, Y+5	; 0x05
    370a:	8c 81       	ldd	r24, Y+4	; 0x04
    370c:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <GetWordFrom14Bits>
    3710:	89 83       	std	Y+1, r24	; 0x01
    3712:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t byte = GetBytesFromWord(word, byte_num);
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	9a 81       	ldd	r25, Y+2	; 0x02
    3718:	6e 81       	ldd	r22, Y+6	; 0x06
    371a:	0e 94 10 1b 	call	0x3620	; 0x3620 <GetBytesFromWord>
    371e:	8b 83       	std	Y+3, r24	; 0x03
	return byte;
    3720:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3722:	26 96       	adiw	r28, 0x06	; 6
    3724:	cd bf       	out	0x3d, r28	; 61
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	df 91       	pop	r29
    372a:	cf 91       	pop	r28
    372c:	08 95       	ret

Disassembly of section .text.GetBSBBySocketNumber:

000038ce <GetBSBBySocketNumber>:

uint8_t GetBSBBySocketNumber(uint8_t socket_num) {
    38ce:	cf 93       	push	r28
    38d0:	df 93       	push	r29
    38d2:	1f 92       	push	r1
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62
    38d8:	89 83       	std	Y+1, r24	; 0x01
	return 0;
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	0f 90       	pop	r0
    38de:	df 91       	pop	r29
    38e0:	cf 91       	pop	r28
    38e2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003948 <__cmpsf2>:
    3948:	0e 94 34 1b 	call	0x3668	; 0x3668 <__fp_cmp>
    394c:	08 f4       	brcc	.+2      	; 0x3950 <__cmpsf2+0x8>
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003474 <__fixunssfsi>:
    3474:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__fp_splitA>
    3478:	88 f0       	brcs	.+34     	; 0x349c <__fixunssfsi+0x28>
    347a:	9f 57       	subi	r25, 0x7F	; 127
    347c:	98 f0       	brcs	.+38     	; 0x34a4 <__fixunssfsi+0x30>
    347e:	b9 2f       	mov	r27, r25
    3480:	99 27       	eor	r25, r25
    3482:	b7 51       	subi	r27, 0x17	; 23
    3484:	b0 f0       	brcs	.+44     	; 0x34b2 <__fixunssfsi+0x3e>
    3486:	e1 f0       	breq	.+56     	; 0x34c0 <__fixunssfsi+0x4c>
    3488:	66 0f       	add	r22, r22
    348a:	77 1f       	adc	r23, r23
    348c:	88 1f       	adc	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	1a f0       	brmi	.+6      	; 0x3498 <__fixunssfsi+0x24>
    3492:	ba 95       	dec	r27
    3494:	c9 f7       	brne	.-14     	; 0x3488 <__fixunssfsi+0x14>
    3496:	14 c0       	rjmp	.+40     	; 0x34c0 <__fixunssfsi+0x4c>
    3498:	b1 30       	cpi	r27, 0x01	; 1
    349a:	91 f0       	breq	.+36     	; 0x34c0 <__fixunssfsi+0x4c>
    349c:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__fp_zero>
    34a0:	b1 e0       	ldi	r27, 0x01	; 1
    34a2:	08 95       	ret
    34a4:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__fp_zero>
    34a8:	67 2f       	mov	r22, r23
    34aa:	78 2f       	mov	r23, r24
    34ac:	88 27       	eor	r24, r24
    34ae:	b8 5f       	subi	r27, 0xF8	; 248
    34b0:	39 f0       	breq	.+14     	; 0x34c0 <__fixunssfsi+0x4c>
    34b2:	b9 3f       	cpi	r27, 0xF9	; 249
    34b4:	cc f3       	brlt	.-14     	; 0x34a8 <__fixunssfsi+0x34>
    34b6:	86 95       	lsr	r24
    34b8:	77 95       	ror	r23
    34ba:	67 95       	ror	r22
    34bc:	b3 95       	inc	r27
    34be:	d9 f7       	brne	.-10     	; 0x34b6 <__fixunssfsi+0x42>
    34c0:	3e f4       	brtc	.+14     	; 0x34d0 <__fixunssfsi+0x5c>
    34c2:	90 95       	com	r25
    34c4:	80 95       	com	r24
    34c6:	70 95       	com	r23
    34c8:	61 95       	neg	r22
    34ca:	7f 4f       	sbci	r23, 0xFF	; 255
    34cc:	8f 4f       	sbci	r24, 0xFF	; 255
    34ce:	9f 4f       	sbci	r25, 0xFF	; 255
    34d0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003668 <__fp_cmp>:
    3668:	99 0f       	add	r25, r25
    366a:	00 08       	sbc	r0, r0
    366c:	55 0f       	add	r21, r21
    366e:	aa 0b       	sbc	r26, r26
    3670:	e0 e8       	ldi	r30, 0x80	; 128
    3672:	fe ef       	ldi	r31, 0xFE	; 254
    3674:	16 16       	cp	r1, r22
    3676:	17 06       	cpc	r1, r23
    3678:	e8 07       	cpc	r30, r24
    367a:	f9 07       	cpc	r31, r25
    367c:	c0 f0       	brcs	.+48     	; 0x36ae <__fp_cmp+0x46>
    367e:	12 16       	cp	r1, r18
    3680:	13 06       	cpc	r1, r19
    3682:	e4 07       	cpc	r30, r20
    3684:	f5 07       	cpc	r31, r21
    3686:	98 f0       	brcs	.+38     	; 0x36ae <__fp_cmp+0x46>
    3688:	62 1b       	sub	r22, r18
    368a:	73 0b       	sbc	r23, r19
    368c:	84 0b       	sbc	r24, r20
    368e:	95 0b       	sbc	r25, r21
    3690:	39 f4       	brne	.+14     	; 0x36a0 <__fp_cmp+0x38>
    3692:	0a 26       	eor	r0, r26
    3694:	61 f0       	breq	.+24     	; 0x36ae <__fp_cmp+0x46>
    3696:	23 2b       	or	r18, r19
    3698:	24 2b       	or	r18, r20
    369a:	25 2b       	or	r18, r21
    369c:	21 f4       	brne	.+8      	; 0x36a6 <__fp_cmp+0x3e>
    369e:	08 95       	ret
    36a0:	0a 26       	eor	r0, r26
    36a2:	09 f4       	brne	.+2      	; 0x36a6 <__fp_cmp+0x3e>
    36a4:	a1 40       	sbci	r26, 0x01	; 1
    36a6:	a6 95       	lsr	r26
    36a8:	8f ef       	ldi	r24, 0xFF	; 255
    36aa:	81 1d       	adc	r24, r1
    36ac:	81 1d       	adc	r24, r1
    36ae:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000036b0 <__fp_split3>:
    36b0:	57 fd       	sbrc	r21, 7
    36b2:	90 58       	subi	r25, 0x80	; 128
    36b4:	44 0f       	add	r20, r20
    36b6:	55 1f       	adc	r21, r21
    36b8:	59 f0       	breq	.+22     	; 0x36d0 <__fp_splitA+0x10>
    36ba:	5f 3f       	cpi	r21, 0xFF	; 255
    36bc:	71 f0       	breq	.+28     	; 0x36da <__fp_splitA+0x1a>
    36be:	47 95       	ror	r20

000036c0 <__fp_splitA>:
    36c0:	88 0f       	add	r24, r24
    36c2:	97 fb       	bst	r25, 7
    36c4:	99 1f       	adc	r25, r25
    36c6:	61 f0       	breq	.+24     	; 0x36e0 <__fp_splitA+0x20>
    36c8:	9f 3f       	cpi	r25, 0xFF	; 255
    36ca:	79 f0       	breq	.+30     	; 0x36ea <__fp_splitA+0x2a>
    36cc:	87 95       	ror	r24
    36ce:	08 95       	ret
    36d0:	12 16       	cp	r1, r18
    36d2:	13 06       	cpc	r1, r19
    36d4:	14 06       	cpc	r1, r20
    36d6:	55 1f       	adc	r21, r21
    36d8:	f2 cf       	rjmp	.-28     	; 0x36be <__fp_split3+0xe>
    36da:	46 95       	lsr	r20
    36dc:	f1 df       	rcall	.-30     	; 0x36c0 <__fp_splitA>
    36de:	08 c0       	rjmp	.+16     	; 0x36f0 <__fp_splitA+0x30>
    36e0:	16 16       	cp	r1, r22
    36e2:	17 06       	cpc	r1, r23
    36e4:	18 06       	cpc	r1, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	f1 cf       	rjmp	.-30     	; 0x36cc <__fp_splitA+0xc>
    36ea:	86 95       	lsr	r24
    36ec:	71 05       	cpc	r23, r1
    36ee:	61 05       	cpc	r22, r1
    36f0:	08 94       	sec
    36f2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000038f6 <__fp_zero>:
    38f6:	e8 94       	clt

000038f8 <__fp_szero>:
    38f8:	bb 27       	eor	r27, r27
    38fa:	66 27       	eor	r22, r22
    38fc:	77 27       	eor	r23, r23
    38fe:	cb 01       	movw	r24, r22
    3900:	97 f9       	bld	r25, 7
    3902:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003952 <__gesf2>:
    3952:	0e 94 34 1b 	call	0x3668	; 0x3668 <__fp_cmp>
    3956:	08 f4       	brcc	.+2      	; 0x395a <__gesf2+0x8>
    3958:	8f ef       	ldi	r24, 0xFF	; 255
    395a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000395c <__mulsf3>:
    395c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__mulsf3x>
    3960:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001eaa <__mulsf3x>:
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <__mulsf3x+0x20>
    1eac:	0e 94 82 1c 	call	0x3904	; 0x3904 <__fp_pscA>
    1eb0:	38 f0       	brcs	.+14     	; 0x1ec0 <__mulsf3x+0x16>
    1eb2:	0e 94 89 1c 	call	0x3912	; 0x3912 <__fp_pscB>
    1eb6:	20 f0       	brcs	.+8      	; 0x1ec0 <__mulsf3x+0x16>
    1eb8:	95 23       	and	r25, r21
    1eba:	11 f0       	breq	.+4      	; 0x1ec0 <__mulsf3x+0x16>
    1ebc:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__fp_inf>
    1ec0:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <__fp_nan>
    1ec4:	11 24       	eor	r1, r1
    1ec6:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__fp_szero>
    1eca:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__fp_split3>
    1ece:	70 f3       	brcs	.-36     	; 0x1eac <__mulsf3x+0x2>

00001ed0 <__mulsf3_pse>:
    1ed0:	95 9f       	mul	r25, r21
    1ed2:	c1 f3       	breq	.-16     	; 0x1ec4 <__mulsf3x+0x1a>
    1ed4:	95 0f       	add	r25, r21
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	55 1f       	adc	r21, r21
    1eda:	62 9f       	mul	r22, r18
    1edc:	f0 01       	movw	r30, r0
    1ede:	72 9f       	mul	r23, r18
    1ee0:	bb 27       	eor	r27, r27
    1ee2:	f0 0d       	add	r31, r0
    1ee4:	b1 1d       	adc	r27, r1
    1ee6:	63 9f       	mul	r22, r19
    1ee8:	aa 27       	eor	r26, r26
    1eea:	f0 0d       	add	r31, r0
    1eec:	b1 1d       	adc	r27, r1
    1eee:	aa 1f       	adc	r26, r26
    1ef0:	64 9f       	mul	r22, r20
    1ef2:	66 27       	eor	r22, r22
    1ef4:	b0 0d       	add	r27, r0
    1ef6:	a1 1d       	adc	r26, r1
    1ef8:	66 1f       	adc	r22, r22
    1efa:	82 9f       	mul	r24, r18
    1efc:	22 27       	eor	r18, r18
    1efe:	b0 0d       	add	r27, r0
    1f00:	a1 1d       	adc	r26, r1
    1f02:	62 1f       	adc	r22, r18
    1f04:	73 9f       	mul	r23, r19
    1f06:	b0 0d       	add	r27, r0
    1f08:	a1 1d       	adc	r26, r1
    1f0a:	62 1f       	adc	r22, r18
    1f0c:	83 9f       	mul	r24, r19
    1f0e:	a0 0d       	add	r26, r0
    1f10:	61 1d       	adc	r22, r1
    1f12:	22 1f       	adc	r18, r18
    1f14:	74 9f       	mul	r23, r20
    1f16:	33 27       	eor	r19, r19
    1f18:	a0 0d       	add	r26, r0
    1f1a:	61 1d       	adc	r22, r1
    1f1c:	23 1f       	adc	r18, r19
    1f1e:	84 9f       	mul	r24, r20
    1f20:	60 0d       	add	r22, r0
    1f22:	21 1d       	adc	r18, r1
    1f24:	82 2f       	mov	r24, r18
    1f26:	76 2f       	mov	r23, r22
    1f28:	6a 2f       	mov	r22, r26
    1f2a:	11 24       	eor	r1, r1
    1f2c:	9f 57       	subi	r25, 0x7F	; 127
    1f2e:	50 40       	sbci	r21, 0x00	; 0
    1f30:	9a f0       	brmi	.+38     	; 0x1f58 <__mulsf3_pse+0x88>
    1f32:	f1 f0       	breq	.+60     	; 0x1f70 <__mulsf3_pse+0xa0>
    1f34:	88 23       	and	r24, r24
    1f36:	4a f0       	brmi	.+18     	; 0x1f4a <__mulsf3_pse+0x7a>
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	bb 1f       	adc	r27, r27
    1f3e:	66 1f       	adc	r22, r22
    1f40:	77 1f       	adc	r23, r23
    1f42:	88 1f       	adc	r24, r24
    1f44:	91 50       	subi	r25, 0x01	; 1
    1f46:	50 40       	sbci	r21, 0x00	; 0
    1f48:	a9 f7       	brne	.-22     	; 0x1f34 <__mulsf3_pse+0x64>
    1f4a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f4c:	51 05       	cpc	r21, r1
    1f4e:	80 f0       	brcs	.+32     	; 0x1f70 <__mulsf3_pse+0xa0>
    1f50:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__fp_inf>
    1f54:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__fp_szero>
    1f58:	5f 3f       	cpi	r21, 0xFF	; 255
    1f5a:	e4 f3       	brlt	.-8      	; 0x1f54 <__mulsf3_pse+0x84>
    1f5c:	98 3e       	cpi	r25, 0xE8	; 232
    1f5e:	d4 f3       	brlt	.-12     	; 0x1f54 <__mulsf3_pse+0x84>
    1f60:	86 95       	lsr	r24
    1f62:	77 95       	ror	r23
    1f64:	67 95       	ror	r22
    1f66:	b7 95       	ror	r27
    1f68:	f7 95       	ror	r31
    1f6a:	e7 95       	ror	r30
    1f6c:	9f 5f       	subi	r25, 0xFF	; 255
    1f6e:	c1 f7       	brne	.-16     	; 0x1f60 <__mulsf3_pse+0x90>
    1f70:	fe 2b       	or	r31, r30
    1f72:	88 0f       	add	r24, r24
    1f74:	91 1d       	adc	r25, r1
    1f76:	96 95       	lsr	r25
    1f78:	87 95       	ror	r24
    1f7a:	97 f9       	bld	r25, 7
    1f7c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000393c <__fp_inf>:
    393c:	97 f9       	bld	r25, 7
    393e:	9f 67       	ori	r25, 0x7F	; 127
    3940:	80 e8       	ldi	r24, 0x80	; 128
    3942:	70 e0       	ldi	r23, 0x00	; 0
    3944:	60 e0       	ldi	r22, 0x00	; 0
    3946:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003964 <__fp_nan>:
    3964:	9f ef       	ldi	r25, 0xFF	; 255
    3966:	80 ec       	ldi	r24, 0xC0	; 192
    3968:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003904 <__fp_pscA>:
    3904:	00 24       	eor	r0, r0
    3906:	0a 94       	dec	r0
    3908:	16 16       	cp	r1, r22
    390a:	17 06       	cpc	r1, r23
    390c:	18 06       	cpc	r1, r24
    390e:	09 06       	cpc	r0, r25
    3910:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003912 <__fp_pscB>:
    3912:	00 24       	eor	r0, r0
    3914:	0a 94       	dec	r0
    3916:	12 16       	cp	r1, r18
    3918:	13 06       	cpc	r1, r19
    391a:	14 06       	cpc	r1, r20
    391c:	05 06       	cpc	r0, r21
    391e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003862 <__fp_round>:
    3862:	09 2e       	mov	r0, r25
    3864:	03 94       	inc	r0
    3866:	00 0c       	add	r0, r0
    3868:	11 f4       	brne	.+4      	; 0x386e <__fp_round+0xc>
    386a:	88 23       	and	r24, r24
    386c:	52 f0       	brmi	.+20     	; 0x3882 <__fp_round+0x20>
    386e:	bb 0f       	add	r27, r27
    3870:	40 f4       	brcc	.+16     	; 0x3882 <__fp_round+0x20>
    3872:	bf 2b       	or	r27, r31
    3874:	11 f4       	brne	.+4      	; 0x387a <__fp_round+0x18>
    3876:	60 ff       	sbrs	r22, 0
    3878:	04 c0       	rjmp	.+8      	; 0x3882 <__fp_round+0x20>
    387a:	6f 5f       	subi	r22, 0xFF	; 255
    387c:	7f 4f       	sbci	r23, 0xFF	; 255
    387e:	8f 4f       	sbci	r24, 0xFF	; 255
    3880:	9f 4f       	sbci	r25, 0xFF	; 255
    3882:	08 95       	ret

Disassembly of section .text.avrlibc:

00003762 <memcpy>:
    3762:	cf 92       	push	r12
    3764:	df 92       	push	r13
    3766:	ef 92       	push	r14
    3768:	dc 01       	movw	r26, r24
    376a:	6a 01       	movw	r12, r20
    376c:	e6 2e       	mov	r14, r22
    376e:	28 0f       	add	r18, r24
    3770:	39 1f       	adc	r19, r25
    3772:	a2 17       	cp	r26, r18
    3774:	b3 07       	cpc	r27, r19
    3776:	51 f0       	breq	.+20     	; 0x378c <memcpy+0x2a>
    3778:	f6 01       	movw	r30, r12
    377a:	5e 2d       	mov	r21, r14
    377c:	0e 94 97 1c 	call	0x392e	; 0x392e <__xload_1>
    3780:	6d 93       	st	X+, r22
    3782:	4f ef       	ldi	r20, 0xFF	; 255
    3784:	c4 1a       	sub	r12, r20
    3786:	d4 0a       	sbc	r13, r20
    3788:	e4 0a       	sbc	r14, r20
    378a:	f3 cf       	rjmp	.-26     	; 0x3772 <memcpy+0x10>
    378c:	ef 90       	pop	r14
    378e:	df 90       	pop	r13
    3790:	cf 90       	pop	r12
    3792:	08 95       	ret

Disassembly of section .text.avrlibc:

00003920 <memset>:
    3920:	dc 01       	movw	r26, r24
    3922:	01 c0       	rjmp	.+2      	; 0x3926 <memset+0x6>
    3924:	6d 93       	st	X+, r22
    3926:	41 50       	subi	r20, 0x01	; 1
    3928:	50 40       	sbci	r21, 0x00	; 0
    392a:	e0 f7       	brcc	.-8      	; 0x3924 <memset+0x4>
    392c:	08 95       	ret

Disassembly of section .text.avrlibc:

000038e4 <eeprom_read_byte>:
    38e4:	cb 01       	movw	r24, r22
    38e6:	03 d0       	rcall	.+6      	; 0x38ee <eeprom_mapen>
    38e8:	80 81       	ld	r24, Z
    38ea:	99 27       	eor	r25, r25
    38ec:	08 95       	ret

000038ee <eeprom_mapen>:
    38ee:	fc 01       	movw	r30, r24
    38f0:	e0 50       	subi	r30, 0x00	; 0
    38f2:	fc 4e       	sbci	r31, 0xEC	; 236
    38f4:	08 95       	ret

Disassembly of section .text.libgcc:

0000392e <__xload_1>:
    392e:	57 fd       	sbrc	r21, 7
    3930:	03 c0       	rjmp	.+6      	; 0x3938 <__xload_1+0xa>
    3932:	5b bf       	out	0x3b, r21	; 59
    3934:	67 91       	elpm	r22, Z+
    3936:	08 95       	ret
    3938:	60 81       	ld	r22, Z
    393a:	08 95       	ret
